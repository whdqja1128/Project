
mini_bt_dht.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065cc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f1c  0800676c  0800676c  0000776c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007688  08007688  0000909c  2**0
                  CONTENTS
  4 .ARM          00000008  08007688  08007688  00008688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007690  08007690  0000909c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007690  08007690  00008690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007694  08007694  00008694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000009c  20000000  08007698  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a8  2000009c  08007734  0000909c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000844  08007734  00009844  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000122be  00000000  00000000  000090cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000276f  00000000  00000000  0001b38a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a0  00000000  00000000  0001db00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e0c  00000000  00000000  0001eca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003f48  00000000  00000000  0001faac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015427  00000000  00000000  000239f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ec42  00000000  00000000  00038e1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d7a5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058a8  00000000  00000000  000d7aa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000dd348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000009c 	.word	0x2000009c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006754 	.word	0x08006754

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a0 	.word	0x200000a0
 80001dc:	08006754 	.word	0x08006754

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <register_server_command_callback>:
// 서버로부터 명령을 수신하고 처리하기 위한 콜백 함수 포인터
static void (*server_command_callback)(char *cmd) = NULL;

// 서버 명령 콜백 함수 등록
void register_server_command_callback(void (*callback)(char *cmd))
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
    server_command_callback = callback;
 8000588:	4a04      	ldr	r2, [pc, #16]	@ (800059c <register_server_command_callback+0x1c>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6013      	str	r3, [r2, #0]
}
 800058e:	bf00      	nop
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	200004f4 	.word	0x200004f4

080005a0 <esp_event>:
    return 0;
}

// 서버 이벤트 처리 함수
void esp_event(char *recvBuf)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b0a0      	sub	sp, #128	@ 0x80
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
    // 중복 로그인 메시지를 체크하고 무시
    if(strstr(recvBuf, "Already logged") != NULL) {
 80005a8:	493f      	ldr	r1, [pc, #252]	@ (80006a8 <esp_event+0x108>)
 80005aa:	6878      	ldr	r0, [r7, #4]
 80005ac:	f004 fd0f 	bl	8004fce <strstr>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d174      	bne.n	80006a0 <esp_event+0x100>
        return; // 중복 로그인 메시지는 무시하고 출력하지 않음
    }

    // 서버로부터 명령 수신 처리 추가
    if(strstr(recvBuf, "+IPD,") != NULL) {
 80005b6:	493d      	ldr	r1, [pc, #244]	@ (80006ac <esp_event+0x10c>)
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f004 fd08 	bl	8004fce <strstr>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d06e      	beq.n	80006a2 <esp_event+0x102>
        char *data_start = strstr(recvBuf, ":");
 80005c4:	213a      	movs	r1, #58	@ 0x3a
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f004 fcd0 	bl	8004f6c <strchr>
 80005cc:	6778      	str	r0, [r7, #116]	@ 0x74

        if(data_start != NULL && server_command_callback != NULL) {
 80005ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d066      	beq.n	80006a2 <esp_event+0x102>
 80005d4:	4b36      	ldr	r3, [pc, #216]	@ (80006b0 <esp_event+0x110>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d062      	beq.n	80006a2 <esp_event+0x102>
            data_start++; // 콜론 다음 문자부터 실제 데이터
 80005dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80005de:	3301      	adds	r3, #1
 80005e0:	677b      	str	r3, [r7, #116]	@ 0x74

            // NULL 종료 문자 추가
            char cmd_buffer[100] = {0};
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	f107 0310 	add.w	r3, r7, #16
 80005ea:	2260      	movs	r2, #96	@ 0x60
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f004 fcb4 	bl	8004f5c <memset>
            strncpy(cmd_buffer, data_start, sizeof(cmd_buffer)-1);
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2263      	movs	r2, #99	@ 0x63
 80005fa:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80005fc:	4618      	mov	r0, r3
 80005fe:	f004 fcd3 	bl	8004fa8 <strncpy>

            // 불필요한 개행 문자 제거
            char *newline = strchr(cmd_buffer, '\r');
 8000602:	f107 030c 	add.w	r3, r7, #12
 8000606:	210d      	movs	r1, #13
 8000608:	4618      	mov	r0, r3
 800060a:	f004 fcaf 	bl	8004f6c <strchr>
 800060e:	6738      	str	r0, [r7, #112]	@ 0x70
            if (newline) *newline = '\0';
 8000610:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000612:	2b00      	cmp	r3, #0
 8000614:	d002      	beq.n	800061c <esp_event+0x7c>
 8000616:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
            newline = strchr(cmd_buffer, '\n');
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	210a      	movs	r1, #10
 8000622:	4618      	mov	r0, r3
 8000624:	f004 fca2 	bl	8004f6c <strchr>
 8000628:	6738      	str	r0, [r7, #112]	@ 0x70
            if (newline) *newline = '\0';
 800062a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800062c:	2b00      	cmp	r3, #0
 800062e:	d002      	beq.n	8000636 <esp_event+0x96>
 8000630:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]

            // 양쪽 공백 제거
            char *start = cmd_buffer;
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	67fb      	str	r3, [r7, #124]	@ 0x7c
            char *end = cmd_buffer + strlen(cmd_buffer) - 1;
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff fdcd 	bl	80001e0 <strlen>
 8000646:	4603      	mov	r3, r0
 8000648:	3b01      	subs	r3, #1
 800064a:	f107 020c 	add.w	r2, r7, #12
 800064e:	4413      	add	r3, r2
 8000650:	67bb      	str	r3, [r7, #120]	@ 0x78
            while (*start && (*start == ' ' || *start == '\t')) start++;
 8000652:	e002      	b.n	800065a <esp_event+0xba>
 8000654:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000656:	3301      	adds	r3, #1
 8000658:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800065a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d00d      	beq.n	800067e <esp_event+0xde>
 8000662:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b20      	cmp	r3, #32
 8000668:	d0f4      	beq.n	8000654 <esp_event+0xb4>
 800066a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b09      	cmp	r3, #9
 8000670:	d0f0      	beq.n	8000654 <esp_event+0xb4>
            while (end > start && (*end == ' ' || *end == '\t')) *end-- = '\0';
 8000672:	e004      	b.n	800067e <esp_event+0xde>
 8000674:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000676:	1e5a      	subs	r2, r3, #1
 8000678:	67ba      	str	r2, [r7, #120]	@ 0x78
 800067a:	2200      	movs	r2, #0
 800067c:	701a      	strb	r2, [r3, #0]
 800067e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000680:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000682:	429a      	cmp	r2, r3
 8000684:	d907      	bls.n	8000696 <esp_event+0xf6>
 8000686:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b20      	cmp	r3, #32
 800068c:	d0f2      	beq.n	8000674 <esp_event+0xd4>
 800068e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b09      	cmp	r3, #9
 8000694:	d0ee      	beq.n	8000674 <esp_event+0xd4>

            // 서버 명령 콜백 직접 호출 (로그 출력 제거)
            server_command_callback(start);
 8000696:	4b06      	ldr	r3, [pc, #24]	@ (80006b0 <esp_event+0x110>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800069c:	4798      	blx	r3
 800069e:	e000      	b.n	80006a2 <esp_event+0x102>
        return; // 중복 로그인 메시지는 무시하고 출력하지 않음
 80006a0:	bf00      	nop
        }
    }
}
 80006a2:	3780      	adds	r7, #128	@ 0x80
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	08006848 	.word	0x08006848
 80006ac:	08006858 	.word	0x08006858
 80006b0:	200004f4 	.word	0x200004f4

080006b4 <HAL_UART_RxCpltCallback>:
    return length;
}

// UART 수신 완료 콜백 함수
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	f5ad 6d82 	sub.w	sp, sp, #1040	@ 0x410
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80006c0:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 80006c4:	6018      	str	r0, [r3, #0]
    uint16_t i;

    if(huart == &huart2)
 80006c6:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80006ca:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a3f      	ldr	r2, [pc, #252]	@ (80007d0 <HAL_UART_RxCpltCallback+0x11c>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d131      	bne.n	800073a <HAL_UART_RxCpltCallback+0x86>
    {
        for(i=0; rx2Data[i] != 0; i++);
 80006d6:	2300      	movs	r3, #0
 80006d8:	f8a7 340e 	strh.w	r3, [r7, #1038]	@ 0x40e
 80006dc:	e004      	b.n	80006e8 <HAL_UART_RxCpltCallback+0x34>
 80006de:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	@ 0x40e
 80006e2:	3301      	adds	r3, #1
 80006e4:	f8a7 340e 	strh.w	r3, [r7, #1038]	@ 0x40e
 80006e8:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	@ 0x40e
 80006ec:	4a39      	ldr	r2, [pc, #228]	@ (80007d4 <HAL_UART_RxCpltCallback+0x120>)
 80006ee:	5cd3      	ldrb	r3, [r2, r3]
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d1f3      	bne.n	80006de <HAL_UART_RxCpltCallback+0x2a>
        rx2Data[i] = cdata;
 80006f6:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	@ 0x40e
 80006fa:	4a37      	ldr	r2, [pc, #220]	@ (80007d8 <HAL_UART_RxCpltCallback+0x124>)
 80006fc:	7811      	ldrb	r1, [r2, #0]
 80006fe:	4a35      	ldr	r2, [pc, #212]	@ (80007d4 <HAL_UART_RxCpltCallback+0x120>)
 8000700:	54d1      	strb	r1, [r2, r3]
        rx2Data[i+1] = 0;
 8000702:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	@ 0x40e
 8000706:	3301      	adds	r3, #1
 8000708:	4a32      	ldr	r2, [pc, #200]	@ (80007d4 <HAL_UART_RxCpltCallback+0x120>)
 800070a:	2100      	movs	r1, #0
 800070c:	54d1      	strb	r1, [r2, r3]

        if(cdata == '\r' || i >= 48)
 800070e:	4b32      	ldr	r3, [pc, #200]	@ (80007d8 <HAL_UART_RxCpltCallback+0x124>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b0d      	cmp	r3, #13
 8000714:	d003      	beq.n	800071e <HAL_UART_RxCpltCallback+0x6a>
 8000716:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	@ 0x40e
 800071a:	2b2f      	cmp	r3, #47	@ 0x2f
 800071c:	d907      	bls.n	800072e <HAL_UART_RxCpltCallback+0x7a>
        {
            rx2Flag = 1;
 800071e:	4b2f      	ldr	r3, [pc, #188]	@ (80007dc <HAL_UART_RxCpltCallback+0x128>)
 8000720:	2201      	movs	r2, #1
 8000722:	701a      	strb	r2, [r3, #0]
            memset((void*)rx2Data, 0, sizeof(rx2Data)); // 타입 캐스팅 추가
 8000724:	2232      	movs	r2, #50	@ 0x32
 8000726:	2100      	movs	r1, #0
 8000728:	482a      	ldr	r0, [pc, #168]	@ (80007d4 <HAL_UART_RxCpltCallback+0x120>)
 800072a:	f004 fc17 	bl	8004f5c <memset>
        }

        HAL_UART_Receive_IT(&huart2, &cdata, 1);
 800072e:	2201      	movs	r2, #1
 8000730:	4929      	ldr	r1, [pc, #164]	@ (80007d8 <HAL_UART_RxCpltCallback+0x124>)
 8000732:	4827      	ldr	r0, [pc, #156]	@ (80007d0 <HAL_UART_RxCpltCallback+0x11c>)
 8000734:	f003 fa0c 	bl	8003b50 <HAL_UART_Receive_IT>
            }
        }

        HAL_UART_Receive_IT(&huart6, &data, 1);
    }
}
 8000738:	e044      	b.n	80007c4 <HAL_UART_RxCpltCallback+0x110>
    else if(huart == &huart6)
 800073a:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800073e:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a26      	ldr	r2, [pc, #152]	@ (80007e0 <HAL_UART_RxCpltCallback+0x12c>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d13c      	bne.n	80007c4 <HAL_UART_RxCpltCallback+0x110>
        if(cb_data.length < MAX_ESP_RX_BUFFER)
 800074a:	4b26      	ldr	r3, [pc, #152]	@ (80007e4 <HAL_UART_RxCpltCallback+0x130>)
 800074c:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000750:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000754:	d231      	bcs.n	80007ba <HAL_UART_RxCpltCallback+0x106>
            cb_data.buf[cb_data.length++] = data;
 8000756:	4b23      	ldr	r3, [pc, #140]	@ (80007e4 <HAL_UART_RxCpltCallback+0x130>)
 8000758:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 800075c:	1c5a      	adds	r2, r3, #1
 800075e:	b291      	uxth	r1, r2
 8000760:	4a20      	ldr	r2, [pc, #128]	@ (80007e4 <HAL_UART_RxCpltCallback+0x130>)
 8000762:	f8a2 1400 	strh.w	r1, [r2, #1024]	@ 0x400
 8000766:	461a      	mov	r2, r3
 8000768:	4b1f      	ldr	r3, [pc, #124]	@ (80007e8 <HAL_UART_RxCpltCallback+0x134>)
 800076a:	7819      	ldrb	r1, [r3, #0]
 800076c:	4b1d      	ldr	r3, [pc, #116]	@ (80007e4 <HAL_UART_RxCpltCallback+0x130>)
 800076e:	5499      	strb	r1, [r3, r2]
            if (data == '\n' && cb_data.length > 2) {
 8000770:	4b1d      	ldr	r3, [pc, #116]	@ (80007e8 <HAL_UART_RxCpltCallback+0x134>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b0a      	cmp	r3, #10
 8000776:	d120      	bne.n	80007ba <HAL_UART_RxCpltCallback+0x106>
 8000778:	4b1a      	ldr	r3, [pc, #104]	@ (80007e4 <HAL_UART_RxCpltCallback+0x130>)
 800077a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 800077e:	2b02      	cmp	r3, #2
 8000780:	d91b      	bls.n	80007ba <HAL_UART_RxCpltCallback+0x106>
                char temp_buf[MAX_ESP_RX_BUFFER] = {0};
 8000782:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8000786:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	3304      	adds	r3, #4
 8000790:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f004 fbe0 	bl	8004f5c <memset>
                strncpy(temp_buf, (char*)cb_data.buf, cb_data.length);
 800079c:	4b11      	ldr	r3, [pc, #68]	@ (80007e4 <HAL_UART_RxCpltCallback+0x130>)
 800079e:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80007a2:	461a      	mov	r2, r3
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	490e      	ldr	r1, [pc, #56]	@ (80007e4 <HAL_UART_RxCpltCallback+0x130>)
 80007aa:	4618      	mov	r0, r3
 80007ac:	f004 fbfc 	bl	8004fa8 <strncpy>
                esp_event(temp_buf);
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff fef3 	bl	80005a0 <esp_event>
        HAL_UART_Receive_IT(&huart6, &data, 1);
 80007ba:	2201      	movs	r2, #1
 80007bc:	490a      	ldr	r1, [pc, #40]	@ (80007e8 <HAL_UART_RxCpltCallback+0x134>)
 80007be:	4808      	ldr	r0, [pc, #32]	@ (80007e0 <HAL_UART_RxCpltCallback+0x12c>)
 80007c0:	f003 f9c6 	bl	8003b50 <HAL_UART_Receive_IT>
}
 80007c4:	bf00      	nop
 80007c6:	f507 6782 	add.w	r7, r7, #1040	@ 0x410
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200005dc 	.word	0x200005dc
 80007d4:	200000bc 	.word	0x200000bc
 80007d8:	200000ee 	.word	0x200000ee
 80007dc:	200000b8 	.word	0x200000b8
 80007e0:	20000624 	.word	0x20000624
 80007e4:	200000f0 	.word	0x200000f0
 80007e8:	200000ef 	.word	0x200000ef

080007ec <_write>:

                return 0;
            }

            int _write(int file, char *ptr, int len)
            {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	607a      	str	r2, [r7, #4]
            	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 1000);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	b29a      	uxth	r2, r3
 80007fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000800:	68b9      	ldr	r1, [r7, #8]
 8000802:	4804      	ldr	r0, [pc, #16]	@ (8000814 <_write+0x28>)
 8000804:	f003 f882 	bl	800390c <HAL_UART_Transmit>
            	return len;
 8000808:	687b      	ldr	r3, [r7, #4]
            }
 800080a:	4618      	mov	r0, r3
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200005dc 	.word	0x200005dc

08000818 <poll_uart6_input>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void poll_uart6_input() {
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
    uint8_t ch;
    while (HAL_UART_Receive(&huart6, &ch, 1, 10) == HAL_OK) {
 800081e:	e021      	b.n	8000864 <poll_uart6_input+0x4c>
        if (ch == '\n') {
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	2b0a      	cmp	r3, #10
 8000824:	d110      	bne.n	8000848 <poll_uart6_input+0x30>
            recv_line[idx] = '\0';
 8000826:	4b16      	ldr	r3, [pc, #88]	@ (8000880 <poll_uart6_input+0x68>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	461a      	mov	r2, r3
 800082c:	4b15      	ldr	r3, [pc, #84]	@ (8000884 <poll_uart6_input+0x6c>)
 800082e:	2100      	movs	r1, #0
 8000830:	5499      	strb	r1, [r3, r2]
            printf("📥 STM32 수신: %s\r\n", recv_line);
 8000832:	4914      	ldr	r1, [pc, #80]	@ (8000884 <poll_uart6_input+0x6c>)
 8000834:	4814      	ldr	r0, [pc, #80]	@ (8000888 <poll_uart6_input+0x70>)
 8000836:	f004 f9c9 	bl	8004bcc <iprintf>
            handle_esp_event(recv_line);
 800083a:	4812      	ldr	r0, [pc, #72]	@ (8000884 <poll_uart6_input+0x6c>)
 800083c:	f000 f8d4 	bl	80009e8 <handle_esp_event>
            idx = 0;
 8000840:	4b0f      	ldr	r3, [pc, #60]	@ (8000880 <poll_uart6_input+0x68>)
 8000842:	2200      	movs	r2, #0
 8000844:	701a      	strb	r2, [r3, #0]
 8000846:	e00d      	b.n	8000864 <poll_uart6_input+0x4c>
        } else if (idx < sizeof(recv_line) - 1) {
 8000848:	4b0d      	ldr	r3, [pc, #52]	@ (8000880 <poll_uart6_input+0x68>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b62      	cmp	r3, #98	@ 0x62
 800084e:	d809      	bhi.n	8000864 <poll_uart6_input+0x4c>
            recv_line[idx++] = ch;
 8000850:	4b0b      	ldr	r3, [pc, #44]	@ (8000880 <poll_uart6_input+0x68>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	1c5a      	adds	r2, r3, #1
 8000856:	b2d1      	uxtb	r1, r2
 8000858:	4a09      	ldr	r2, [pc, #36]	@ (8000880 <poll_uart6_input+0x68>)
 800085a:	7011      	strb	r1, [r2, #0]
 800085c:	461a      	mov	r2, r3
 800085e:	79f9      	ldrb	r1, [r7, #7]
 8000860:	4b08      	ldr	r3, [pc, #32]	@ (8000884 <poll_uart6_input+0x6c>)
 8000862:	5499      	strb	r1, [r3, r2]
    while (HAL_UART_Receive(&huart6, &ch, 1, 10) == HAL_OK) {
 8000864:	1df9      	adds	r1, r7, #7
 8000866:	230a      	movs	r3, #10
 8000868:	2201      	movs	r2, #1
 800086a:	4808      	ldr	r0, [pc, #32]	@ (800088c <poll_uart6_input+0x74>)
 800086c:	f003 f8d9 	bl	8003a22 <HAL_UART_Receive>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d0d4      	beq.n	8000820 <poll_uart6_input+0x8>
        }
    }
}
 8000876:	bf00      	nop
 8000878:	bf00      	nop
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	200006e8 	.word	0x200006e8
 8000884:	20000684 	.word	0x20000684
 8000888:	08006edc 	.word	0x08006edc
 800088c:	20000624 	.word	0x20000624

08000890 <send_message_to_server>:

void send_message_to_server(char *msg) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b09c      	sub	sp, #112	@ 0x70
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
    char buffer[100];
    snprintf(buffer, sizeof(buffer), "%s\n", msg);
 8000898:	f107 000c 	add.w	r0, r7, #12
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4a0b      	ldr	r2, [pc, #44]	@ (80008cc <send_message_to_server+0x3c>)
 80008a0:	2164      	movs	r1, #100	@ 0x64
 80008a2:	f004 fa03 	bl	8004cac <sniprintf>
    HAL_UART_Transmit(&huart6, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80008a6:	f107 030c 	add.w	r3, r7, #12
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff fc98 	bl	80001e0 <strlen>
 80008b0:	4603      	mov	r3, r0
 80008b2:	b29a      	uxth	r2, r3
 80008b4:	f107 010c 	add.w	r1, r7, #12
 80008b8:	f04f 33ff 	mov.w	r3, #4294967295
 80008bc:	4804      	ldr	r0, [pc, #16]	@ (80008d0 <send_message_to_server+0x40>)
 80008be:	f003 f825 	bl	800390c <HAL_UART_Transmit>
}
 80008c2:	bf00      	nop
 80008c4:	3770      	adds	r7, #112	@ 0x70
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	08006ef4 	.word	0x08006ef4
 80008d0:	20000624 	.word	0x20000624

080008d4 <Buzzer_Control>:

// 부저 제어 함수
void Buzzer_Control(bool state)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]
	// GPIO로 부저 제어
	    HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, state ? BUZZER_ON : BUZZER_OFF);
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	461a      	mov	r2, r3
 80008e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008e6:	481c      	ldr	r0, [pc, #112]	@ (8000958 <Buzzer_Control+0x84>)
 80008e8:	f001 fe32 	bl	8002550 <HAL_GPIO_WritePin>

	    // 상태가 변경될 때만 메시지 전송 (이미 같은 상태면 중복 메시지 방지)
	    if (buzzer_state != state) {
 80008ec:	4b1b      	ldr	r3, [pc, #108]	@ (800095c <Buzzer_Control+0x88>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	79fa      	ldrb	r2, [r7, #7]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d02c      	beq.n	8000950 <Buzzer_Control+0x7c>
	        // 부저 상태 저장
	        buzzer_state = state;
 80008f6:	4a19      	ldr	r2, [pc, #100]	@ (800095c <Buzzer_Control+0x88>)
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	7013      	strb	r3, [r2, #0]

	        // 서버에 상태 변경 메시지 전송
	        if (server_connected) {
 80008fc:	4b18      	ldr	r3, [pc, #96]	@ (8000960 <Buzzer_Control+0x8c>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d022      	beq.n	800094a <Buzzer_Control+0x76>
	            if (state) {
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d012      	beq.n	8000930 <Buzzer_Control+0x5c>
	                // 부저가 켜질 때 개별 메시지 전송
	                printf("부저 ON 메시지 전송 시도\r\n");
 800090a:	4816      	ldr	r0, [pc, #88]	@ (8000964 <Buzzer_Control+0x90>)
 800090c:	f004 f9c6 	bl	8004c9c <puts>
	                send_message_to_server("[USR_BT]@SOUNDON\n");
 8000910:	4815      	ldr	r0, [pc, #84]	@ (8000968 <Buzzer_Control+0x94>)
 8000912:	f7ff ffbd 	bl	8000890 <send_message_to_server>
	                HAL_Delay(50);
 8000916:	2032      	movs	r0, #50	@ 0x32
 8000918:	f001 f85c 	bl	80019d4 <HAL_Delay>
	                send_message_to_server("[USR_LIN]SOUNDON");
 800091c:	4813      	ldr	r0, [pc, #76]	@ (800096c <Buzzer_Control+0x98>)
 800091e:	f7ff ffb7 	bl	8000890 <send_message_to_server>
	                HAL_Delay(50);
 8000922:	2032      	movs	r0, #50	@ 0x32
 8000924:	f001 f856 	bl	80019d4 <HAL_Delay>

	                // 디버깅용 로그
	                printf("부저 ON 메시지 전송 완료\r\n");
 8000928:	4811      	ldr	r0, [pc, #68]	@ (8000970 <Buzzer_Control+0x9c>)
 800092a:	f004 f9b7 	bl	8004c9c <puts>
	            }
	        } else {
	            printf("서버 연결 안됨: 메시지 전송 실패\r\n");
	        }
	    }
	}
 800092e:	e00f      	b.n	8000950 <Buzzer_Control+0x7c>
	                printf("부저 OFF 메시지 전송 시도\r\n");
 8000930:	4810      	ldr	r0, [pc, #64]	@ (8000974 <Buzzer_Control+0xa0>)
 8000932:	f004 f9b3 	bl	8004c9c <puts>
	                send_message_to_server("[STM32]SOUND@OFF");
 8000936:	4810      	ldr	r0, [pc, #64]	@ (8000978 <Buzzer_Control+0xa4>)
 8000938:	f7ff ffaa 	bl	8000890 <send_message_to_server>
	                HAL_Delay(50);
 800093c:	2032      	movs	r0, #50	@ 0x32
 800093e:	f001 f849 	bl	80019d4 <HAL_Delay>
	                printf("부저 OFF 메시지 전송 완료\r\n");
 8000942:	480e      	ldr	r0, [pc, #56]	@ (800097c <Buzzer_Control+0xa8>)
 8000944:	f004 f9aa 	bl	8004c9c <puts>
	}
 8000948:	e002      	b.n	8000950 <Buzzer_Control+0x7c>
	            printf("서버 연결 안됨: 메시지 전송 실패\r\n");
 800094a:	480d      	ldr	r0, [pc, #52]	@ (8000980 <Buzzer_Control+0xac>)
 800094c:	f004 f9a6 	bl	8004c9c <puts>
	}
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40020800 	.word	0x40020800
 800095c:	2000066d 	.word	0x2000066d
 8000960:	20000000 	.word	0x20000000
 8000964:	08006ef8 	.word	0x08006ef8
 8000968:	08006f1c 	.word	0x08006f1c
 800096c:	08006f30 	.word	0x08006f30
 8000970:	08006f44 	.word	0x08006f44
 8000974:	08006f68 	.word	0x08006f68
 8000978:	08006f8c 	.word	0x08006f8c
 800097c:	08006fa0 	.word	0x08006fa0
 8000980:	08006fc4 	.word	0x08006fc4

08000984 <Set_Alarm_Time>:

// 알람 시간 설정 함수 (인덱스 파라미터 추가)
void Set_Alarm_Time(uint8_t index, uint8_t hour, uint8_t minute)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
 800098e:	460b      	mov	r3, r1
 8000990:	71bb      	strb	r3, [r7, #6]
 8000992:	4613      	mov	r3, r2
 8000994:	717b      	strb	r3, [r7, #5]
//    printf("⚠️ 잘못된 알람 인덱스: %d (최대 %d)\r\n", index, MAX_ALARM_COUNT-1);
//    return;
//  }

  // 지정된 인덱스의 알람 설정
  alarm_times[index].hour = hour;
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	79ba      	ldrb	r2, [r7, #6]
 800099a:	4911      	ldr	r1, [pc, #68]	@ (80009e0 <Set_Alarm_Time+0x5c>)
 800099c:	011b      	lsls	r3, r3, #4
 800099e:	440b      	add	r3, r1
 80009a0:	601a      	str	r2, [r3, #0]
  alarm_times[index].minute = minute;
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	797a      	ldrb	r2, [r7, #5]
 80009a6:	490e      	ldr	r1, [pc, #56]	@ (80009e0 <Set_Alarm_Time+0x5c>)
 80009a8:	011b      	lsls	r3, r3, #4
 80009aa:	440b      	add	r3, r1
 80009ac:	3304      	adds	r3, #4
 80009ae:	601a      	str	r2, [r3, #0]
  alarm_times[index].second = 0;
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	4a0b      	ldr	r2, [pc, #44]	@ (80009e0 <Set_Alarm_Time+0x5c>)
 80009b4:	011b      	lsls	r3, r3, #4
 80009b6:	4413      	add	r3, r2
 80009b8:	3308      	adds	r3, #8
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
  alarm_times[index].active = true;
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	4a07      	ldr	r2, [pc, #28]	@ (80009e0 <Set_Alarm_Time+0x5c>)
 80009c2:	011b      	lsls	r3, r3, #4
 80009c4:	4413      	add	r3, r2
 80009c6:	330c      	adds	r3, #12
 80009c8:	2201      	movs	r2, #1
 80009ca:	701a      	strb	r2, [r3, #0]

  printf("🕒 알람 %d번 시간 설정: %02d시 %02d분\r\n", index, hour, minute);
 80009cc:	79f9      	ldrb	r1, [r7, #7]
 80009ce:	79ba      	ldrb	r2, [r7, #6]
 80009d0:	797b      	ldrb	r3, [r7, #5]
 80009d2:	4804      	ldr	r0, [pc, #16]	@ (80009e4 <Set_Alarm_Time+0x60>)
 80009d4:	f004 f8fa 	bl	8004bcc <iprintf>
}
 80009d8:	bf00      	nop
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000004 	.word	0x20000004
 80009e4:	08006ff4 	.word	0x08006ff4

080009e8 <handle_esp_event>:

// ESP 이벤트 처리 함수
void handle_esp_event(char *recvBuf)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  // 개행 문자 제거
  recvBuf[strcspn(recvBuf, "\r\n")] = 0;
 80009f0:	4913      	ldr	r1, [pc, #76]	@ (8000a40 <handle_esp_event+0x58>)
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f004 fac7 	bl	8004f86 <strcspn>
 80009f8:	4602      	mov	r2, r0
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4413      	add	r3, r2
 80009fe:	2200      	movs	r2, #0
 8000a00:	701a      	strb	r2, [r3, #0]

  // 받은 메시지 전체 로깅
  //printf("수신 메시지 (raw): '%s'\r\n", recvBuf);

  // 연결 해제 확인
  if(strstr(recvBuf, "DISCONNECT") != NULL || strstr(recvBuf, "Disconnected") != NULL) {
 8000a02:	4910      	ldr	r1, [pc, #64]	@ (8000a44 <handle_esp_event+0x5c>)
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f004 fae2 	bl	8004fce <strstr>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d106      	bne.n	8000a1e <handle_esp_event+0x36>
 8000a10:	490d      	ldr	r1, [pc, #52]	@ (8000a48 <handle_esp_event+0x60>)
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f004 fadb 	bl	8004fce <strstr>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d008      	beq.n	8000a30 <handle_esp_event+0x48>
    printf("ESP 이벤트: 서버 연결 해제\r\n");
 8000a1e:	480b      	ldr	r0, [pc, #44]	@ (8000a4c <handle_esp_event+0x64>)
 8000a20:	f004 f93c 	bl	8004c9c <puts>
    server_connected = false;
 8000a24:	4b0a      	ldr	r3, [pc, #40]	@ (8000a50 <handle_esp_event+0x68>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	701a      	strb	r2, [r3, #0]
    printf("New Disconnected\r\n");
 8000a2a:	480a      	ldr	r0, [pc, #40]	@ (8000a54 <handle_esp_event+0x6c>)
 8000a2c:	f004 f936 	bl	8004c9c <puts>
  }

  // 서버 명령어 처리
  handle_server_command(recvBuf);
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f000 f811 	bl	8000a58 <handle_server_command>
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	08007028 	.word	0x08007028
 8000a44:	0800702c 	.word	0x0800702c
 8000a48:	08007038 	.word	0x08007038
 8000a4c:	08007048 	.word	0x08007048
 8000a50:	20000000 	.word	0x20000000
 8000a54:	08007070 	.word	0x08007070

08000a58 <handle_server_command>:

// 서버 명령 처리 함수
void handle_server_command(char *cmd)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08e      	sub	sp, #56	@ 0x38
 8000a5c:	af02      	add	r7, sp, #8
 8000a5e:	6078      	str	r0, [r7, #4]
	// ALARM_SET 명령 처리 로직
	if(strstr(cmd, "ALARM_SET@") != NULL) {
 8000a60:	4983      	ldr	r1, [pc, #524]	@ (8000c70 <handle_server_command+0x218>)
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	f004 fab3 	bl	8004fce <strstr>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d03f      	beq.n	8000aee <handle_server_command+0x96>
	  printf("알람 설정 명령 수신: %s\r\n", cmd);
 8000a6e:	6879      	ldr	r1, [r7, #4]
 8000a70:	4880      	ldr	r0, [pc, #512]	@ (8000c74 <handle_server_command+0x21c>)
 8000a72:	f004 f8ab 	bl	8004bcc <iprintf>

	  // [USR_AND]ALARM_SET@인덱스@시간@분 형식 파싱
	  int index, hour, minute;
	  if(sscanf(cmd, "[USR_AND]ALARM_SET@%d@%d@%d", &index, &hour, &minute) == 3) {
 8000a76:	f107 0120 	add.w	r1, r7, #32
 8000a7a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	460b      	mov	r3, r1
 8000a86:	497c      	ldr	r1, [pc, #496]	@ (8000c78 <handle_server_command+0x220>)
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f004 f963 	bl	8004d54 <siscanf>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b03      	cmp	r3, #3
 8000a92:	d128      	bne.n	8000ae6 <handle_server_command+0x8e>
	    printf("알람 설정 요청: 인덱스=%d, 시간=%d시 %d분\r\n", index, hour, minute);
 8000a94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000a96:	6a3a      	ldr	r2, [r7, #32]
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	4878      	ldr	r0, [pc, #480]	@ (8000c7c <handle_server_command+0x224>)
 8000a9c:	f004 f896 	bl	8004bcc <iprintf>

	    // 범위 확인 후 unsigned char로 변환하여 함수 호출
	    if(index >= 0 && index < MAX_ALARM_COUNT &&
 8000aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	db18      	blt.n	8000ad8 <handle_server_command+0x80>
 8000aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa8:	2b02      	cmp	r3, #2
 8000aaa:	dc15      	bgt.n	8000ad8 <handle_server_command+0x80>
	       hour >= 0 && hour <= 23 &&
 8000aac:	6a3b      	ldr	r3, [r7, #32]
	    if(index >= 0 && index < MAX_ALARM_COUNT &&
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	db12      	blt.n	8000ad8 <handle_server_command+0x80>
	       hour >= 0 && hour <= 23 &&
 8000ab2:	6a3b      	ldr	r3, [r7, #32]
 8000ab4:	2b17      	cmp	r3, #23
 8000ab6:	dc0f      	bgt.n	8000ad8 <handle_server_command+0x80>
	       minute >= 0 && minute <= 59) {
 8000ab8:	69fb      	ldr	r3, [r7, #28]
	       hour >= 0 && hour <= 23 &&
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	db0c      	blt.n	8000ad8 <handle_server_command+0x80>
	       minute >= 0 && minute <= 59) {
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	2b3b      	cmp	r3, #59	@ 0x3b
 8000ac2:	dc09      	bgt.n	8000ad8 <handle_server_command+0x80>
	      Set_Alarm_Time((uint8_t)index, (uint8_t)hour, (uint8_t)minute);
 8000ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	6a3a      	ldr	r2, [r7, #32]
 8000aca:	b2d1      	uxtb	r1, r2
 8000acc:	69fa      	ldr	r2, [r7, #28]
 8000ace:	b2d2      	uxtb	r2, r2
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ff57 	bl	8000984 <Set_Alarm_Time>
 8000ad6:	e00a      	b.n	8000aee <handle_server_command+0x96>
	    } else {
	      printf("알람 설정 범위 오류: 인덱스=%d, 시간=%d시 %d분\r\n", index, hour, minute);
 8000ad8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000ada:	6a3a      	ldr	r2, [r7, #32]
 8000adc:	69fb      	ldr	r3, [r7, #28]
 8000ade:	4868      	ldr	r0, [pc, #416]	@ (8000c80 <handle_server_command+0x228>)
 8000ae0:	f004 f874 	bl	8004bcc <iprintf>
 8000ae4:	e003      	b.n	8000aee <handle_server_command+0x96>
	    }
	  } else {
	    printf("알람 설정 명령 형식 오류: %s\r\n", cmd);
 8000ae6:	6879      	ldr	r1, [r7, #4]
 8000ae8:	4866      	ldr	r0, [pc, #408]	@ (8000c84 <handle_server_command+0x22c>)
 8000aea:	f004 f86f 	bl	8004bcc <iprintf>
	  }
	}

	// ALARM_DELETE 명령 처리 로직도 같은 형식으로 수정
	if(strstr(cmd, "ALARM_DELETE@") != NULL) {
 8000aee:	4966      	ldr	r1, [pc, #408]	@ (8000c88 <handle_server_command+0x230>)
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f004 fa6c 	bl	8004fce <strstr>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d02f      	beq.n	8000b5c <handle_server_command+0x104>
	  printf("알람 삭제 명령 수신: %s\r\n", cmd);
 8000afc:	6879      	ldr	r1, [r7, #4]
 8000afe:	4863      	ldr	r0, [pc, #396]	@ (8000c8c <handle_server_command+0x234>)
 8000b00:	f004 f864 	bl	8004bcc <iprintf>

	  // [USR_AND]ALARM_DELETE@인덱스 형식 파싱
	  int index;
	  if(sscanf(cmd, "[USR_AND]ALARM_DELETE@%d", &index) == 1) {
 8000b04:	f107 0318 	add.w	r3, r7, #24
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4961      	ldr	r1, [pc, #388]	@ (8000c90 <handle_server_command+0x238>)
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f004 f921 	bl	8004d54 <siscanf>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d11d      	bne.n	8000b54 <handle_server_command+0xfc>
	    printf("알람 삭제 요청: 인덱스=%d\r\n", index);
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	485d      	ldr	r0, [pc, #372]	@ (8000c94 <handle_server_command+0x23c>)
 8000b1e:	f004 f855 	bl	8004bcc <iprintf>

	    // 해당 인덱스의 알람 비활성화
	    if(index >= 0 && index < MAX_ALARM_COUNT) {
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	db0f      	blt.n	8000b48 <handle_server_command+0xf0>
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	2b02      	cmp	r3, #2
 8000b2c:	dc0c      	bgt.n	8000b48 <handle_server_command+0xf0>
	      alarm_times[index].active = false;
 8000b2e:	69bb      	ldr	r3, [r7, #24]
 8000b30:	4a59      	ldr	r2, [pc, #356]	@ (8000c98 <handle_server_command+0x240>)
 8000b32:	011b      	lsls	r3, r3, #4
 8000b34:	4413      	add	r3, r2
 8000b36:	330c      	adds	r3, #12
 8000b38:	2200      	movs	r2, #0
 8000b3a:	701a      	strb	r2, [r3, #0]
	      printf("알람 %d번 비활성화 완료\r\n", index);
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4856      	ldr	r0, [pc, #344]	@ (8000c9c <handle_server_command+0x244>)
 8000b42:	f004 f843 	bl	8004bcc <iprintf>
 8000b46:	e009      	b.n	8000b5c <handle_server_command+0x104>
	    } else {
	      printf("잘못된 알람 인덱스: %d\r\n", index);
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4854      	ldr	r0, [pc, #336]	@ (8000ca0 <handle_server_command+0x248>)
 8000b4e:	f004 f83d 	bl	8004bcc <iprintf>
 8000b52:	e003      	b.n	8000b5c <handle_server_command+0x104>
	    }
	  } else {
	    printf("알람 삭제 명령 형식 오류: %s\r\n", cmd);
 8000b54:	6879      	ldr	r1, [r7, #4]
 8000b56:	4853      	ldr	r0, [pc, #332]	@ (8000ca4 <handle_server_command+0x24c>)
 8000b58:	f004 f838 	bl	8004bcc <iprintf>

  // 명령어 디버그 출력
  //printf("수신 명령어 분석: '%s'\r\n", cmd);

  // SOUND@OFF 명령 처리
  if(strstr(cmd, "SOUND@OFF") != NULL) {
 8000b5c:	4952      	ldr	r1, [pc, #328]	@ (8000ca8 <handle_server_command+0x250>)
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f004 fa35 	bl	8004fce <strstr>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d00f      	beq.n	8000b8a <handle_server_command+0x132>
    printf("부저 끄기 명령 수신: %s\r\n", cmd);
 8000b6a:	6879      	ldr	r1, [r7, #4]
 8000b6c:	484f      	ldr	r0, [pc, #316]	@ (8000cac <handle_server_command+0x254>)
 8000b6e:	f004 f82d 	bl	8004bcc <iprintf>

    // 부저 즉시 끄기
    Buzzer_Control(false);
 8000b72:	2000      	movs	r0, #0
 8000b74:	f7ff feae 	bl	80008d4 <Buzzer_Control>

    // 알람 상태 변수 초기화
    alarm_active = false;
 8000b78:	4b4d      	ldr	r3, [pc, #308]	@ (8000cb0 <handle_server_command+0x258>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	701a      	strb	r2, [r3, #0]

    // 알람 상태를 IDLE로 변경
    current_alarm_state = ALARM_STATE_IDLE;
 8000b7e:	4b4d      	ldr	r3, [pc, #308]	@ (8000cb4 <handle_server_command+0x25c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	701a      	strb	r2, [r3, #0]

    // 시작 시간 변수 초기화를 위한 추가 코드
      printf("SOUND@OFF 명령으로 알람 종료\r\n");
 8000b84:	484c      	ldr	r0, [pc, #304]	@ (8000cb8 <handle_server_command+0x260>)
 8000b86:	f004 f889 	bl	8004c9c <puts>
  }

  // 시간 명령 처리
  if(strstr(cmd, "TIME@") != NULL) {
 8000b8a:	494c      	ldr	r1, [pc, #304]	@ (8000cbc <handle_server_command+0x264>)
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f004 fa1e 	bl	8004fce <strstr>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d066      	beq.n	8000c66 <handle_server_command+0x20e>
    // 시간 문자열 추출
    char *time_str = cmd + 14;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	330e      	adds	r3, #14
 8000b9c:	62bb      	str	r3, [r7, #40]	@ 0x28

    //printf("🕒 서버 시간 수신: %s\r\n", time_str);

    // 시간 문자열 파싱 (HH:MM:SS 또는 HH-MM-SS 형식)
    int hours, minutes, seconds;
    if(sscanf(time_str, "%d-%d-%d", &hours, &minutes, &seconds) == 3) {
 8000b9e:	f107 0110 	add.w	r1, r7, #16
 8000ba2:	f107 0214 	add.w	r2, r7, #20
 8000ba6:	f107 030c 	add.w	r3, r7, #12
 8000baa:	9300      	str	r3, [sp, #0]
 8000bac:	460b      	mov	r3, r1
 8000bae:	4944      	ldr	r1, [pc, #272]	@ (8000cc0 <handle_server_command+0x268>)
 8000bb0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000bb2:	f004 f8cf 	bl	8004d54 <siscanf>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b03      	cmp	r3, #3
 8000bba:	d154      	bne.n	8000c66 <handle_server_command+0x20e>

      printf("📅 파싱된 시간: %02d시-%02d분-%02d초\r\n", hours, minutes, seconds);
 8000bbc:	6979      	ldr	r1, [r7, #20]
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	4840      	ldr	r0, [pc, #256]	@ (8000cc4 <handle_server_command+0x26c>)
 8000bc4:	f004 f802 	bl	8004bcc <iprintf>

      // 현재 알람이 비활성화 상태일 때만 새 알람 확인
      if (current_alarm_state != ALARM_STATE_ACTIVE) {
 8000bc8:	4b3a      	ldr	r3, [pc, #232]	@ (8000cb4 <handle_server_command+0x25c>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d04a      	beq.n	8000c66 <handle_server_command+0x20e>
        // 알람 배열을 순회하며 현재 시간과 일치하는 알람 찾기
        for (int i = 0; i < MAX_ALARM_COUNT; i++) {  // MAX_ALARM_COUNT(3)로 변경
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000bd4:	e044      	b.n	8000c60 <handle_server_command+0x208>
          if (alarm_times[i].active &&
 8000bd6:	4a30      	ldr	r2, [pc, #192]	@ (8000c98 <handle_server_command+0x240>)
 8000bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bda:	011b      	lsls	r3, r3, #4
 8000bdc:	4413      	add	r3, r2
 8000bde:	330c      	adds	r3, #12
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d039      	beq.n	8000c5a <handle_server_command+0x202>
              hours == alarm_times[i].hour &&
 8000be6:	4a2c      	ldr	r2, [pc, #176]	@ (8000c98 <handle_server_command+0x240>)
 8000be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bea:	011b      	lsls	r3, r3, #4
 8000bec:	4413      	add	r3, r2
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	697b      	ldr	r3, [r7, #20]
          if (alarm_times[i].active &&
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d131      	bne.n	8000c5a <handle_server_command+0x202>
              minutes == alarm_times[i].minute &&
 8000bf6:	4a28      	ldr	r2, [pc, #160]	@ (8000c98 <handle_server_command+0x240>)
 8000bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bfa:	011b      	lsls	r3, r3, #4
 8000bfc:	4413      	add	r3, r2
 8000bfe:	3304      	adds	r3, #4
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	693b      	ldr	r3, [r7, #16]
              hours == alarm_times[i].hour &&
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d128      	bne.n	8000c5a <handle_server_command+0x202>
              seconds < 5) { // 초는 5초 이내 허용
 8000c08:	68fb      	ldr	r3, [r7, #12]
              minutes == alarm_times[i].minute &&
 8000c0a:	2b04      	cmp	r3, #4
 8000c0c:	dc25      	bgt.n	8000c5a <handle_server_command+0x202>

            printf("🚨 알람 시간 일치! 알람 %d번 시작 (%02d:%02d:%02d)\r\n",
 8000c0e:	4a22      	ldr	r2, [pc, #136]	@ (8000c98 <handle_server_command+0x240>)
 8000c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c12:	011b      	lsls	r3, r3, #4
 8000c14:	4413      	add	r3, r2
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	491f      	ldr	r1, [pc, #124]	@ (8000c98 <handle_server_command+0x240>)
 8000c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c1c:	011b      	lsls	r3, r3, #4
 8000c1e:	440b      	add	r3, r1
 8000c20:	3304      	adds	r3, #4
 8000c22:	6819      	ldr	r1, [r3, #0]
 8000c24:	481c      	ldr	r0, [pc, #112]	@ (8000c98 <handle_server_command+0x240>)
 8000c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c28:	011b      	lsls	r3, r3, #4
 8000c2a:	4403      	add	r3, r0
 8000c2c:	3308      	adds	r3, #8
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	9300      	str	r3, [sp, #0]
 8000c32:	460b      	mov	r3, r1
 8000c34:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000c36:	4824      	ldr	r0, [pc, #144]	@ (8000cc8 <handle_server_command+0x270>)
 8000c38:	f003 ffc8 	bl	8004bcc <iprintf>
                   i, alarm_times[i].hour, alarm_times[i].minute, alarm_times[i].second);

            // 현재 알람 인덱스 설정하고 부저 울림
            current_alarm_index = i;
 8000c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	4b22      	ldr	r3, [pc, #136]	@ (8000ccc <handle_server_command+0x274>)
 8000c42:	701a      	strb	r2, [r3, #0]
            Buzzer_Control(true);
 8000c44:	2001      	movs	r0, #1
 8000c46:	f7ff fe45 	bl	80008d4 <Buzzer_Control>
            alarm_active = true;
 8000c4a:	4b19      	ldr	r3, [pc, #100]	@ (8000cb0 <handle_server_command+0x258>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	701a      	strb	r2, [r3, #0]
            current_alarm_state = ALARM_STATE_ACTIVE;
 8000c50:	4b18      	ldr	r3, [pc, #96]	@ (8000cb4 <handle_server_command+0x25c>)
 8000c52:	2201      	movs	r2, #1
 8000c54:	701a      	strb	r2, [r3, #0]

            break; // 한 번에 하나의 알람만 처리
 8000c56:	bf00      	nop
          }
        }
      }
    }
  }
}
 8000c58:	e005      	b.n	8000c66 <handle_server_command+0x20e>
        for (int i = 0; i < MAX_ALARM_COUNT; i++) {  // MAX_ALARM_COUNT(3)로 변경
 8000c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	ddb7      	ble.n	8000bd6 <handle_server_command+0x17e>
}
 8000c66:	bf00      	nop
 8000c68:	3730      	adds	r7, #48	@ 0x30
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	08007084 	.word	0x08007084
 8000c74:	08007090 	.word	0x08007090
 8000c78:	080070b4 	.word	0x080070b4
 8000c7c:	080070d0 	.word	0x080070d0
 8000c80:	0800710c 	.word	0x0800710c
 8000c84:	0800714c 	.word	0x0800714c
 8000c88:	08007178 	.word	0x08007178
 8000c8c:	08007188 	.word	0x08007188
 8000c90:	080071ac 	.word	0x080071ac
 8000c94:	080071c8 	.word	0x080071c8
 8000c98:	20000004 	.word	0x20000004
 8000c9c:	080071f0 	.word	0x080071f0
 8000ca0:	08007214 	.word	0x08007214
 8000ca4:	08007238 	.word	0x08007238
 8000ca8:	08007264 	.word	0x08007264
 8000cac:	08007270 	.word	0x08007270
 8000cb0:	2000066e 	.word	0x2000066e
 8000cb4:	2000066c 	.word	0x2000066c
 8000cb8:	08007294 	.word	0x08007294
 8000cbc:	080072bc 	.word	0x080072bc
 8000cc0:	080072c4 	.word	0x080072c4
 8000cc4:	080072d0 	.word	0x080072d0
 8000cc8:	08007304 	.word	0x08007304
 8000ccc:	2000066f 	.word	0x2000066f

08000cd0 <Reset_Connection>:

// 연결 초기화 함수
void Reset_Connection(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  server_connected = false;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <Reset_Connection+0x20>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	701a      	strb	r2, [r3, #0]
  conn_retry_count = 0;
 8000cda:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <Reset_Connection+0x24>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	701a      	strb	r2, [r3, #0]
  connection_errors = 0;
 8000ce0:	4b05      	ldr	r3, [pc, #20]	@ (8000cf8 <Reset_Connection+0x28>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	701a      	strb	r2, [r3, #0]
  printf("연결 초기화됨\r\n");
 8000ce6:	4805      	ldr	r0, [pc, #20]	@ (8000cfc <Reset_Connection+0x2c>)
 8000ce8:	f003 ffd8 	bl	8004c9c <puts>
}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000000 	.word	0x20000000
 8000cf4:	20000674 	.word	0x20000674
 8000cf8:	20000680 	.word	0x20000680
 8000cfc:	08007348 	.word	0x08007348

08000d00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b0a2      	sub	sp, #136	@ 0x88
 8000d04:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d06:	f000 fdf3 	bl	80018f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d0a:	f000 f929 	bl	8000f60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d0e:	f000 fabf 	bl	8001290 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d12:	f000 fa69 	bl	80011e8 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000d16:	f000 fa91 	bl	800123c <MX_USART6_UART_Init>
  MX_I2C1_Init();
 8000d1a:	f000 f9dd 	bl	80010d8 <MX_I2C1_Init>
  MX_TIM4_Init();
 8000d1e:	f000 fa09 	bl	8001134 <MX_TIM4_Init>
  MX_ADC1_Init();
 8000d22:	f000 f987 	bl	8001034 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  // UART 초기화 (printf 출력용)
  printf("\r\n\r\n===== 시스템 시작 =====\r\n");
 8000d26:	4874      	ldr	r0, [pc, #464]	@ (8000ef8 <main+0x1f8>)
 8000d28:	f003 ffb8 	bl	8004c9c <puts>
  HAL_Delay(1000); // 시스템 안정화를 위한 지연
 8000d2c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d30:	f000 fe50 	bl	80019d4 <HAL_Delay>
//  Set_Alarm_Time(0, 19, 10);  // 첫 번째 알람
//  Set_Alarm_Time(1, 19, 11);  // 두 번째 알람
//  Set_Alarm_Time(2, 19, 00);  // 세 번째 알람

  // 서버 명령 콜백 함수 등록
  register_server_command_callback(handle_esp_event);
 8000d34:	4871      	ldr	r0, [pc, #452]	@ (8000efc <main+0x1fc>)
 8000d36:	f7ff fc23 	bl	8000580 <register_server_command_callback>
  printf("서버 명령 핸들러 등록 완료\r\n");
 8000d3a:	4871      	ldr	r0, [pc, #452]	@ (8000f00 <main+0x200>)
 8000d3c:	f003 ffae 	bl	8004c9c <puts>

  // 초기화 변수 설정
  last_conn_check_time = HAL_GetTick();
 8000d40:	f000 fe3c 	bl	80019bc <HAL_GetTick>
 8000d44:	4603      	mov	r3, r0
 8000d46:	4a6f      	ldr	r2, [pc, #444]	@ (8000f04 <main+0x204>)
 8000d48:	6013      	str	r3, [r2, #0]
  last_attempt_time = 0;
 8000d4a:	4b6f      	ldr	r3, [pc, #444]	@ (8000f08 <main+0x208>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
  current_alarm_state = ALARM_STATE_IDLE;
 8000d50:	4b6e      	ldr	r3, [pc, #440]	@ (8000f0c <main+0x20c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	701a      	strb	r2, [r3, #0]

  printf("알람 시스템 초기화 완료 (총 %d개 알람 설정됨)\r\n", MAX_ALARM_COUNT);
 8000d56:	2103      	movs	r1, #3
 8000d58:	486d      	ldr	r0, [pc, #436]	@ (8000f10 <main+0x210>)
 8000d5a:	f003 ff37 	bl	8004bcc <iprintf>

  // 서버 연결 시도
  printf("시스템 초기화 완료, 서버 연결 준비 중...\r\n");
 8000d5e:	486d      	ldr	r0, [pc, #436]	@ (8000f14 <main+0x214>)
 8000d60:	f003 ff9c 	bl	8004c9c <puts>
  HAL_Delay(2000);
 8000d64:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000d68:	f000 fe34 	bl	80019d4 <HAL_Delay>

  printf("메인 루프 시작\r\n");
 8000d6c:	486a      	ldr	r0, [pc, #424]	@ (8000f18 <main+0x218>)
 8000d6e:	f003 ff95 	bl	8004c9c <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // 현재 시간 가져오기
    uint32_t current_time = HAL_GetTick();
 8000d72:	f000 fe23 	bl	80019bc <HAL_GetTick>
 8000d76:	67b8      	str	r0, [r7, #120]	@ 0x78

    // 1초마다 현재 시간 요청
    if (current_time - last_time_print >= 1000) {
 8000d78:	4b68      	ldr	r3, [pc, #416]	@ (8000f1c <main+0x21c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000d84:	d379      	bcc.n	8000e7a <main+0x17a>
      if (server_connected) {
 8000d86:	4b66      	ldr	r3, [pc, #408]	@ (8000f20 <main+0x220>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d072      	beq.n	8000e74 <main+0x174>
        // 시간 요청 문자열 전송
        char time_request[100];
        sprintf(time_request, "[USR_SQL]GET@TIME");
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	4964      	ldr	r1, [pc, #400]	@ (8000f24 <main+0x224>)
 8000d92:	4618      	mov	r0, r3
 8000d94:	f003 ffbe 	bl	8004d14 <siprintf>
        send_message_to_server(time_request);
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff fd78 	bl	8000890 <send_message_to_server>
        //printf("🕒 서버에 시간 요청 전송\r\n");

        // 내부 시간 기반 알람 체크 (서버로부터 시간을 받기 전에 임시로 사용)
        if (1) {
          // 시스템 시간을 초 단위로 변환
          uint32_t sys_seconds = current_time / 1000;
 8000da0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000da2:	4a61      	ldr	r2, [pc, #388]	@ (8000f28 <main+0x228>)
 8000da4:	fba2 2303 	umull	r2, r3, r2, r3
 8000da8:	099b      	lsrs	r3, r3, #6
 8000daa:	677b      	str	r3, [r7, #116]	@ 0x74
          uint32_t sys_hours = (sys_seconds / 3600) % 24;
 8000dac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000dae:	4a5f      	ldr	r2, [pc, #380]	@ (8000f2c <main+0x22c>)
 8000db0:	fba2 2303 	umull	r2, r3, r2, r3
 8000db4:	0ada      	lsrs	r2, r3, #11
 8000db6:	4b5e      	ldr	r3, [pc, #376]	@ (8000f30 <main+0x230>)
 8000db8:	fba3 1302 	umull	r1, r3, r3, r2
 8000dbc:	0919      	lsrs	r1, r3, #4
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	440b      	add	r3, r1
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	1ad3      	subs	r3, r2, r3
 8000dc8:	673b      	str	r3, [r7, #112]	@ 0x70
          uint32_t sys_minutes = (sys_seconds / 60) % 60;
 8000dca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000dcc:	4a59      	ldr	r2, [pc, #356]	@ (8000f34 <main+0x234>)
 8000dce:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd2:	095a      	lsrs	r2, r3, #5
 8000dd4:	4b57      	ldr	r3, [pc, #348]	@ (8000f34 <main+0x234>)
 8000dd6:	fba3 1302 	umull	r1, r3, r3, r2
 8000dda:	0959      	lsrs	r1, r3, #5
 8000ddc:	460b      	mov	r3, r1
 8000dde:	011b      	lsls	r3, r3, #4
 8000de0:	1a5b      	subs	r3, r3, r1
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	66fb      	str	r3, [r7, #108]	@ 0x6c
          uint32_t sys_seconds_only = sys_seconds % 60;
 8000de8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000dea:	4b52      	ldr	r3, [pc, #328]	@ (8000f34 <main+0x234>)
 8000dec:	fba3 1302 	umull	r1, r3, r3, r2
 8000df0:	0959      	lsrs	r1, r3, #5
 8000df2:	460b      	mov	r3, r1
 8000df4:	011b      	lsls	r3, r3, #4
 8000df6:	1a5b      	subs	r3, r3, r1
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	66bb      	str	r3, [r7, #104]	@ 0x68

          // 알람 배열을 순회하며 현재 시간과 일치하는 알람 찾기
          for (int i = 0; i < MAX_ALARM_COUNT; i++) {
 8000dfe:	2300      	movs	r3, #0
 8000e00:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000e02:	e034      	b.n	8000e6e <main+0x16e>
            if (alarm_times[i].active &&
 8000e04:	4a4c      	ldr	r2, [pc, #304]	@ (8000f38 <main+0x238>)
 8000e06:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000e08:	011b      	lsls	r3, r3, #4
 8000e0a:	4413      	add	r3, r2
 8000e0c:	330c      	adds	r3, #12
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d029      	beq.n	8000e68 <main+0x168>
                sys_hours == alarm_times[i].hour &&
 8000e14:	4a48      	ldr	r2, [pc, #288]	@ (8000f38 <main+0x238>)
 8000e16:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000e18:	011b      	lsls	r3, r3, #4
 8000e1a:	4413      	add	r3, r2
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
            if (alarm_times[i].active &&
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d121      	bne.n	8000e68 <main+0x168>
                sys_minutes == alarm_times[i].minute &&
 8000e24:	4a44      	ldr	r2, [pc, #272]	@ (8000f38 <main+0x238>)
 8000e26:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000e28:	011b      	lsls	r3, r3, #4
 8000e2a:	4413      	add	r3, r2
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
                sys_hours == alarm_times[i].hour &&
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d118      	bne.n	8000e68 <main+0x168>
                sys_minutes == alarm_times[i].minute &&
 8000e36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d815      	bhi.n	8000e68 <main+0x168>
                sys_seconds_only < 3) { // 초는 3초 이내 허용 (중복 알람 방지)

              printf("알람 시간 일치! 알람 %d번 시작 (내부시간: %02lu:%02lu:%02lu)\r\n",
 8000e3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000e3e:	9300      	str	r3, [sp, #0]
 8000e40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000e42:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000e44:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000e46:	483d      	ldr	r0, [pc, #244]	@ (8000f3c <main+0x23c>)
 8000e48:	f003 fec0 	bl	8004bcc <iprintf>
                     i, sys_hours, sys_minutes, sys_seconds_only);

              // 현재 알람 인덱스 설정하고 부저 울림
              current_alarm_index = i;
 8000e4c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000e4e:	b2da      	uxtb	r2, r3
 8000e50:	4b3b      	ldr	r3, [pc, #236]	@ (8000f40 <main+0x240>)
 8000e52:	701a      	strb	r2, [r3, #0]
              Buzzer_Control(true);
 8000e54:	2001      	movs	r0, #1
 8000e56:	f7ff fd3d 	bl	80008d4 <Buzzer_Control>
              alarm_active = true;
 8000e5a:	4b3a      	ldr	r3, [pc, #232]	@ (8000f44 <main+0x244>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	701a      	strb	r2, [r3, #0]
              current_alarm_state = ALARM_STATE_ACTIVE;
 8000e60:	4b2a      	ldr	r3, [pc, #168]	@ (8000f0c <main+0x20c>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	701a      	strb	r2, [r3, #0]

              break; // 한 번에 하나의 알람만 처리
 8000e66:	e005      	b.n	8000e74 <main+0x174>
          for (int i = 0; i < MAX_ALARM_COUNT; i++) {
 8000e68:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000e6e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	ddc7      	ble.n	8000e04 <main+0x104>
            }
          }
        }
      }
      last_time_print = current_time;
 8000e74:	4a29      	ldr	r2, [pc, #164]	@ (8000f1c <main+0x21c>)
 8000e76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000e78:	6013      	str	r3, [r2, #0]
    }

    poll_uart6_input();
 8000e7a:	f7ff fccd 	bl	8000818 <poll_uart6_input>

    // 알람 상태가 활성화되어 있을 때 부저 상태 관리
    if (current_alarm_state == ALARM_STATE_ACTIVE) {
 8000e7e:	4b23      	ldr	r3, [pc, #140]	@ (8000f0c <main+0x20c>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d129      	bne.n	8000eda <main+0x1da>
      // 상태 메시지를 한 번만 출력
      static bool status_printed = false;
      if (!status_printed) {
 8000e86:	4b30      	ldr	r3, [pc, #192]	@ (8000f48 <main+0x248>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	f083 0301 	eor.w	r3, r3, #1
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d005      	beq.n	8000ea0 <main+0x1a0>
        printf("알람 활성화 상태\r\n");
 8000e94:	482d      	ldr	r0, [pc, #180]	@ (8000f4c <main+0x24c>)
 8000e96:	f003 ff01 	bl	8004c9c <puts>
        status_printed = true;
 8000e9a:	4b2b      	ldr	r3, [pc, #172]	@ (8000f48 <main+0x248>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	701a      	strb	r2, [r3, #0]
      }

      // 알람이 처음 활성화될 때 시작 시간 기록 (디버깅용으로 유지)
      static uint32_t alarm_start_time = 0;
      if (alarm_active && alarm_start_time == 0) {
 8000ea0:	4b28      	ldr	r3, [pc, #160]	@ (8000f44 <main+0x244>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d00c      	beq.n	8000ec2 <main+0x1c2>
 8000ea8:	4b29      	ldr	r3, [pc, #164]	@ (8000f50 <main+0x250>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d108      	bne.n	8000ec2 <main+0x1c2>
        alarm_start_time = current_time;
 8000eb0:	4a27      	ldr	r2, [pc, #156]	@ (8000f50 <main+0x250>)
 8000eb2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000eb4:	6013      	str	r3, [r2, #0]
        printf("알람 시작 시간: %lu\r\n", alarm_start_time);
 8000eb6:	4b26      	ldr	r3, [pc, #152]	@ (8000f50 <main+0x250>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4825      	ldr	r0, [pc, #148]	@ (8000f54 <main+0x254>)
 8000ebe:	f003 fe85 	bl	8004bcc <iprintf>
      }

        // 알람 상태 초기화
        alarm_active = false;
 8000ec2:	4b20      	ldr	r3, [pc, #128]	@ (8000f44 <main+0x244>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	701a      	strb	r2, [r3, #0]
        current_alarm_state = ALARM_STATE_IDLE;
 8000ec8:	4b10      	ldr	r3, [pc, #64]	@ (8000f0c <main+0x20c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	701a      	strb	r2, [r3, #0]
        alarm_start_time = 0; // 다음 알람을 위해 초기화
 8000ece:	4b20      	ldr	r3, [pc, #128]	@ (8000f50 <main+0x250>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
        status_printed = false;
 8000ed4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f48 <main+0x248>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]

    }

    // 오류 임계값 초과 시 리셋
    if (connection_errors >= 5) {
 8000eda:	4b1f      	ldr	r3, [pc, #124]	@ (8000f58 <main+0x258>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b04      	cmp	r3, #4
 8000ee0:	f67f af47 	bls.w	8000d72 <main+0x72>
      printf("연결 오류 임계값 초과, ESP 모듈 리셋\r\n");
 8000ee4:	481d      	ldr	r0, [pc, #116]	@ (8000f5c <main+0x25c>)
 8000ee6:	f003 fed9 	bl	8004c9c <puts>
      HAL_Delay(1000);
 8000eea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000eee:	f000 fd71 	bl	80019d4 <HAL_Delay>
      Reset_Connection();
 8000ef2:	f7ff feed 	bl	8000cd0 <Reset_Connection>
  {
 8000ef6:	e73c      	b.n	8000d72 <main+0x72>
 8000ef8:	08007360 	.word	0x08007360
 8000efc:	080009e9 	.word	0x080009e9
 8000f00:	08007384 	.word	0x08007384
 8000f04:	2000067c 	.word	0x2000067c
 8000f08:	20000678 	.word	0x20000678
 8000f0c:	2000066c 	.word	0x2000066c
 8000f10:	080073ac 	.word	0x080073ac
 8000f14:	080073f0 	.word	0x080073f0
 8000f18:	0800742c 	.word	0x0800742c
 8000f1c:	20000670 	.word	0x20000670
 8000f20:	20000000 	.word	0x20000000
 8000f24:	08007444 	.word	0x08007444
 8000f28:	10624dd3 	.word	0x10624dd3
 8000f2c:	91a2b3c5 	.word	0x91a2b3c5
 8000f30:	aaaaaaab 	.word	0xaaaaaaab
 8000f34:	88888889 	.word	0x88888889
 8000f38:	20000004 	.word	0x20000004
 8000f3c:	08007458 	.word	0x08007458
 8000f40:	2000066f 	.word	0x2000066f
 8000f44:	2000066e 	.word	0x2000066e
 8000f48:	200006e9 	.word	0x200006e9
 8000f4c:	080074a8 	.word	0x080074a8
 8000f50:	200006ec 	.word	0x200006ec
 8000f54:	080074c4 	.word	0x080074c4
 8000f58:	20000680 	.word	0x20000680
 8000f5c:	080074e0 	.word	0x080074e0

08000f60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b094      	sub	sp, #80	@ 0x50
 8000f64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f66:	f107 0320 	add.w	r3, r7, #32
 8000f6a:	2230      	movs	r2, #48	@ 0x30
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f003 fff4 	bl	8004f5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f74:	f107 030c 	add.w	r3, r7, #12
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f84:	2300      	movs	r3, #0
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	4b28      	ldr	r3, [pc, #160]	@ (800102c <SystemClock_Config+0xcc>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8c:	4a27      	ldr	r2, [pc, #156]	@ (800102c <SystemClock_Config+0xcc>)
 8000f8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f92:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f94:	4b25      	ldr	r3, [pc, #148]	@ (800102c <SystemClock_Config+0xcc>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	4b22      	ldr	r3, [pc, #136]	@ (8001030 <SystemClock_Config+0xd0>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a21      	ldr	r2, [pc, #132]	@ (8001030 <SystemClock_Config+0xd0>)
 8000faa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fae:	6013      	str	r3, [r2, #0]
 8000fb0:	4b1f      	ldr	r3, [pc, #124]	@ (8001030 <SystemClock_Config+0xd0>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fc0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fc4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fd0:	2308      	movs	r3, #8
 8000fd2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fd4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000fd8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000fda:	2304      	movs	r3, #4
 8000fdc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fde:	2304      	movs	r3, #4
 8000fe0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe2:	f107 0320 	add.w	r3, r7, #32
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f001 fc10 	bl	800280c <HAL_RCC_OscConfig>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000ff2:	f000 f9d1 	bl	8001398 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff6:	230f      	movs	r3, #15
 8000ff8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001002:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001006:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001008:	2300      	movs	r3, #0
 800100a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	2102      	movs	r1, #2
 8001012:	4618      	mov	r0, r3
 8001014:	f001 fe72 	bl	8002cfc <HAL_RCC_ClockConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800101e:	f000 f9bb 	bl	8001398 <Error_Handler>
  }
}
 8001022:	bf00      	nop
 8001024:	3750      	adds	r7, #80	@ 0x50
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40023800 	.word	0x40023800
 8001030:	40007000 	.word	0x40007000

08001034 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800103a:	463b      	mov	r3, r7
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001046:	4b21      	ldr	r3, [pc, #132]	@ (80010cc <MX_ADC1_Init+0x98>)
 8001048:	4a21      	ldr	r2, [pc, #132]	@ (80010d0 <MX_ADC1_Init+0x9c>)
 800104a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800104c:	4b1f      	ldr	r3, [pc, #124]	@ (80010cc <MX_ADC1_Init+0x98>)
 800104e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001052:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001054:	4b1d      	ldr	r3, [pc, #116]	@ (80010cc <MX_ADC1_Init+0x98>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800105a:	4b1c      	ldr	r3, [pc, #112]	@ (80010cc <MX_ADC1_Init+0x98>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001060:	4b1a      	ldr	r3, [pc, #104]	@ (80010cc <MX_ADC1_Init+0x98>)
 8001062:	2200      	movs	r2, #0
 8001064:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001066:	4b19      	ldr	r3, [pc, #100]	@ (80010cc <MX_ADC1_Init+0x98>)
 8001068:	2200      	movs	r2, #0
 800106a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800106e:	4b17      	ldr	r3, [pc, #92]	@ (80010cc <MX_ADC1_Init+0x98>)
 8001070:	2200      	movs	r2, #0
 8001072:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001074:	4b15      	ldr	r3, [pc, #84]	@ (80010cc <MX_ADC1_Init+0x98>)
 8001076:	4a17      	ldr	r2, [pc, #92]	@ (80010d4 <MX_ADC1_Init+0xa0>)
 8001078:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800107a:	4b14      	ldr	r3, [pc, #80]	@ (80010cc <MX_ADC1_Init+0x98>)
 800107c:	2200      	movs	r2, #0
 800107e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001080:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <MX_ADC1_Init+0x98>)
 8001082:	2201      	movs	r2, #1
 8001084:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001086:	4b11      	ldr	r3, [pc, #68]	@ (80010cc <MX_ADC1_Init+0x98>)
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800108e:	4b0f      	ldr	r3, [pc, #60]	@ (80010cc <MX_ADC1_Init+0x98>)
 8001090:	2201      	movs	r2, #1
 8001092:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001094:	480d      	ldr	r0, [pc, #52]	@ (80010cc <MX_ADC1_Init+0x98>)
 8001096:	f000 fcc1 	bl	8001a1c <HAL_ADC_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010a0:	f000 f97a 	bl	8001398 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80010a4:	2305      	movs	r3, #5
 80010a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010a8:	2301      	movs	r3, #1
 80010aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b0:	463b      	mov	r3, r7
 80010b2:	4619      	mov	r1, r3
 80010b4:	4805      	ldr	r0, [pc, #20]	@ (80010cc <MX_ADC1_Init+0x98>)
 80010b6:	f000 fcf5 	bl	8001aa4 <HAL_ADC_ConfigChannel>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010c0:	f000 f96a 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010c4:	bf00      	nop
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	200004f8 	.word	0x200004f8
 80010d0:	40012000 	.word	0x40012000
 80010d4:	0f000001 	.word	0x0f000001

080010d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010dc:	4b13      	ldr	r3, [pc, #76]	@ (800112c <MX_I2C1_Init+0x54>)
 80010de:	4a14      	ldr	r2, [pc, #80]	@ (8001130 <MX_I2C1_Init+0x58>)
 80010e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 80010e2:	4b12      	ldr	r3, [pc, #72]	@ (800112c <MX_I2C1_Init+0x54>)
 80010e4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80010e8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010ea:	4b10      	ldr	r3, [pc, #64]	@ (800112c <MX_I2C1_Init+0x54>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010f0:	4b0e      	ldr	r3, [pc, #56]	@ (800112c <MX_I2C1_Init+0x54>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010f6:	4b0d      	ldr	r3, [pc, #52]	@ (800112c <MX_I2C1_Init+0x54>)
 80010f8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010fe:	4b0b      	ldr	r3, [pc, #44]	@ (800112c <MX_I2C1_Init+0x54>)
 8001100:	2200      	movs	r2, #0
 8001102:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001104:	4b09      	ldr	r3, [pc, #36]	@ (800112c <MX_I2C1_Init+0x54>)
 8001106:	2200      	movs	r2, #0
 8001108:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800110a:	4b08      	ldr	r3, [pc, #32]	@ (800112c <MX_I2C1_Init+0x54>)
 800110c:	2200      	movs	r2, #0
 800110e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <MX_I2C1_Init+0x54>)
 8001112:	2200      	movs	r2, #0
 8001114:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001116:	4805      	ldr	r0, [pc, #20]	@ (800112c <MX_I2C1_Init+0x54>)
 8001118:	f001 fa34 	bl	8002584 <HAL_I2C_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001122:	f000 f939 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000540 	.word	0x20000540
 8001130:	40005400 	.word	0x40005400

08001134 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	@ 0x28
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800113a:	f107 0320 	add.w	r3, r7, #32
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001144:	1d3b      	adds	r3, r7, #4
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
 8001150:	611a      	str	r2, [r3, #16]
 8001152:	615a      	str	r2, [r3, #20]
 8001154:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001156:	4b22      	ldr	r3, [pc, #136]	@ (80011e0 <MX_TIM4_Init+0xac>)
 8001158:	4a22      	ldr	r2, [pc, #136]	@ (80011e4 <MX_TIM4_Init+0xb0>)
 800115a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 800115c:	4b20      	ldr	r3, [pc, #128]	@ (80011e0 <MX_TIM4_Init+0xac>)
 800115e:	2253      	movs	r2, #83	@ 0x53
 8001160:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001162:	4b1f      	ldr	r3, [pc, #124]	@ (80011e0 <MX_TIM4_Init+0xac>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 8001168:	4b1d      	ldr	r3, [pc, #116]	@ (80011e0 <MX_TIM4_Init+0xac>)
 800116a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800116e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001170:	4b1b      	ldr	r3, [pc, #108]	@ (80011e0 <MX_TIM4_Init+0xac>)
 8001172:	2200      	movs	r2, #0
 8001174:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001176:	4b1a      	ldr	r3, [pc, #104]	@ (80011e0 <MX_TIM4_Init+0xac>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800117c:	4818      	ldr	r0, [pc, #96]	@ (80011e0 <MX_TIM4_Init+0xac>)
 800117e:	f001 ffdd 	bl	800313c <HAL_TIM_PWM_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001188:	f000 f906 	bl	8001398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800118c:	2300      	movs	r3, #0
 800118e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001190:	2300      	movs	r3, #0
 8001192:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001194:	f107 0320 	add.w	r3, r7, #32
 8001198:	4619      	mov	r1, r3
 800119a:	4811      	ldr	r0, [pc, #68]	@ (80011e0 <MX_TIM4_Init+0xac>)
 800119c:	f002 faf8 	bl	8003790 <HAL_TIMEx_MasterConfigSynchronization>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80011a6:	f000 f8f7 	bl	8001398 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011aa:	2360      	movs	r3, #96	@ 0x60
 80011ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	2204      	movs	r2, #4
 80011be:	4619      	mov	r1, r3
 80011c0:	4807      	ldr	r0, [pc, #28]	@ (80011e0 <MX_TIM4_Init+0xac>)
 80011c2:	f002 f80b 	bl	80031dc <HAL_TIM_PWM_ConfigChannel>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80011cc:	f000 f8e4 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80011d0:	4803      	ldr	r0, [pc, #12]	@ (80011e0 <MX_TIM4_Init+0xac>)
 80011d2:	f000 f9bd 	bl	8001550 <HAL_TIM_MspPostInit>

}
 80011d6:	bf00      	nop
 80011d8:	3728      	adds	r7, #40	@ 0x28
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000594 	.word	0x20000594
 80011e4:	40000800 	.word	0x40000800

080011e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011ec:	4b11      	ldr	r3, [pc, #68]	@ (8001234 <MX_USART2_UART_Init+0x4c>)
 80011ee:	4a12      	ldr	r2, [pc, #72]	@ (8001238 <MX_USART2_UART_Init+0x50>)
 80011f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011f2:	4b10      	ldr	r3, [pc, #64]	@ (8001234 <MX_USART2_UART_Init+0x4c>)
 80011f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001234 <MX_USART2_UART_Init+0x4c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001200:	4b0c      	ldr	r3, [pc, #48]	@ (8001234 <MX_USART2_UART_Init+0x4c>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001206:	4b0b      	ldr	r3, [pc, #44]	@ (8001234 <MX_USART2_UART_Init+0x4c>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800120c:	4b09      	ldr	r3, [pc, #36]	@ (8001234 <MX_USART2_UART_Init+0x4c>)
 800120e:	220c      	movs	r2, #12
 8001210:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001212:	4b08      	ldr	r3, [pc, #32]	@ (8001234 <MX_USART2_UART_Init+0x4c>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001218:	4b06      	ldr	r3, [pc, #24]	@ (8001234 <MX_USART2_UART_Init+0x4c>)
 800121a:	2200      	movs	r2, #0
 800121c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800121e:	4805      	ldr	r0, [pc, #20]	@ (8001234 <MX_USART2_UART_Init+0x4c>)
 8001220:	f002 fb24 	bl	800386c <HAL_UART_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800122a:	f000 f8b5 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	200005dc 	.word	0x200005dc
 8001238:	40004400 	.word	0x40004400

0800123c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001240:	4b11      	ldr	r3, [pc, #68]	@ (8001288 <MX_USART6_UART_Init+0x4c>)
 8001242:	4a12      	ldr	r2, [pc, #72]	@ (800128c <MX_USART6_UART_Init+0x50>)
 8001244:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 8001246:	4b10      	ldr	r3, [pc, #64]	@ (8001288 <MX_USART6_UART_Init+0x4c>)
 8001248:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800124c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800124e:	4b0e      	ldr	r3, [pc, #56]	@ (8001288 <MX_USART6_UART_Init+0x4c>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001254:	4b0c      	ldr	r3, [pc, #48]	@ (8001288 <MX_USART6_UART_Init+0x4c>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800125a:	4b0b      	ldr	r3, [pc, #44]	@ (8001288 <MX_USART6_UART_Init+0x4c>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001260:	4b09      	ldr	r3, [pc, #36]	@ (8001288 <MX_USART6_UART_Init+0x4c>)
 8001262:	220c      	movs	r2, #12
 8001264:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001266:	4b08      	ldr	r3, [pc, #32]	@ (8001288 <MX_USART6_UART_Init+0x4c>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800126c:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <MX_USART6_UART_Init+0x4c>)
 800126e:	2200      	movs	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001272:	4805      	ldr	r0, [pc, #20]	@ (8001288 <MX_USART6_UART_Init+0x4c>)
 8001274:	f002 fafa 	bl	800386c <HAL_UART_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800127e:	f000 f88b 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000624 	.word	0x20000624
 800128c:	40011400 	.word	0x40011400

08001290 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	@ 0x28
 8001294:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
 80012a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	4b38      	ldr	r3, [pc, #224]	@ (800138c <MX_GPIO_Init+0xfc>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	4a37      	ldr	r2, [pc, #220]	@ (800138c <MX_GPIO_Init+0xfc>)
 80012b0:	f043 0304 	orr.w	r3, r3, #4
 80012b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b6:	4b35      	ldr	r3, [pc, #212]	@ (800138c <MX_GPIO_Init+0xfc>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	f003 0304 	and.w	r3, r3, #4
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	4b31      	ldr	r3, [pc, #196]	@ (800138c <MX_GPIO_Init+0xfc>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	4a30      	ldr	r2, [pc, #192]	@ (800138c <MX_GPIO_Init+0xfc>)
 80012cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d2:	4b2e      	ldr	r3, [pc, #184]	@ (800138c <MX_GPIO_Init+0xfc>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	4b2a      	ldr	r3, [pc, #168]	@ (800138c <MX_GPIO_Init+0xfc>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	4a29      	ldr	r2, [pc, #164]	@ (800138c <MX_GPIO_Init+0xfc>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ee:	4b27      	ldr	r3, [pc, #156]	@ (800138c <MX_GPIO_Init+0xfc>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	4b23      	ldr	r3, [pc, #140]	@ (800138c <MX_GPIO_Init+0xfc>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	4a22      	ldr	r2, [pc, #136]	@ (800138c <MX_GPIO_Init+0xfc>)
 8001304:	f043 0302 	orr.w	r3, r3, #2
 8001308:	6313      	str	r3, [r2, #48]	@ 0x30
 800130a:	4b20      	ldr	r3, [pc, #128]	@ (800138c <MX_GPIO_Init+0xfc>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001316:	2200      	movs	r2, #0
 8001318:	2140      	movs	r1, #64	@ 0x40
 800131a:	481d      	ldr	r0, [pc, #116]	@ (8001390 <MX_GPIO_Init+0x100>)
 800131c:	f001 f918 	bl	8002550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DHT11_Pin|buzzer_Pin, GPIO_PIN_RESET);
 8001320:	2200      	movs	r2, #0
 8001322:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8001326:	481b      	ldr	r0, [pc, #108]	@ (8001394 <MX_GPIO_Init+0x104>)
 8001328:	f001 f912 	bl	8002550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800132c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001330:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001332:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001336:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	4619      	mov	r1, r3
 8001342:	4814      	ldr	r0, [pc, #80]	@ (8001394 <MX_GPIO_Init+0x104>)
 8001344:	f000 ff80 	bl	8002248 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001348:	2340      	movs	r3, #64	@ 0x40
 800134a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134c:	2301      	movs	r3, #1
 800134e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001354:	2300      	movs	r3, #0
 8001356:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	4619      	mov	r1, r3
 800135e:	480c      	ldr	r0, [pc, #48]	@ (8001390 <MX_GPIO_Init+0x100>)
 8001360:	f000 ff72 	bl	8002248 <HAL_GPIO_Init>

  /*Configure GPIO pins : DHT11_Pin buzzer_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin|buzzer_Pin;
 8001364:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001368:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136a:	2301      	movs	r3, #1
 800136c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2300      	movs	r3, #0
 8001374:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	4619      	mov	r1, r3
 800137c:	4805      	ldr	r0, [pc, #20]	@ (8001394 <MX_GPIO_Init+0x104>)
 800137e:	f000 ff63 	bl	8002248 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001382:	bf00      	nop
 8001384:	3728      	adds	r7, #40	@ 0x28
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800
 8001390:	40020000 	.word	0x40020000
 8001394:	40020800 	.word	0x40020800

08001398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800139c:	b672      	cpsid	i
}
 800139e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	  /* User can add his own implementation to report the HAL error return state */
	  __disable_irq();
	  while (1)
 80013a0:	bf00      	nop
 80013a2:	e7fd      	b.n	80013a0 <Error_Handler+0x8>

080013a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	4b10      	ldr	r3, [pc, #64]	@ (80013f0 <HAL_MspInit+0x4c>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b2:	4a0f      	ldr	r2, [pc, #60]	@ (80013f0 <HAL_MspInit+0x4c>)
 80013b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ba:	4b0d      	ldr	r3, [pc, #52]	@ (80013f0 <HAL_MspInit+0x4c>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	603b      	str	r3, [r7, #0]
 80013ca:	4b09      	ldr	r3, [pc, #36]	@ (80013f0 <HAL_MspInit+0x4c>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ce:	4a08      	ldr	r2, [pc, #32]	@ (80013f0 <HAL_MspInit+0x4c>)
 80013d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013d6:	4b06      	ldr	r3, [pc, #24]	@ (80013f0 <HAL_MspInit+0x4c>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013de:	603b      	str	r3, [r7, #0]
 80013e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013e2:	2007      	movs	r0, #7
 80013e4:	f000 fe5c 	bl	80020a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40023800 	.word	0x40023800

080013f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08a      	sub	sp, #40	@ 0x28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a17      	ldr	r2, [pc, #92]	@ (8001470 <HAL_ADC_MspInit+0x7c>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d127      	bne.n	8001466 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	4b16      	ldr	r3, [pc, #88]	@ (8001474 <HAL_ADC_MspInit+0x80>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800141e:	4a15      	ldr	r2, [pc, #84]	@ (8001474 <HAL_ADC_MspInit+0x80>)
 8001420:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001424:	6453      	str	r3, [r2, #68]	@ 0x44
 8001426:	4b13      	ldr	r3, [pc, #76]	@ (8001474 <HAL_ADC_MspInit+0x80>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	4b0f      	ldr	r3, [pc, #60]	@ (8001474 <HAL_ADC_MspInit+0x80>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	4a0e      	ldr	r2, [pc, #56]	@ (8001474 <HAL_ADC_MspInit+0x80>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6313      	str	r3, [r2, #48]	@ 0x30
 8001442:	4b0c      	ldr	r3, [pc, #48]	@ (8001474 <HAL_ADC_MspInit+0x80>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = WATER_Pin|CDS_Pin;
 800144e:	2330      	movs	r3, #48	@ 0x30
 8001450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001452:	2303      	movs	r3, #3
 8001454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4619      	mov	r1, r3
 8001460:	4805      	ldr	r0, [pc, #20]	@ (8001478 <HAL_ADC_MspInit+0x84>)
 8001462:	f000 fef1 	bl	8002248 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001466:	bf00      	nop
 8001468:	3728      	adds	r7, #40	@ 0x28
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40012000 	.word	0x40012000
 8001474:	40023800 	.word	0x40023800
 8001478:	40020000 	.word	0x40020000

0800147c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08a      	sub	sp, #40	@ 0x28
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a19      	ldr	r2, [pc, #100]	@ (8001500 <HAL_I2C_MspInit+0x84>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d12c      	bne.n	80014f8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	4b18      	ldr	r3, [pc, #96]	@ (8001504 <HAL_I2C_MspInit+0x88>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	4a17      	ldr	r2, [pc, #92]	@ (8001504 <HAL_I2C_MspInit+0x88>)
 80014a8:	f043 0302 	orr.w	r3, r3, #2
 80014ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ae:	4b15      	ldr	r3, [pc, #84]	@ (8001504 <HAL_I2C_MspInit+0x88>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014ba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014c0:	2312      	movs	r3, #18
 80014c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c8:	2303      	movs	r3, #3
 80014ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014cc:	2304      	movs	r3, #4
 80014ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	4619      	mov	r1, r3
 80014d6:	480c      	ldr	r0, [pc, #48]	@ (8001508 <HAL_I2C_MspInit+0x8c>)
 80014d8:	f000 feb6 	bl	8002248 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	4b08      	ldr	r3, [pc, #32]	@ (8001504 <HAL_I2C_MspInit+0x88>)
 80014e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e4:	4a07      	ldr	r2, [pc, #28]	@ (8001504 <HAL_I2C_MspInit+0x88>)
 80014e6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ec:	4b05      	ldr	r3, [pc, #20]	@ (8001504 <HAL_I2C_MspInit+0x88>)
 80014ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80014f8:	bf00      	nop
 80014fa:	3728      	adds	r7, #40	@ 0x28
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40005400 	.word	0x40005400
 8001504:	40023800 	.word	0x40023800
 8001508:	40020400 	.word	0x40020400

0800150c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0b      	ldr	r2, [pc, #44]	@ (8001548 <HAL_TIM_PWM_MspInit+0x3c>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d10d      	bne.n	800153a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	4b0a      	ldr	r3, [pc, #40]	@ (800154c <HAL_TIM_PWM_MspInit+0x40>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001526:	4a09      	ldr	r2, [pc, #36]	@ (800154c <HAL_TIM_PWM_MspInit+0x40>)
 8001528:	f043 0304 	orr.w	r3, r3, #4
 800152c:	6413      	str	r3, [r2, #64]	@ 0x40
 800152e:	4b07      	ldr	r3, [pc, #28]	@ (800154c <HAL_TIM_PWM_MspInit+0x40>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001532:	f003 0304 	and.w	r3, r3, #4
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 800153a:	bf00      	nop
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	40000800 	.word	0x40000800
 800154c:	40023800 	.word	0x40023800

08001550 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b088      	sub	sp, #32
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 030c 	add.w	r3, r7, #12
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a12      	ldr	r2, [pc, #72]	@ (80015b8 <HAL_TIM_MspPostInit+0x68>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d11d      	bne.n	80015ae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	4b11      	ldr	r3, [pc, #68]	@ (80015bc <HAL_TIM_MspPostInit+0x6c>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	4a10      	ldr	r2, [pc, #64]	@ (80015bc <HAL_TIM_MspPostInit+0x6c>)
 800157c:	f043 0302 	orr.w	r3, r3, #2
 8001580:	6313      	str	r3, [r2, #48]	@ 0x30
 8001582:	4b0e      	ldr	r3, [pc, #56]	@ (80015bc <HAL_TIM_MspPostInit+0x6c>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800158e:	2380      	movs	r3, #128	@ 0x80
 8001590:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001592:	2302      	movs	r3, #2
 8001594:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159a:	2300      	movs	r3, #0
 800159c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800159e:	2302      	movs	r3, #2
 80015a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a2:	f107 030c 	add.w	r3, r7, #12
 80015a6:	4619      	mov	r1, r3
 80015a8:	4805      	ldr	r0, [pc, #20]	@ (80015c0 <HAL_TIM_MspPostInit+0x70>)
 80015aa:	f000 fe4d 	bl	8002248 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80015ae:	bf00      	nop
 80015b0:	3720      	adds	r7, #32
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40000800 	.word	0x40000800
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40020400 	.word	0x40020400

080015c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08c      	sub	sp, #48	@ 0x30
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 031c 	add.w	r3, r7, #28
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a3a      	ldr	r2, [pc, #232]	@ (80016cc <HAL_UART_MspInit+0x108>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d134      	bne.n	8001650 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	61bb      	str	r3, [r7, #24]
 80015ea:	4b39      	ldr	r3, [pc, #228]	@ (80016d0 <HAL_UART_MspInit+0x10c>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ee:	4a38      	ldr	r2, [pc, #224]	@ (80016d0 <HAL_UART_MspInit+0x10c>)
 80015f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015f6:	4b36      	ldr	r3, [pc, #216]	@ (80016d0 <HAL_UART_MspInit+0x10c>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015fe:	61bb      	str	r3, [r7, #24]
 8001600:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
 8001606:	4b32      	ldr	r3, [pc, #200]	@ (80016d0 <HAL_UART_MspInit+0x10c>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160a:	4a31      	ldr	r2, [pc, #196]	@ (80016d0 <HAL_UART_MspInit+0x10c>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6313      	str	r3, [r2, #48]	@ 0x30
 8001612:	4b2f      	ldr	r3, [pc, #188]	@ (80016d0 <HAL_UART_MspInit+0x10c>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	617b      	str	r3, [r7, #20]
 800161c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800161e:	230c      	movs	r3, #12
 8001620:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001622:	2302      	movs	r3, #2
 8001624:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162a:	2303      	movs	r3, #3
 800162c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800162e:	2307      	movs	r3, #7
 8001630:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001632:	f107 031c 	add.w	r3, r7, #28
 8001636:	4619      	mov	r1, r3
 8001638:	4826      	ldr	r0, [pc, #152]	@ (80016d4 <HAL_UART_MspInit+0x110>)
 800163a:	f000 fe05 	bl	8002248 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	2100      	movs	r1, #0
 8001642:	2026      	movs	r0, #38	@ 0x26
 8001644:	f000 fd37 	bl	80020b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001648:	2026      	movs	r0, #38	@ 0x26
 800164a:	f000 fd50 	bl	80020ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800164e:	e038      	b.n	80016c2 <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a20      	ldr	r2, [pc, #128]	@ (80016d8 <HAL_UART_MspInit+0x114>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d133      	bne.n	80016c2 <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	4b1c      	ldr	r3, [pc, #112]	@ (80016d0 <HAL_UART_MspInit+0x10c>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001662:	4a1b      	ldr	r2, [pc, #108]	@ (80016d0 <HAL_UART_MspInit+0x10c>)
 8001664:	f043 0320 	orr.w	r3, r3, #32
 8001668:	6453      	str	r3, [r2, #68]	@ 0x44
 800166a:	4b19      	ldr	r3, [pc, #100]	@ (80016d0 <HAL_UART_MspInit+0x10c>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166e:	f003 0320 	and.w	r3, r3, #32
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	4b15      	ldr	r3, [pc, #84]	@ (80016d0 <HAL_UART_MspInit+0x10c>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	4a14      	ldr	r2, [pc, #80]	@ (80016d0 <HAL_UART_MspInit+0x10c>)
 8001680:	f043 0304 	orr.w	r3, r3, #4
 8001684:	6313      	str	r3, [r2, #48]	@ 0x30
 8001686:	4b12      	ldr	r3, [pc, #72]	@ (80016d0 <HAL_UART_MspInit+0x10c>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168a:	f003 0304 	and.w	r3, r3, #4
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001692:	23c0      	movs	r3, #192	@ 0xc0
 8001694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169e:	2303      	movs	r3, #3
 80016a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80016a2:	2308      	movs	r3, #8
 80016a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a6:	f107 031c 	add.w	r3, r7, #28
 80016aa:	4619      	mov	r1, r3
 80016ac:	480b      	ldr	r0, [pc, #44]	@ (80016dc <HAL_UART_MspInit+0x118>)
 80016ae:	f000 fdcb 	bl	8002248 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2100      	movs	r1, #0
 80016b6:	2047      	movs	r0, #71	@ 0x47
 80016b8:	f000 fcfd 	bl	80020b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80016bc:	2047      	movs	r0, #71	@ 0x47
 80016be:	f000 fd16 	bl	80020ee <HAL_NVIC_EnableIRQ>
}
 80016c2:	bf00      	nop
 80016c4:	3730      	adds	r7, #48	@ 0x30
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40004400 	.word	0x40004400
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40020000 	.word	0x40020000
 80016d8:	40011400 	.word	0x40011400
 80016dc:	40020800 	.word	0x40020800

080016e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016e4:	bf00      	nop
 80016e6:	e7fd      	b.n	80016e4 <NMI_Handler+0x4>

080016e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <HardFault_Handler+0x4>

080016f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f4:	bf00      	nop
 80016f6:	e7fd      	b.n	80016f4 <MemManage_Handler+0x4>

080016f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016fc:	bf00      	nop
 80016fe:	e7fd      	b.n	80016fc <BusFault_Handler+0x4>

08001700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001704:	bf00      	nop
 8001706:	e7fd      	b.n	8001704 <UsageFault_Handler+0x4>

08001708 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001736:	f000 f92d 	bl	8001994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001744:	4802      	ldr	r0, [pc, #8]	@ (8001750 <USART2_IRQHandler+0x10>)
 8001746:	f002 fa29 	bl	8003b9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200005dc 	.word	0x200005dc

08001754 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001758:	4802      	ldr	r0, [pc, #8]	@ (8001764 <USART6_IRQHandler+0x10>)
 800175a:	f002 fa1f 	bl	8003b9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000624 	.word	0x20000624

08001768 <_read>:
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	e00a      	b.n	8001790 <_read+0x28>
 800177a:	f3af 8000 	nop.w
 800177e:	4601      	mov	r1, r0
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	1c5a      	adds	r2, r3, #1
 8001784:	60ba      	str	r2, [r7, #8]
 8001786:	b2ca      	uxtb	r2, r1
 8001788:	701a      	strb	r2, [r3, #0]
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	3301      	adds	r3, #1
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	697a      	ldr	r2, [r7, #20]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	429a      	cmp	r2, r3
 8001796:	dbf0      	blt.n	800177a <_read+0x12>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4618      	mov	r0, r3
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <_close>:
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295
 80017ae:	4618      	mov	r0, r3
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <_fstat>:
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	6039      	str	r1, [r7, #0]
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	2300      	movs	r3, #0
 80017ce:	4618      	mov	r0, r3
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <_isatty>:
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
 80017e2:	2301      	movs	r3, #1
 80017e4:	4618      	mov	r0, r3
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <_lseek>:
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
 80017fc:	2300      	movs	r3, #0
 80017fe:	4618      	mov	r0, r3
 8001800:	3714      	adds	r7, #20
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
	...

0800180c <_sbrk>:
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	4a14      	ldr	r2, [pc, #80]	@ (8001868 <_sbrk+0x5c>)
 8001816:	4b15      	ldr	r3, [pc, #84]	@ (800186c <_sbrk+0x60>)
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	617b      	str	r3, [r7, #20]
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	4b13      	ldr	r3, [pc, #76]	@ (8001870 <_sbrk+0x64>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d102      	bne.n	800182e <_sbrk+0x22>
 8001828:	4b11      	ldr	r3, [pc, #68]	@ (8001870 <_sbrk+0x64>)
 800182a:	4a12      	ldr	r2, [pc, #72]	@ (8001874 <_sbrk+0x68>)
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	4b10      	ldr	r3, [pc, #64]	@ (8001870 <_sbrk+0x64>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4413      	add	r3, r2
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	429a      	cmp	r2, r3
 800183a:	d207      	bcs.n	800184c <_sbrk+0x40>
 800183c:	f003 fc24 	bl	8005088 <__errno>
 8001840:	4603      	mov	r3, r0
 8001842:	220c      	movs	r2, #12
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	f04f 33ff 	mov.w	r3, #4294967295
 800184a:	e009      	b.n	8001860 <_sbrk+0x54>
 800184c:	4b08      	ldr	r3, [pc, #32]	@ (8001870 <_sbrk+0x64>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	4b07      	ldr	r3, [pc, #28]	@ (8001870 <_sbrk+0x64>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4413      	add	r3, r2
 800185a:	4a05      	ldr	r2, [pc, #20]	@ (8001870 <_sbrk+0x64>)
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4618      	mov	r0, r3
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20020000 	.word	0x20020000
 800186c:	00000400 	.word	0x00000400
 8001870:	200006f0 	.word	0x200006f0
 8001874:	20000848 	.word	0x20000848

08001878 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800187c:	4b06      	ldr	r3, [pc, #24]	@ (8001898 <SystemInit+0x20>)
 800187e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001882:	4a05      	ldr	r2, [pc, #20]	@ (8001898 <SystemInit+0x20>)
 8001884:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001888:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <Reset_Handler>:
 800189c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018d4 <LoopFillZerobss+0xe>
 80018a0:	f7ff ffea 	bl	8001878 <SystemInit>
 80018a4:	480c      	ldr	r0, [pc, #48]	@ (80018d8 <LoopFillZerobss+0x12>)
 80018a6:	490d      	ldr	r1, [pc, #52]	@ (80018dc <LoopFillZerobss+0x16>)
 80018a8:	4a0d      	ldr	r2, [pc, #52]	@ (80018e0 <LoopFillZerobss+0x1a>)
 80018aa:	2300      	movs	r3, #0
 80018ac:	e002      	b.n	80018b4 <LoopCopyDataInit>

080018ae <CopyDataInit>:
 80018ae:	58d4      	ldr	r4, [r2, r3]
 80018b0:	50c4      	str	r4, [r0, r3]
 80018b2:	3304      	adds	r3, #4

080018b4 <LoopCopyDataInit>:
 80018b4:	18c4      	adds	r4, r0, r3
 80018b6:	428c      	cmp	r4, r1
 80018b8:	d3f9      	bcc.n	80018ae <CopyDataInit>
 80018ba:	4a0a      	ldr	r2, [pc, #40]	@ (80018e4 <LoopFillZerobss+0x1e>)
 80018bc:	4c0a      	ldr	r4, [pc, #40]	@ (80018e8 <LoopFillZerobss+0x22>)
 80018be:	2300      	movs	r3, #0
 80018c0:	e001      	b.n	80018c6 <LoopFillZerobss>

080018c2 <FillZerobss>:
 80018c2:	6013      	str	r3, [r2, #0]
 80018c4:	3204      	adds	r2, #4

080018c6 <LoopFillZerobss>:
 80018c6:	42a2      	cmp	r2, r4
 80018c8:	d3fb      	bcc.n	80018c2 <FillZerobss>
 80018ca:	f003 fbe3 	bl	8005094 <__libc_init_array>
 80018ce:	f7ff fa17 	bl	8000d00 <main>
 80018d2:	4770      	bx	lr
 80018d4:	20020000 	.word	0x20020000
 80018d8:	20000000 	.word	0x20000000
 80018dc:	2000009c 	.word	0x2000009c
 80018e0:	08007698 	.word	0x08007698
 80018e4:	2000009c 	.word	0x2000009c
 80018e8:	20000844 	.word	0x20000844

080018ec <ADC_IRQHandler>:
 80018ec:	e7fe      	b.n	80018ec <ADC_IRQHandler>
	...

080018f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001930 <HAL_Init+0x40>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001930 <HAL_Init+0x40>)
 80018fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001900:	4b0b      	ldr	r3, [pc, #44]	@ (8001930 <HAL_Init+0x40>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a0a      	ldr	r2, [pc, #40]	@ (8001930 <HAL_Init+0x40>)
 8001906:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800190a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800190c:	4b08      	ldr	r3, [pc, #32]	@ (8001930 <HAL_Init+0x40>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a07      	ldr	r2, [pc, #28]	@ (8001930 <HAL_Init+0x40>)
 8001912:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001916:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001918:	2003      	movs	r0, #3
 800191a:	f000 fbc1 	bl	80020a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800191e:	2000      	movs	r0, #0
 8001920:	f000 f808 	bl	8001934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001924:	f7ff fd3e 	bl	80013a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40023c00 	.word	0x40023c00

08001934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800193c:	4b12      	ldr	r3, [pc, #72]	@ (8001988 <HAL_InitTick+0x54>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	4b12      	ldr	r3, [pc, #72]	@ (800198c <HAL_InitTick+0x58>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	4619      	mov	r1, r3
 8001946:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800194a:	fbb3 f3f1 	udiv	r3, r3, r1
 800194e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001952:	4618      	mov	r0, r3
 8001954:	f000 fbd9 	bl	800210a <HAL_SYSTICK_Config>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e00e      	b.n	8001980 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b0f      	cmp	r3, #15
 8001966:	d80a      	bhi.n	800197e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001968:	2200      	movs	r2, #0
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	f04f 30ff 	mov.w	r0, #4294967295
 8001970:	f000 fba1 	bl	80020b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001974:	4a06      	ldr	r2, [pc, #24]	@ (8001990 <HAL_InitTick+0x5c>)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800197a:	2300      	movs	r3, #0
 800197c:	e000      	b.n	8001980 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
}
 8001980:	4618      	mov	r0, r3
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000034 	.word	0x20000034
 800198c:	2000003c 	.word	0x2000003c
 8001990:	20000038 	.word	0x20000038

08001994 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001998:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <HAL_IncTick+0x20>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	461a      	mov	r2, r3
 800199e:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <HAL_IncTick+0x24>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4413      	add	r3, r2
 80019a4:	4a04      	ldr	r2, [pc, #16]	@ (80019b8 <HAL_IncTick+0x24>)
 80019a6:	6013      	str	r3, [r2, #0]
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	2000003c 	.word	0x2000003c
 80019b8:	200006f4 	.word	0x200006f4

080019bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return uwTick;
 80019c0:	4b03      	ldr	r3, [pc, #12]	@ (80019d0 <HAL_GetTick+0x14>)
 80019c2:	681b      	ldr	r3, [r3, #0]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	200006f4 	.word	0x200006f4

080019d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019dc:	f7ff ffee 	bl	80019bc <HAL_GetTick>
 80019e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ec:	d005      	beq.n	80019fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001a18 <HAL_Delay+0x44>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	461a      	mov	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4413      	add	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019fa:	bf00      	nop
 80019fc:	f7ff ffde 	bl	80019bc <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d8f7      	bhi.n	80019fc <HAL_Delay+0x28>
  {
  }
}
 8001a0c:	bf00      	nop
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	2000003c 	.word	0x2000003c

08001a1c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a24:	2300      	movs	r3, #0
 8001a26:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e033      	b.n	8001a9a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d109      	bne.n	8001a4e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff fcda 	bl	80013f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a52:	f003 0310 	and.w	r3, r3, #16
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d118      	bne.n	8001a8c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a62:	f023 0302 	bic.w	r3, r3, #2
 8001a66:	f043 0202 	orr.w	r2, r3, #2
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 f94a 	bl	8001d08 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7e:	f023 0303 	bic.w	r3, r3, #3
 8001a82:	f043 0201 	orr.w	r2, r3, #1
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a8a:	e001      	b.n	8001a90 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d101      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x1c>
 8001abc:	2302      	movs	r3, #2
 8001abe:	e113      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0x244>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2b09      	cmp	r3, #9
 8001ace:	d925      	bls.n	8001b1c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68d9      	ldr	r1, [r3, #12]
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	461a      	mov	r2, r3
 8001ade:	4613      	mov	r3, r2
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	4413      	add	r3, r2
 8001ae4:	3b1e      	subs	r3, #30
 8001ae6:	2207      	movs	r2, #7
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43da      	mvns	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	400a      	ands	r2, r1
 8001af4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68d9      	ldr	r1, [r3, #12]
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	4618      	mov	r0, r3
 8001b08:	4603      	mov	r3, r0
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	4403      	add	r3, r0
 8001b0e:	3b1e      	subs	r3, #30
 8001b10:	409a      	lsls	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	430a      	orrs	r2, r1
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	e022      	b.n	8001b62 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6919      	ldr	r1, [r3, #16]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	4413      	add	r3, r2
 8001b30:	2207      	movs	r2, #7
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43da      	mvns	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	400a      	ands	r2, r1
 8001b3e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6919      	ldr	r1, [r3, #16]
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	689a      	ldr	r2, [r3, #8]
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	4618      	mov	r0, r3
 8001b52:	4603      	mov	r3, r0
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	4403      	add	r3, r0
 8001b58:	409a      	lsls	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b06      	cmp	r3, #6
 8001b68:	d824      	bhi.n	8001bb4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	4613      	mov	r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	3b05      	subs	r3, #5
 8001b7c:	221f      	movs	r2, #31
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43da      	mvns	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	400a      	ands	r2, r1
 8001b8a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	4618      	mov	r0, r3
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	4413      	add	r3, r2
 8001ba4:	3b05      	subs	r3, #5
 8001ba6:	fa00 f203 	lsl.w	r2, r0, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001bb2:	e04c      	b.n	8001c4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b0c      	cmp	r3, #12
 8001bba:	d824      	bhi.n	8001c06 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	3b23      	subs	r3, #35	@ 0x23
 8001bce:	221f      	movs	r2, #31
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43da      	mvns	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	400a      	ands	r2, r1
 8001bdc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	4618      	mov	r0, r3
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	3b23      	subs	r3, #35	@ 0x23
 8001bf8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c04:	e023      	b.n	8001c4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	4613      	mov	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4413      	add	r3, r2
 8001c16:	3b41      	subs	r3, #65	@ 0x41
 8001c18:	221f      	movs	r2, #31
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43da      	mvns	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	400a      	ands	r2, r1
 8001c26:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	4618      	mov	r0, r3
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	3b41      	subs	r3, #65	@ 0x41
 8001c42:	fa00 f203 	lsl.w	r2, r0, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c4e:	4b29      	ldr	r3, [pc, #164]	@ (8001cf4 <HAL_ADC_ConfigChannel+0x250>)
 8001c50:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a28      	ldr	r2, [pc, #160]	@ (8001cf8 <HAL_ADC_ConfigChannel+0x254>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d10f      	bne.n	8001c7c <HAL_ADC_ConfigChannel+0x1d8>
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2b12      	cmp	r3, #18
 8001c62:	d10b      	bne.n	8001c7c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a1d      	ldr	r2, [pc, #116]	@ (8001cf8 <HAL_ADC_ConfigChannel+0x254>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d12b      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x23a>
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a1c      	ldr	r2, [pc, #112]	@ (8001cfc <HAL_ADC_ConfigChannel+0x258>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d003      	beq.n	8001c98 <HAL_ADC_ConfigChannel+0x1f4>
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2b11      	cmp	r3, #17
 8001c96:	d122      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a11      	ldr	r2, [pc, #68]	@ (8001cfc <HAL_ADC_ConfigChannel+0x258>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d111      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cba:	4b11      	ldr	r3, [pc, #68]	@ (8001d00 <HAL_ADC_ConfigChannel+0x25c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a11      	ldr	r2, [pc, #68]	@ (8001d04 <HAL_ADC_ConfigChannel+0x260>)
 8001cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc4:	0c9a      	lsrs	r2, r3, #18
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001cd0:	e002      	b.n	8001cd8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f9      	bne.n	8001cd2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	40012300 	.word	0x40012300
 8001cf8:	40012000 	.word	0x40012000
 8001cfc:	10000012 	.word	0x10000012
 8001d00:	20000034 	.word	0x20000034
 8001d04:	431bde83 	.word	0x431bde83

08001d08 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d10:	4b79      	ldr	r3, [pc, #484]	@ (8001ef8 <ADC_Init+0x1f0>)
 8001d12:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	431a      	orrs	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6859      	ldr	r1, [r3, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	021a      	lsls	r2, r3, #8
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001d60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6859      	ldr	r1, [r3, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689a      	ldr	r2, [r3, #8]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6899      	ldr	r1, [r3, #8]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68da      	ldr	r2, [r3, #12]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d9a:	4a58      	ldr	r2, [pc, #352]	@ (8001efc <ADC_Init+0x1f4>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d022      	beq.n	8001de6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001dae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6899      	ldr	r1, [r3, #8]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001dd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6899      	ldr	r1, [r3, #8]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	430a      	orrs	r2, r1
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	e00f      	b.n	8001e06 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001df4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e04:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 0202 	bic.w	r2, r2, #2
 8001e14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6899      	ldr	r1, [r3, #8]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	7e1b      	ldrb	r3, [r3, #24]
 8001e20:	005a      	lsls	r2, r3, #1
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d01b      	beq.n	8001e6c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e42:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	685a      	ldr	r2, [r3, #4]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001e52:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6859      	ldr	r1, [r3, #4]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	035a      	lsls	r2, r3, #13
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	e007      	b.n	8001e7c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	685a      	ldr	r2, [r3, #4]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e7a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001e8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	051a      	lsls	r2, r3, #20
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001eb0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6899      	ldr	r1, [r3, #8]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001ebe:	025a      	lsls	r2, r3, #9
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ed6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6899      	ldr	r1, [r3, #8]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	029a      	lsls	r2, r3, #10
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	609a      	str	r2, [r3, #8]
}
 8001eec:	bf00      	nop
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	40012300 	.word	0x40012300
 8001efc:	0f000001 	.word	0x0f000001

08001f00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f10:	4b0c      	ldr	r3, [pc, #48]	@ (8001f44 <__NVIC_SetPriorityGrouping+0x44>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f32:	4a04      	ldr	r2, [pc, #16]	@ (8001f44 <__NVIC_SetPriorityGrouping+0x44>)
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	60d3      	str	r3, [r2, #12]
}
 8001f38:	bf00      	nop
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f4c:	4b04      	ldr	r3, [pc, #16]	@ (8001f60 <__NVIC_GetPriorityGrouping+0x18>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	0a1b      	lsrs	r3, r3, #8
 8001f52:	f003 0307 	and.w	r3, r3, #7
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	db0b      	blt.n	8001f8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f76:	79fb      	ldrb	r3, [r7, #7]
 8001f78:	f003 021f 	and.w	r2, r3, #31
 8001f7c:	4907      	ldr	r1, [pc, #28]	@ (8001f9c <__NVIC_EnableIRQ+0x38>)
 8001f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f82:	095b      	lsrs	r3, r3, #5
 8001f84:	2001      	movs	r0, #1
 8001f86:	fa00 f202 	lsl.w	r2, r0, r2
 8001f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	e000e100 	.word	0xe000e100

08001fa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	6039      	str	r1, [r7, #0]
 8001faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	db0a      	blt.n	8001fca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	490c      	ldr	r1, [pc, #48]	@ (8001fec <__NVIC_SetPriority+0x4c>)
 8001fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbe:	0112      	lsls	r2, r2, #4
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fc8:	e00a      	b.n	8001fe0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	4908      	ldr	r1, [pc, #32]	@ (8001ff0 <__NVIC_SetPriority+0x50>)
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	3b04      	subs	r3, #4
 8001fd8:	0112      	lsls	r2, r2, #4
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	440b      	add	r3, r1
 8001fde:	761a      	strb	r2, [r3, #24]
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	e000e100 	.word	0xe000e100
 8001ff0:	e000ed00 	.word	0xe000ed00

08001ff4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b089      	sub	sp, #36	@ 0x24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	f1c3 0307 	rsb	r3, r3, #7
 800200e:	2b04      	cmp	r3, #4
 8002010:	bf28      	it	cs
 8002012:	2304      	movcs	r3, #4
 8002014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	3304      	adds	r3, #4
 800201a:	2b06      	cmp	r3, #6
 800201c:	d902      	bls.n	8002024 <NVIC_EncodePriority+0x30>
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3b03      	subs	r3, #3
 8002022:	e000      	b.n	8002026 <NVIC_EncodePriority+0x32>
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002028:	f04f 32ff 	mov.w	r2, #4294967295
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43da      	mvns	r2, r3
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	401a      	ands	r2, r3
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800203c:	f04f 31ff 	mov.w	r1, #4294967295
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	fa01 f303 	lsl.w	r3, r1, r3
 8002046:	43d9      	mvns	r1, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800204c:	4313      	orrs	r3, r2
         );
}
 800204e:	4618      	mov	r0, r3
 8002050:	3724      	adds	r7, #36	@ 0x24
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
	...

0800205c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3b01      	subs	r3, #1
 8002068:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800206c:	d301      	bcc.n	8002072 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800206e:	2301      	movs	r3, #1
 8002070:	e00f      	b.n	8002092 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002072:	4a0a      	ldr	r2, [pc, #40]	@ (800209c <SysTick_Config+0x40>)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3b01      	subs	r3, #1
 8002078:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800207a:	210f      	movs	r1, #15
 800207c:	f04f 30ff 	mov.w	r0, #4294967295
 8002080:	f7ff ff8e 	bl	8001fa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002084:	4b05      	ldr	r3, [pc, #20]	@ (800209c <SysTick_Config+0x40>)
 8002086:	2200      	movs	r2, #0
 8002088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800208a:	4b04      	ldr	r3, [pc, #16]	@ (800209c <SysTick_Config+0x40>)
 800208c:	2207      	movs	r2, #7
 800208e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	e000e010 	.word	0xe000e010

080020a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7ff ff29 	bl	8001f00 <__NVIC_SetPriorityGrouping>
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b086      	sub	sp, #24
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	4603      	mov	r3, r0
 80020be:	60b9      	str	r1, [r7, #8]
 80020c0:	607a      	str	r2, [r7, #4]
 80020c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020c8:	f7ff ff3e 	bl	8001f48 <__NVIC_GetPriorityGrouping>
 80020cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68b9      	ldr	r1, [r7, #8]
 80020d2:	6978      	ldr	r0, [r7, #20]
 80020d4:	f7ff ff8e 	bl	8001ff4 <NVIC_EncodePriority>
 80020d8:	4602      	mov	r2, r0
 80020da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020de:	4611      	mov	r1, r2
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ff5d 	bl	8001fa0 <__NVIC_SetPriority>
}
 80020e6:	bf00      	nop
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	4603      	mov	r3, r0
 80020f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff ff31 	bl	8001f64 <__NVIC_EnableIRQ>
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b082      	sub	sp, #8
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff ffa2 	bl	800205c <SysTick_Config>
 8002118:	4603      	mov	r3, r0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b084      	sub	sp, #16
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800212e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002130:	f7ff fc44 	bl	80019bc <HAL_GetTick>
 8002134:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d008      	beq.n	8002154 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2280      	movs	r2, #128	@ 0x80
 8002146:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e052      	b.n	80021fa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0216 	bic.w	r2, r2, #22
 8002162:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	695a      	ldr	r2, [r3, #20]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002172:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002178:	2b00      	cmp	r3, #0
 800217a:	d103      	bne.n	8002184 <HAL_DMA_Abort+0x62>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002180:	2b00      	cmp	r3, #0
 8002182:	d007      	beq.n	8002194 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 0208 	bic.w	r2, r2, #8
 8002192:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0201 	bic.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021a4:	e013      	b.n	80021ce <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021a6:	f7ff fc09 	bl	80019bc <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b05      	cmp	r3, #5
 80021b2:	d90c      	bls.n	80021ce <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2220      	movs	r2, #32
 80021b8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2203      	movs	r2, #3
 80021be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e015      	b.n	80021fa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1e4      	bne.n	80021a6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e0:	223f      	movs	r2, #63	@ 0x3f
 80021e2:	409a      	lsls	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d004      	beq.n	8002220 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2280      	movs	r2, #128	@ 0x80
 800221a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e00c      	b.n	800223a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2205      	movs	r2, #5
 8002224:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0201 	bic.w	r2, r2, #1
 8002236:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
	...

08002248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002248:	b480      	push	{r7}
 800224a:	b089      	sub	sp, #36	@ 0x24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002256:	2300      	movs	r3, #0
 8002258:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800225a:	2300      	movs	r3, #0
 800225c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800225e:	2300      	movs	r3, #0
 8002260:	61fb      	str	r3, [r7, #28]
 8002262:	e159      	b.n	8002518 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002264:	2201      	movs	r2, #1
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	4013      	ands	r3, r2
 8002276:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	429a      	cmp	r2, r3
 800227e:	f040 8148 	bne.w	8002512 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f003 0303 	and.w	r3, r3, #3
 800228a:	2b01      	cmp	r3, #1
 800228c:	d005      	beq.n	800229a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002296:	2b02      	cmp	r3, #2
 8002298:	d130      	bne.n	80022fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	2203      	movs	r2, #3
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43db      	mvns	r3, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4013      	ands	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	68da      	ldr	r2, [r3, #12]
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022d0:	2201      	movs	r2, #1
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	091b      	lsrs	r3, r3, #4
 80022e6:	f003 0201 	and.w	r2, r3, #1
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f003 0303 	and.w	r3, r3, #3
 8002304:	2b03      	cmp	r3, #3
 8002306:	d017      	beq.n	8002338 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	2203      	movs	r2, #3
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	43db      	mvns	r3, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4013      	ands	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4313      	orrs	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 0303 	and.w	r3, r3, #3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d123      	bne.n	800238c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	08da      	lsrs	r2, r3, #3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3208      	adds	r2, #8
 800234c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002350:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	220f      	movs	r2, #15
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4013      	ands	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	691a      	ldr	r2, [r3, #16]
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4313      	orrs	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	08da      	lsrs	r2, r3, #3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3208      	adds	r2, #8
 8002386:	69b9      	ldr	r1, [r7, #24]
 8002388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	2203      	movs	r2, #3
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	43db      	mvns	r3, r3
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	4013      	ands	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f003 0203 	and.w	r2, r3, #3
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f000 80a2 	beq.w	8002512 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	4b57      	ldr	r3, [pc, #348]	@ (8002530 <HAL_GPIO_Init+0x2e8>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d6:	4a56      	ldr	r2, [pc, #344]	@ (8002530 <HAL_GPIO_Init+0x2e8>)
 80023d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80023de:	4b54      	ldr	r3, [pc, #336]	@ (8002530 <HAL_GPIO_Init+0x2e8>)
 80023e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023ea:	4a52      	ldr	r2, [pc, #328]	@ (8002534 <HAL_GPIO_Init+0x2ec>)
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	089b      	lsrs	r3, r3, #2
 80023f0:	3302      	adds	r3, #2
 80023f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	220f      	movs	r2, #15
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	43db      	mvns	r3, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4013      	ands	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a49      	ldr	r2, [pc, #292]	@ (8002538 <HAL_GPIO_Init+0x2f0>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d019      	beq.n	800244a <HAL_GPIO_Init+0x202>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a48      	ldr	r2, [pc, #288]	@ (800253c <HAL_GPIO_Init+0x2f4>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d013      	beq.n	8002446 <HAL_GPIO_Init+0x1fe>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a47      	ldr	r2, [pc, #284]	@ (8002540 <HAL_GPIO_Init+0x2f8>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d00d      	beq.n	8002442 <HAL_GPIO_Init+0x1fa>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a46      	ldr	r2, [pc, #280]	@ (8002544 <HAL_GPIO_Init+0x2fc>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d007      	beq.n	800243e <HAL_GPIO_Init+0x1f6>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a45      	ldr	r2, [pc, #276]	@ (8002548 <HAL_GPIO_Init+0x300>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d101      	bne.n	800243a <HAL_GPIO_Init+0x1f2>
 8002436:	2304      	movs	r3, #4
 8002438:	e008      	b.n	800244c <HAL_GPIO_Init+0x204>
 800243a:	2307      	movs	r3, #7
 800243c:	e006      	b.n	800244c <HAL_GPIO_Init+0x204>
 800243e:	2303      	movs	r3, #3
 8002440:	e004      	b.n	800244c <HAL_GPIO_Init+0x204>
 8002442:	2302      	movs	r3, #2
 8002444:	e002      	b.n	800244c <HAL_GPIO_Init+0x204>
 8002446:	2301      	movs	r3, #1
 8002448:	e000      	b.n	800244c <HAL_GPIO_Init+0x204>
 800244a:	2300      	movs	r3, #0
 800244c:	69fa      	ldr	r2, [r7, #28]
 800244e:	f002 0203 	and.w	r2, r2, #3
 8002452:	0092      	lsls	r2, r2, #2
 8002454:	4093      	lsls	r3, r2
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4313      	orrs	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800245c:	4935      	ldr	r1, [pc, #212]	@ (8002534 <HAL_GPIO_Init+0x2ec>)
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	089b      	lsrs	r3, r3, #2
 8002462:	3302      	adds	r3, #2
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800246a:	4b38      	ldr	r3, [pc, #224]	@ (800254c <HAL_GPIO_Init+0x304>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	43db      	mvns	r3, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4013      	ands	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800248e:	4a2f      	ldr	r2, [pc, #188]	@ (800254c <HAL_GPIO_Init+0x304>)
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002494:	4b2d      	ldr	r3, [pc, #180]	@ (800254c <HAL_GPIO_Init+0x304>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	43db      	mvns	r3, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4013      	ands	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d003      	beq.n	80024b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024b8:	4a24      	ldr	r2, [pc, #144]	@ (800254c <HAL_GPIO_Init+0x304>)
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024be:	4b23      	ldr	r3, [pc, #140]	@ (800254c <HAL_GPIO_Init+0x304>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	43db      	mvns	r3, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4013      	ands	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024e2:	4a1a      	ldr	r2, [pc, #104]	@ (800254c <HAL_GPIO_Init+0x304>)
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024e8:	4b18      	ldr	r3, [pc, #96]	@ (800254c <HAL_GPIO_Init+0x304>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800250c:	4a0f      	ldr	r2, [pc, #60]	@ (800254c <HAL_GPIO_Init+0x304>)
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	3301      	adds	r3, #1
 8002516:	61fb      	str	r3, [r7, #28]
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	2b0f      	cmp	r3, #15
 800251c:	f67f aea2 	bls.w	8002264 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002520:	bf00      	nop
 8002522:	bf00      	nop
 8002524:	3724      	adds	r7, #36	@ 0x24
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	40023800 	.word	0x40023800
 8002534:	40013800 	.word	0x40013800
 8002538:	40020000 	.word	0x40020000
 800253c:	40020400 	.word	0x40020400
 8002540:	40020800 	.word	0x40020800
 8002544:	40020c00 	.word	0x40020c00
 8002548:	40021000 	.word	0x40021000
 800254c:	40013c00 	.word	0x40013c00

08002550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	807b      	strh	r3, [r7, #2]
 800255c:	4613      	mov	r3, r2
 800255e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002560:	787b      	ldrb	r3, [r7, #1]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002566:	887a      	ldrh	r2, [r7, #2]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800256c:	e003      	b.n	8002576 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800256e:	887b      	ldrh	r3, [r7, #2]
 8002570:	041a      	lsls	r2, r3, #16
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	619a      	str	r2, [r3, #24]
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
	...

08002584 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e12b      	b.n	80027ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d106      	bne.n	80025b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7fe ff66 	bl	800147c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2224      	movs	r2, #36	@ 0x24
 80025b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0201 	bic.w	r2, r2, #1
 80025c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025e8:	f000 fd80 	bl	80030ec <HAL_RCC_GetPCLK1Freq>
 80025ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	4a81      	ldr	r2, [pc, #516]	@ (80027f8 <HAL_I2C_Init+0x274>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d807      	bhi.n	8002608 <HAL_I2C_Init+0x84>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4a80      	ldr	r2, [pc, #512]	@ (80027fc <HAL_I2C_Init+0x278>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	bf94      	ite	ls
 8002600:	2301      	movls	r3, #1
 8002602:	2300      	movhi	r3, #0
 8002604:	b2db      	uxtb	r3, r3
 8002606:	e006      	b.n	8002616 <HAL_I2C_Init+0x92>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4a7d      	ldr	r2, [pc, #500]	@ (8002800 <HAL_I2C_Init+0x27c>)
 800260c:	4293      	cmp	r3, r2
 800260e:	bf94      	ite	ls
 8002610:	2301      	movls	r3, #1
 8002612:	2300      	movhi	r3, #0
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e0e7      	b.n	80027ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	4a78      	ldr	r2, [pc, #480]	@ (8002804 <HAL_I2C_Init+0x280>)
 8002622:	fba2 2303 	umull	r2, r3, r2, r3
 8002626:	0c9b      	lsrs	r3, r3, #18
 8002628:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68ba      	ldr	r2, [r7, #8]
 800263a:	430a      	orrs	r2, r1
 800263c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	4a6a      	ldr	r2, [pc, #424]	@ (80027f8 <HAL_I2C_Init+0x274>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d802      	bhi.n	8002658 <HAL_I2C_Init+0xd4>
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	3301      	adds	r3, #1
 8002656:	e009      	b.n	800266c <HAL_I2C_Init+0xe8>
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800265e:	fb02 f303 	mul.w	r3, r2, r3
 8002662:	4a69      	ldr	r2, [pc, #420]	@ (8002808 <HAL_I2C_Init+0x284>)
 8002664:	fba2 2303 	umull	r2, r3, r2, r3
 8002668:	099b      	lsrs	r3, r3, #6
 800266a:	3301      	adds	r3, #1
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	6812      	ldr	r2, [r2, #0]
 8002670:	430b      	orrs	r3, r1
 8002672:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800267e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	495c      	ldr	r1, [pc, #368]	@ (80027f8 <HAL_I2C_Init+0x274>)
 8002688:	428b      	cmp	r3, r1
 800268a:	d819      	bhi.n	80026c0 <HAL_I2C_Init+0x13c>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	1e59      	subs	r1, r3, #1
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	fbb1 f3f3 	udiv	r3, r1, r3
 800269a:	1c59      	adds	r1, r3, #1
 800269c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80026a0:	400b      	ands	r3, r1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00a      	beq.n	80026bc <HAL_I2C_Init+0x138>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	1e59      	subs	r1, r3, #1
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80026b4:	3301      	adds	r3, #1
 80026b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ba:	e051      	b.n	8002760 <HAL_I2C_Init+0x1dc>
 80026bc:	2304      	movs	r3, #4
 80026be:	e04f      	b.n	8002760 <HAL_I2C_Init+0x1dc>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d111      	bne.n	80026ec <HAL_I2C_Init+0x168>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	1e58      	subs	r0, r3, #1
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6859      	ldr	r1, [r3, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	440b      	add	r3, r1
 80026d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026da:	3301      	adds	r3, #1
 80026dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	bf0c      	ite	eq
 80026e4:	2301      	moveq	r3, #1
 80026e6:	2300      	movne	r3, #0
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	e012      	b.n	8002712 <HAL_I2C_Init+0x18e>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	1e58      	subs	r0, r3, #1
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6859      	ldr	r1, [r3, #4]
 80026f4:	460b      	mov	r3, r1
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	0099      	lsls	r1, r3, #2
 80026fc:	440b      	add	r3, r1
 80026fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002702:	3301      	adds	r3, #1
 8002704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002708:	2b00      	cmp	r3, #0
 800270a:	bf0c      	ite	eq
 800270c:	2301      	moveq	r3, #1
 800270e:	2300      	movne	r3, #0
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_I2C_Init+0x196>
 8002716:	2301      	movs	r3, #1
 8002718:	e022      	b.n	8002760 <HAL_I2C_Init+0x1dc>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10e      	bne.n	8002740 <HAL_I2C_Init+0x1bc>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	1e58      	subs	r0, r3, #1
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6859      	ldr	r1, [r3, #4]
 800272a:	460b      	mov	r3, r1
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	440b      	add	r3, r1
 8002730:	fbb0 f3f3 	udiv	r3, r0, r3
 8002734:	3301      	adds	r3, #1
 8002736:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800273a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800273e:	e00f      	b.n	8002760 <HAL_I2C_Init+0x1dc>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	1e58      	subs	r0, r3, #1
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6859      	ldr	r1, [r3, #4]
 8002748:	460b      	mov	r3, r1
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	0099      	lsls	r1, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	fbb0 f3f3 	udiv	r3, r0, r3
 8002756:	3301      	adds	r3, #1
 8002758:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800275c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	6809      	ldr	r1, [r1, #0]
 8002764:	4313      	orrs	r3, r2
 8002766:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69da      	ldr	r2, [r3, #28]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	430a      	orrs	r2, r1
 8002782:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800278e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	6911      	ldr	r1, [r2, #16]
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	68d2      	ldr	r2, [r2, #12]
 800279a:	4311      	orrs	r1, r2
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6812      	ldr	r2, [r2, #0]
 80027a0:	430b      	orrs	r3, r1
 80027a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	695a      	ldr	r2, [r3, #20]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f042 0201 	orr.w	r2, r2, #1
 80027ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2220      	movs	r2, #32
 80027da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	000186a0 	.word	0x000186a0
 80027fc:	001e847f 	.word	0x001e847f
 8002800:	003d08ff 	.word	0x003d08ff
 8002804:	431bde83 	.word	0x431bde83
 8002808:	10624dd3 	.word	0x10624dd3

0800280c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e267      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d075      	beq.n	8002916 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800282a:	4b88      	ldr	r3, [pc, #544]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 030c 	and.w	r3, r3, #12
 8002832:	2b04      	cmp	r3, #4
 8002834:	d00c      	beq.n	8002850 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002836:	4b85      	ldr	r3, [pc, #532]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800283e:	2b08      	cmp	r3, #8
 8002840:	d112      	bne.n	8002868 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002842:	4b82      	ldr	r3, [pc, #520]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800284a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800284e:	d10b      	bne.n	8002868 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002850:	4b7e      	ldr	r3, [pc, #504]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d05b      	beq.n	8002914 <HAL_RCC_OscConfig+0x108>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d157      	bne.n	8002914 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e242      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002870:	d106      	bne.n	8002880 <HAL_RCC_OscConfig+0x74>
 8002872:	4b76      	ldr	r3, [pc, #472]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a75      	ldr	r2, [pc, #468]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002878:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	e01d      	b.n	80028bc <HAL_RCC_OscConfig+0xb0>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002888:	d10c      	bne.n	80028a4 <HAL_RCC_OscConfig+0x98>
 800288a:	4b70      	ldr	r3, [pc, #448]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a6f      	ldr	r2, [pc, #444]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002890:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002894:	6013      	str	r3, [r2, #0]
 8002896:	4b6d      	ldr	r3, [pc, #436]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a6c      	ldr	r2, [pc, #432]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 800289c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	e00b      	b.n	80028bc <HAL_RCC_OscConfig+0xb0>
 80028a4:	4b69      	ldr	r3, [pc, #420]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a68      	ldr	r2, [pc, #416]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 80028aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	4b66      	ldr	r3, [pc, #408]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a65      	ldr	r2, [pc, #404]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 80028b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d013      	beq.n	80028ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c4:	f7ff f87a 	bl	80019bc <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028cc:	f7ff f876 	bl	80019bc <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b64      	cmp	r3, #100	@ 0x64
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e207      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028de:	4b5b      	ldr	r3, [pc, #364]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d0f0      	beq.n	80028cc <HAL_RCC_OscConfig+0xc0>
 80028ea:	e014      	b.n	8002916 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ec:	f7ff f866 	bl	80019bc <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028f4:	f7ff f862 	bl	80019bc <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b64      	cmp	r3, #100	@ 0x64
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e1f3      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002906:	4b51      	ldr	r3, [pc, #324]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f0      	bne.n	80028f4 <HAL_RCC_OscConfig+0xe8>
 8002912:	e000      	b.n	8002916 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002914:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d063      	beq.n	80029ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002922:	4b4a      	ldr	r3, [pc, #296]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 030c 	and.w	r3, r3, #12
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00b      	beq.n	8002946 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800292e:	4b47      	ldr	r3, [pc, #284]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002936:	2b08      	cmp	r3, #8
 8002938:	d11c      	bne.n	8002974 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800293a:	4b44      	ldr	r3, [pc, #272]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d116      	bne.n	8002974 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002946:	4b41      	ldr	r3, [pc, #260]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d005      	beq.n	800295e <HAL_RCC_OscConfig+0x152>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d001      	beq.n	800295e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e1c7      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295e:	4b3b      	ldr	r3, [pc, #236]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	4937      	ldr	r1, [pc, #220]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 800296e:	4313      	orrs	r3, r2
 8002970:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002972:	e03a      	b.n	80029ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d020      	beq.n	80029be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800297c:	4b34      	ldr	r3, [pc, #208]	@ (8002a50 <HAL_RCC_OscConfig+0x244>)
 800297e:	2201      	movs	r2, #1
 8002980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002982:	f7ff f81b 	bl	80019bc <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800298a:	f7ff f817 	bl	80019bc <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e1a8      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800299c:	4b2b      	ldr	r3, [pc, #172]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0f0      	beq.n	800298a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a8:	4b28      	ldr	r3, [pc, #160]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	4925      	ldr	r1, [pc, #148]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	600b      	str	r3, [r1, #0]
 80029bc:	e015      	b.n	80029ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029be:	4b24      	ldr	r3, [pc, #144]	@ (8002a50 <HAL_RCC_OscConfig+0x244>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c4:	f7fe fffa 	bl	80019bc <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029cc:	f7fe fff6 	bl	80019bc <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e187      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029de:	4b1b      	ldr	r3, [pc, #108]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f0      	bne.n	80029cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d036      	beq.n	8002a64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d016      	beq.n	8002a2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029fe:	4b15      	ldr	r3, [pc, #84]	@ (8002a54 <HAL_RCC_OscConfig+0x248>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a04:	f7fe ffda 	bl	80019bc <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a0c:	f7fe ffd6 	bl	80019bc <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e167      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a4c <HAL_RCC_OscConfig+0x240>)
 8002a20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0f0      	beq.n	8002a0c <HAL_RCC_OscConfig+0x200>
 8002a2a:	e01b      	b.n	8002a64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a2c:	4b09      	ldr	r3, [pc, #36]	@ (8002a54 <HAL_RCC_OscConfig+0x248>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a32:	f7fe ffc3 	bl	80019bc <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a38:	e00e      	b.n	8002a58 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a3a:	f7fe ffbf 	bl	80019bc <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d907      	bls.n	8002a58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e150      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	42470000 	.word	0x42470000
 8002a54:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a58:	4b88      	ldr	r3, [pc, #544]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002a5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1ea      	bne.n	8002a3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 8097 	beq.w	8002ba0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a72:	2300      	movs	r3, #0
 8002a74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a76:	4b81      	ldr	r3, [pc, #516]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10f      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	4b7d      	ldr	r3, [pc, #500]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8a:	4a7c      	ldr	r2, [pc, #496]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002a8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a90:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a92:	4b7a      	ldr	r3, [pc, #488]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a9a:	60bb      	str	r3, [r7, #8]
 8002a9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa2:	4b77      	ldr	r3, [pc, #476]	@ (8002c80 <HAL_RCC_OscConfig+0x474>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d118      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aae:	4b74      	ldr	r3, [pc, #464]	@ (8002c80 <HAL_RCC_OscConfig+0x474>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a73      	ldr	r2, [pc, #460]	@ (8002c80 <HAL_RCC_OscConfig+0x474>)
 8002ab4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ab8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aba:	f7fe ff7f 	bl	80019bc <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac2:	f7fe ff7b 	bl	80019bc <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e10c      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad4:	4b6a      	ldr	r3, [pc, #424]	@ (8002c80 <HAL_RCC_OscConfig+0x474>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0f0      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d106      	bne.n	8002af6 <HAL_RCC_OscConfig+0x2ea>
 8002ae8:	4b64      	ldr	r3, [pc, #400]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aec:	4a63      	ldr	r2, [pc, #396]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002aee:	f043 0301 	orr.w	r3, r3, #1
 8002af2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002af4:	e01c      	b.n	8002b30 <HAL_RCC_OscConfig+0x324>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	2b05      	cmp	r3, #5
 8002afc:	d10c      	bne.n	8002b18 <HAL_RCC_OscConfig+0x30c>
 8002afe:	4b5f      	ldr	r3, [pc, #380]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b02:	4a5e      	ldr	r2, [pc, #376]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b04:	f043 0304 	orr.w	r3, r3, #4
 8002b08:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b0a:	4b5c      	ldr	r3, [pc, #368]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b0e:	4a5b      	ldr	r2, [pc, #364]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b16:	e00b      	b.n	8002b30 <HAL_RCC_OscConfig+0x324>
 8002b18:	4b58      	ldr	r3, [pc, #352]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b1c:	4a57      	ldr	r2, [pc, #348]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b1e:	f023 0301 	bic.w	r3, r3, #1
 8002b22:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b24:	4b55      	ldr	r3, [pc, #340]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b28:	4a54      	ldr	r2, [pc, #336]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b2a:	f023 0304 	bic.w	r3, r3, #4
 8002b2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d015      	beq.n	8002b64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b38:	f7fe ff40 	bl	80019bc <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3e:	e00a      	b.n	8002b56 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b40:	f7fe ff3c 	bl	80019bc <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e0cb      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b56:	4b49      	ldr	r3, [pc, #292]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0ee      	beq.n	8002b40 <HAL_RCC_OscConfig+0x334>
 8002b62:	e014      	b.n	8002b8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b64:	f7fe ff2a 	bl	80019bc <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b6a:	e00a      	b.n	8002b82 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b6c:	f7fe ff26 	bl	80019bc <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e0b5      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b82:	4b3e      	ldr	r3, [pc, #248]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1ee      	bne.n	8002b6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b8e:	7dfb      	ldrb	r3, [r7, #23]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d105      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b94:	4b39      	ldr	r3, [pc, #228]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b98:	4a38      	ldr	r2, [pc, #224]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002b9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 80a1 	beq.w	8002cec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002baa:	4b34      	ldr	r3, [pc, #208]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 030c 	and.w	r3, r3, #12
 8002bb2:	2b08      	cmp	r3, #8
 8002bb4:	d05c      	beq.n	8002c70 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d141      	bne.n	8002c42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bbe:	4b31      	ldr	r3, [pc, #196]	@ (8002c84 <HAL_RCC_OscConfig+0x478>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc4:	f7fe fefa 	bl	80019bc <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bcc:	f7fe fef6 	bl	80019bc <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e087      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bde:	4b27      	ldr	r3, [pc, #156]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1f0      	bne.n	8002bcc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69da      	ldr	r2, [r3, #28]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf8:	019b      	lsls	r3, r3, #6
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c00:	085b      	lsrs	r3, r3, #1
 8002c02:	3b01      	subs	r3, #1
 8002c04:	041b      	lsls	r3, r3, #16
 8002c06:	431a      	orrs	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c0c:	061b      	lsls	r3, r3, #24
 8002c0e:	491b      	ldr	r1, [pc, #108]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c14:	4b1b      	ldr	r3, [pc, #108]	@ (8002c84 <HAL_RCC_OscConfig+0x478>)
 8002c16:	2201      	movs	r2, #1
 8002c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1a:	f7fe fecf 	bl	80019bc <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c22:	f7fe fecb 	bl	80019bc <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e05c      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c34:	4b11      	ldr	r3, [pc, #68]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0f0      	beq.n	8002c22 <HAL_RCC_OscConfig+0x416>
 8002c40:	e054      	b.n	8002cec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c42:	4b10      	ldr	r3, [pc, #64]	@ (8002c84 <HAL_RCC_OscConfig+0x478>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c48:	f7fe feb8 	bl	80019bc <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c50:	f7fe feb4 	bl	80019bc <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e045      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c62:	4b06      	ldr	r3, [pc, #24]	@ (8002c7c <HAL_RCC_OscConfig+0x470>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f0      	bne.n	8002c50 <HAL_RCC_OscConfig+0x444>
 8002c6e:	e03d      	b.n	8002cec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d107      	bne.n	8002c88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e038      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	40007000 	.word	0x40007000
 8002c84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c88:	4b1b      	ldr	r3, [pc, #108]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ec>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d028      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d121      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d11a      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002cb8:	4013      	ands	r3, r2
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002cbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d111      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cce:	085b      	lsrs	r3, r3, #1
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d107      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d001      	beq.n	8002cec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e000      	b.n	8002cee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3718      	adds	r7, #24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40023800 	.word	0x40023800

08002cfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e0cc      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d10:	4b68      	ldr	r3, [pc, #416]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d90c      	bls.n	8002d38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1e:	4b65      	ldr	r3, [pc, #404]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	b2d2      	uxtb	r2, r2
 8002d24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d26:	4b63      	ldr	r3, [pc, #396]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d001      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e0b8      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d020      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d005      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d50:	4b59      	ldr	r3, [pc, #356]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	4a58      	ldr	r2, [pc, #352]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0308 	and.w	r3, r3, #8
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d005      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d68:	4b53      	ldr	r3, [pc, #332]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	4a52      	ldr	r2, [pc, #328]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d74:	4b50      	ldr	r3, [pc, #320]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	494d      	ldr	r1, [pc, #308]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d044      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d107      	bne.n	8002daa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d9a:	4b47      	ldr	r3, [pc, #284]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d119      	bne.n	8002dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e07f      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d003      	beq.n	8002dba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	d107      	bne.n	8002dca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dba:	4b3f      	ldr	r3, [pc, #252]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d109      	bne.n	8002dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e06f      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dca:	4b3b      	ldr	r3, [pc, #236]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e067      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dda:	4b37      	ldr	r3, [pc, #220]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f023 0203 	bic.w	r2, r3, #3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	4934      	ldr	r1, [pc, #208]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dec:	f7fe fde6 	bl	80019bc <HAL_GetTick>
 8002df0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002df2:	e00a      	b.n	8002e0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002df4:	f7fe fde2 	bl	80019bc <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e04f      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e0a:	4b2b      	ldr	r3, [pc, #172]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 020c 	and.w	r2, r3, #12
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d1eb      	bne.n	8002df4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e1c:	4b25      	ldr	r3, [pc, #148]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d20c      	bcs.n	8002e44 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e2a:	4b22      	ldr	r3, [pc, #136]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	b2d2      	uxtb	r2, r2
 8002e30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e32:	4b20      	ldr	r3, [pc, #128]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d001      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e032      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d008      	beq.n	8002e62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e50:	4b19      	ldr	r3, [pc, #100]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	4916      	ldr	r1, [pc, #88]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d009      	beq.n	8002e82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e6e:	4b12      	ldr	r3, [pc, #72]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	490e      	ldr	r1, [pc, #56]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e82:	f000 f821 	bl	8002ec8 <HAL_RCC_GetSysClockFreq>
 8002e86:	4602      	mov	r2, r0
 8002e88:	4b0b      	ldr	r3, [pc, #44]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	091b      	lsrs	r3, r3, #4
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	490a      	ldr	r1, [pc, #40]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c0>)
 8002e94:	5ccb      	ldrb	r3, [r1, r3]
 8002e96:	fa22 f303 	lsr.w	r3, r2, r3
 8002e9a:	4a09      	ldr	r2, [pc, #36]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002e9e:	4b09      	ldr	r3, [pc, #36]	@ (8002ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fe fd46 	bl	8001934 <HAL_InitTick>

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40023c00 	.word	0x40023c00
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	08007520 	.word	0x08007520
 8002ec0:	20000034 	.word	0x20000034
 8002ec4:	20000038 	.word	0x20000038

08002ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ec8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ecc:	b094      	sub	sp, #80	@ 0x50
 8002ece:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ee0:	4b79      	ldr	r3, [pc, #484]	@ (80030c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 030c 	and.w	r3, r3, #12
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	d00d      	beq.n	8002f08 <HAL_RCC_GetSysClockFreq+0x40>
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	f200 80e1 	bhi.w	80030b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <HAL_RCC_GetSysClockFreq+0x34>
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d003      	beq.n	8002f02 <HAL_RCC_GetSysClockFreq+0x3a>
 8002efa:	e0db      	b.n	80030b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002efc:	4b73      	ldr	r3, [pc, #460]	@ (80030cc <HAL_RCC_GetSysClockFreq+0x204>)
 8002efe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f00:	e0db      	b.n	80030ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f02:	4b73      	ldr	r3, [pc, #460]	@ (80030d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f04:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f06:	e0d8      	b.n	80030ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f08:	4b6f      	ldr	r3, [pc, #444]	@ (80030c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f10:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f12:	4b6d      	ldr	r3, [pc, #436]	@ (80030c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d063      	beq.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f1e:	4b6a      	ldr	r3, [pc, #424]	@ (80030c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	099b      	lsrs	r3, r3, #6
 8002f24:	2200      	movs	r2, #0
 8002f26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f28:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f30:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f32:	2300      	movs	r3, #0
 8002f34:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002f3a:	4622      	mov	r2, r4
 8002f3c:	462b      	mov	r3, r5
 8002f3e:	f04f 0000 	mov.w	r0, #0
 8002f42:	f04f 0100 	mov.w	r1, #0
 8002f46:	0159      	lsls	r1, r3, #5
 8002f48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f4c:	0150      	lsls	r0, r2, #5
 8002f4e:	4602      	mov	r2, r0
 8002f50:	460b      	mov	r3, r1
 8002f52:	4621      	mov	r1, r4
 8002f54:	1a51      	subs	r1, r2, r1
 8002f56:	6139      	str	r1, [r7, #16]
 8002f58:	4629      	mov	r1, r5
 8002f5a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f5e:	617b      	str	r3, [r7, #20]
 8002f60:	f04f 0200 	mov.w	r2, #0
 8002f64:	f04f 0300 	mov.w	r3, #0
 8002f68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f6c:	4659      	mov	r1, fp
 8002f6e:	018b      	lsls	r3, r1, #6
 8002f70:	4651      	mov	r1, sl
 8002f72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f76:	4651      	mov	r1, sl
 8002f78:	018a      	lsls	r2, r1, #6
 8002f7a:	4651      	mov	r1, sl
 8002f7c:	ebb2 0801 	subs.w	r8, r2, r1
 8002f80:	4659      	mov	r1, fp
 8002f82:	eb63 0901 	sbc.w	r9, r3, r1
 8002f86:	f04f 0200 	mov.w	r2, #0
 8002f8a:	f04f 0300 	mov.w	r3, #0
 8002f8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f9a:	4690      	mov	r8, r2
 8002f9c:	4699      	mov	r9, r3
 8002f9e:	4623      	mov	r3, r4
 8002fa0:	eb18 0303 	adds.w	r3, r8, r3
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	462b      	mov	r3, r5
 8002fa8:	eb49 0303 	adc.w	r3, r9, r3
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	f04f 0200 	mov.w	r2, #0
 8002fb2:	f04f 0300 	mov.w	r3, #0
 8002fb6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002fba:	4629      	mov	r1, r5
 8002fbc:	024b      	lsls	r3, r1, #9
 8002fbe:	4621      	mov	r1, r4
 8002fc0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fc4:	4621      	mov	r1, r4
 8002fc6:	024a      	lsls	r2, r1, #9
 8002fc8:	4610      	mov	r0, r2
 8002fca:	4619      	mov	r1, r3
 8002fcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fce:	2200      	movs	r2, #0
 8002fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fd4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002fd8:	f7fd f95a 	bl	8000290 <__aeabi_uldivmod>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fe4:	e058      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fe6:	4b38      	ldr	r3, [pc, #224]	@ (80030c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	099b      	lsrs	r3, r3, #6
 8002fec:	2200      	movs	r2, #0
 8002fee:	4618      	mov	r0, r3
 8002ff0:	4611      	mov	r1, r2
 8002ff2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ff6:	623b      	str	r3, [r7, #32]
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ffc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003000:	4642      	mov	r2, r8
 8003002:	464b      	mov	r3, r9
 8003004:	f04f 0000 	mov.w	r0, #0
 8003008:	f04f 0100 	mov.w	r1, #0
 800300c:	0159      	lsls	r1, r3, #5
 800300e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003012:	0150      	lsls	r0, r2, #5
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	4641      	mov	r1, r8
 800301a:	ebb2 0a01 	subs.w	sl, r2, r1
 800301e:	4649      	mov	r1, r9
 8003020:	eb63 0b01 	sbc.w	fp, r3, r1
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003030:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003034:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003038:	ebb2 040a 	subs.w	r4, r2, sl
 800303c:	eb63 050b 	sbc.w	r5, r3, fp
 8003040:	f04f 0200 	mov.w	r2, #0
 8003044:	f04f 0300 	mov.w	r3, #0
 8003048:	00eb      	lsls	r3, r5, #3
 800304a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800304e:	00e2      	lsls	r2, r4, #3
 8003050:	4614      	mov	r4, r2
 8003052:	461d      	mov	r5, r3
 8003054:	4643      	mov	r3, r8
 8003056:	18e3      	adds	r3, r4, r3
 8003058:	603b      	str	r3, [r7, #0]
 800305a:	464b      	mov	r3, r9
 800305c:	eb45 0303 	adc.w	r3, r5, r3
 8003060:	607b      	str	r3, [r7, #4]
 8003062:	f04f 0200 	mov.w	r2, #0
 8003066:	f04f 0300 	mov.w	r3, #0
 800306a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800306e:	4629      	mov	r1, r5
 8003070:	028b      	lsls	r3, r1, #10
 8003072:	4621      	mov	r1, r4
 8003074:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003078:	4621      	mov	r1, r4
 800307a:	028a      	lsls	r2, r1, #10
 800307c:	4610      	mov	r0, r2
 800307e:	4619      	mov	r1, r3
 8003080:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003082:	2200      	movs	r2, #0
 8003084:	61bb      	str	r3, [r7, #24]
 8003086:	61fa      	str	r2, [r7, #28]
 8003088:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800308c:	f7fd f900 	bl	8000290 <__aeabi_uldivmod>
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	4613      	mov	r3, r2
 8003096:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003098:	4b0b      	ldr	r3, [pc, #44]	@ (80030c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	0c1b      	lsrs	r3, r3, #16
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	3301      	adds	r3, #1
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80030a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80030aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030b2:	e002      	b.n	80030ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030b4:	4b05      	ldr	r3, [pc, #20]	@ (80030cc <HAL_RCC_GetSysClockFreq+0x204>)
 80030b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3750      	adds	r7, #80	@ 0x50
 80030c0:	46bd      	mov	sp, r7
 80030c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030c6:	bf00      	nop
 80030c8:	40023800 	.word	0x40023800
 80030cc:	00f42400 	.word	0x00f42400
 80030d0:	007a1200 	.word	0x007a1200

080030d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030d8:	4b03      	ldr	r3, [pc, #12]	@ (80030e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80030da:	681b      	ldr	r3, [r3, #0]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	20000034 	.word	0x20000034

080030ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030f0:	f7ff fff0 	bl	80030d4 <HAL_RCC_GetHCLKFreq>
 80030f4:	4602      	mov	r2, r0
 80030f6:	4b05      	ldr	r3, [pc, #20]	@ (800310c <HAL_RCC_GetPCLK1Freq+0x20>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	0a9b      	lsrs	r3, r3, #10
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	4903      	ldr	r1, [pc, #12]	@ (8003110 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003102:	5ccb      	ldrb	r3, [r1, r3]
 8003104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003108:	4618      	mov	r0, r3
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40023800 	.word	0x40023800
 8003110:	08007530 	.word	0x08007530

08003114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003118:	f7ff ffdc 	bl	80030d4 <HAL_RCC_GetHCLKFreq>
 800311c:	4602      	mov	r2, r0
 800311e:	4b05      	ldr	r3, [pc, #20]	@ (8003134 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	0b5b      	lsrs	r3, r3, #13
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	4903      	ldr	r1, [pc, #12]	@ (8003138 <HAL_RCC_GetPCLK2Freq+0x24>)
 800312a:	5ccb      	ldrb	r3, [r1, r3]
 800312c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003130:	4618      	mov	r0, r3
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40023800 	.word	0x40023800
 8003138:	08007530 	.word	0x08007530

0800313c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e041      	b.n	80031d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d106      	bne.n	8003168 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7fe f9d2 	bl	800150c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3304      	adds	r3, #4
 8003178:	4619      	mov	r1, r3
 800317a:	4610      	mov	r0, r2
 800317c:	f000 f8f0 	bl	8003360 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
	...

080031dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031e8:	2300      	movs	r3, #0
 80031ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d101      	bne.n	80031fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80031f6:	2302      	movs	r3, #2
 80031f8:	e0ae      	b.n	8003358 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b0c      	cmp	r3, #12
 8003206:	f200 809f 	bhi.w	8003348 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800320a:	a201      	add	r2, pc, #4	@ (adr r2, 8003210 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800320c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003210:	08003245 	.word	0x08003245
 8003214:	08003349 	.word	0x08003349
 8003218:	08003349 	.word	0x08003349
 800321c:	08003349 	.word	0x08003349
 8003220:	08003285 	.word	0x08003285
 8003224:	08003349 	.word	0x08003349
 8003228:	08003349 	.word	0x08003349
 800322c:	08003349 	.word	0x08003349
 8003230:	080032c7 	.word	0x080032c7
 8003234:	08003349 	.word	0x08003349
 8003238:	08003349 	.word	0x08003349
 800323c:	08003349 	.word	0x08003349
 8003240:	08003307 	.word	0x08003307
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68b9      	ldr	r1, [r7, #8]
 800324a:	4618      	mov	r0, r3
 800324c:	f000 f914 	bl	8003478 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	699a      	ldr	r2, [r3, #24]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f042 0208 	orr.w	r2, r2, #8
 800325e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	699a      	ldr	r2, [r3, #24]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 0204 	bic.w	r2, r2, #4
 800326e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6999      	ldr	r1, [r3, #24]
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	691a      	ldr	r2, [r3, #16]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	619a      	str	r2, [r3, #24]
      break;
 8003282:	e064      	b.n	800334e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68b9      	ldr	r1, [r7, #8]
 800328a:	4618      	mov	r0, r3
 800328c:	f000 f95a 	bl	8003544 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	699a      	ldr	r2, [r3, #24]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800329e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	699a      	ldr	r2, [r3, #24]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6999      	ldr	r1, [r3, #24]
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	021a      	lsls	r2, r3, #8
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	619a      	str	r2, [r3, #24]
      break;
 80032c4:	e043      	b.n	800334e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68b9      	ldr	r1, [r7, #8]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f000 f9a5 	bl	800361c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	69da      	ldr	r2, [r3, #28]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f042 0208 	orr.w	r2, r2, #8
 80032e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	69da      	ldr	r2, [r3, #28]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 0204 	bic.w	r2, r2, #4
 80032f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	69d9      	ldr	r1, [r3, #28]
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	691a      	ldr	r2, [r3, #16]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	430a      	orrs	r2, r1
 8003302:	61da      	str	r2, [r3, #28]
      break;
 8003304:	e023      	b.n	800334e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68b9      	ldr	r1, [r7, #8]
 800330c:	4618      	mov	r0, r3
 800330e:	f000 f9ef 	bl	80036f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	69da      	ldr	r2, [r3, #28]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003320:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	69da      	ldr	r2, [r3, #28]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003330:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	69d9      	ldr	r1, [r3, #28]
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	021a      	lsls	r2, r3, #8
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	61da      	str	r2, [r3, #28]
      break;
 8003346:	e002      	b.n	800334e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	75fb      	strb	r3, [r7, #23]
      break;
 800334c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003356:	7dfb      	ldrb	r3, [r7, #23]
}
 8003358:	4618      	mov	r0, r3
 800335a:	3718      	adds	r7, #24
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a3a      	ldr	r2, [pc, #232]	@ (800345c <TIM_Base_SetConfig+0xfc>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d00f      	beq.n	8003398 <TIM_Base_SetConfig+0x38>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800337e:	d00b      	beq.n	8003398 <TIM_Base_SetConfig+0x38>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a37      	ldr	r2, [pc, #220]	@ (8003460 <TIM_Base_SetConfig+0x100>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d007      	beq.n	8003398 <TIM_Base_SetConfig+0x38>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a36      	ldr	r2, [pc, #216]	@ (8003464 <TIM_Base_SetConfig+0x104>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d003      	beq.n	8003398 <TIM_Base_SetConfig+0x38>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a35      	ldr	r2, [pc, #212]	@ (8003468 <TIM_Base_SetConfig+0x108>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d108      	bne.n	80033aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800339e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a2b      	ldr	r2, [pc, #172]	@ (800345c <TIM_Base_SetConfig+0xfc>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d01b      	beq.n	80033ea <TIM_Base_SetConfig+0x8a>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033b8:	d017      	beq.n	80033ea <TIM_Base_SetConfig+0x8a>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a28      	ldr	r2, [pc, #160]	@ (8003460 <TIM_Base_SetConfig+0x100>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d013      	beq.n	80033ea <TIM_Base_SetConfig+0x8a>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a27      	ldr	r2, [pc, #156]	@ (8003464 <TIM_Base_SetConfig+0x104>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d00f      	beq.n	80033ea <TIM_Base_SetConfig+0x8a>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a26      	ldr	r2, [pc, #152]	@ (8003468 <TIM_Base_SetConfig+0x108>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d00b      	beq.n	80033ea <TIM_Base_SetConfig+0x8a>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a25      	ldr	r2, [pc, #148]	@ (800346c <TIM_Base_SetConfig+0x10c>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d007      	beq.n	80033ea <TIM_Base_SetConfig+0x8a>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a24      	ldr	r2, [pc, #144]	@ (8003470 <TIM_Base_SetConfig+0x110>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d003      	beq.n	80033ea <TIM_Base_SetConfig+0x8a>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a23      	ldr	r2, [pc, #140]	@ (8003474 <TIM_Base_SetConfig+0x114>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d108      	bne.n	80033fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	4313      	orrs	r3, r2
 8003408:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a0e      	ldr	r2, [pc, #56]	@ (800345c <TIM_Base_SetConfig+0xfc>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d103      	bne.n	8003430 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	691a      	ldr	r2, [r3, #16]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b01      	cmp	r3, #1
 8003440:	d105      	bne.n	800344e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	f023 0201 	bic.w	r2, r3, #1
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	611a      	str	r2, [r3, #16]
  }
}
 800344e:	bf00      	nop
 8003450:	3714      	adds	r7, #20
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	40010000 	.word	0x40010000
 8003460:	40000400 	.word	0x40000400
 8003464:	40000800 	.word	0x40000800
 8003468:	40000c00 	.word	0x40000c00
 800346c:	40014000 	.word	0x40014000
 8003470:	40014400 	.word	0x40014400
 8003474:	40014800 	.word	0x40014800

08003478 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003478:	b480      	push	{r7}
 800347a:	b087      	sub	sp, #28
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	f023 0201 	bic.w	r2, r3, #1
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f023 0303 	bic.w	r3, r3, #3
 80034ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f023 0302 	bic.w	r3, r3, #2
 80034c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a1c      	ldr	r2, [pc, #112]	@ (8003540 <TIM_OC1_SetConfig+0xc8>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d10c      	bne.n	80034ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f023 0308 	bic.w	r3, r3, #8
 80034da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f023 0304 	bic.w	r3, r3, #4
 80034ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a13      	ldr	r2, [pc, #76]	@ (8003540 <TIM_OC1_SetConfig+0xc8>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d111      	bne.n	800351a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003504:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	4313      	orrs	r3, r2
 800350e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	4313      	orrs	r3, r2
 8003518:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	621a      	str	r2, [r3, #32]
}
 8003534:	bf00      	nop
 8003536:	371c      	adds	r7, #28
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	40010000 	.word	0x40010000

08003544 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003544:	b480      	push	{r7}
 8003546:	b087      	sub	sp, #28
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	f023 0210 	bic.w	r2, r3, #16
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800357a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	021b      	lsls	r3, r3, #8
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	4313      	orrs	r3, r2
 8003586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	f023 0320 	bic.w	r3, r3, #32
 800358e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	4313      	orrs	r3, r2
 800359a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a1e      	ldr	r2, [pc, #120]	@ (8003618 <TIM_OC2_SetConfig+0xd4>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d10d      	bne.n	80035c0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a15      	ldr	r2, [pc, #84]	@ (8003618 <TIM_OC2_SetConfig+0xd4>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d113      	bne.n	80035f0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80035ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80035d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	621a      	str	r2, [r3, #32]
}
 800360a:	bf00      	nop
 800360c:	371c      	adds	r7, #28
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	40010000 	.word	0x40010000

0800361c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800361c:	b480      	push	{r7}
 800361e:	b087      	sub	sp, #28
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800364a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f023 0303 	bic.w	r3, r3, #3
 8003652:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	4313      	orrs	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003664:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	021b      	lsls	r3, r3, #8
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	4313      	orrs	r3, r2
 8003670:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a1d      	ldr	r2, [pc, #116]	@ (80036ec <TIM_OC3_SetConfig+0xd0>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d10d      	bne.n	8003696 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003680:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	021b      	lsls	r3, r3, #8
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	4313      	orrs	r3, r2
 800368c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003694:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a14      	ldr	r2, [pc, #80]	@ (80036ec <TIM_OC3_SetConfig+0xd0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d113      	bne.n	80036c6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80036a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80036ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	011b      	lsls	r3, r3, #4
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	621a      	str	r2, [r3, #32]
}
 80036e0:	bf00      	nop
 80036e2:	371c      	adds	r7, #28
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	40010000 	.word	0x40010000

080036f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b087      	sub	sp, #28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800371e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	021b      	lsls	r3, r3, #8
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	4313      	orrs	r3, r2
 8003732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800373a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	031b      	lsls	r3, r3, #12
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	4313      	orrs	r3, r2
 8003746:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a10      	ldr	r2, [pc, #64]	@ (800378c <TIM_OC4_SetConfig+0x9c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d109      	bne.n	8003764 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003756:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	019b      	lsls	r3, r3, #6
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	4313      	orrs	r3, r2
 8003762:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	621a      	str	r2, [r3, #32]
}
 800377e:	bf00      	nop
 8003780:	371c      	adds	r7, #28
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	40010000 	.word	0x40010000

08003790 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d101      	bne.n	80037a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037a4:	2302      	movs	r3, #2
 80037a6:	e050      	b.n	800384a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2202      	movs	r2, #2
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a1c      	ldr	r2, [pc, #112]	@ (8003858 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d018      	beq.n	800381e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037f4:	d013      	beq.n	800381e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a18      	ldr	r2, [pc, #96]	@ (800385c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d00e      	beq.n	800381e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a16      	ldr	r2, [pc, #88]	@ (8003860 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d009      	beq.n	800381e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a15      	ldr	r2, [pc, #84]	@ (8003864 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d004      	beq.n	800381e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a13      	ldr	r2, [pc, #76]	@ (8003868 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d10c      	bne.n	8003838 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003824:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	4313      	orrs	r3, r2
 800382e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68ba      	ldr	r2, [r7, #8]
 8003836:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3714      	adds	r7, #20
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	40010000 	.word	0x40010000
 800385c:	40000400 	.word	0x40000400
 8003860:	40000800 	.word	0x40000800
 8003864:	40000c00 	.word	0x40000c00
 8003868:	40014000 	.word	0x40014000

0800386c <HAL_UART_Init>:
    uint32_t current_time = HAL_GetTick();

    // 1초마다 현재 시간 요청
    if (current_time - last_time_print >= 1000) {
      if (server_connected) {
        // 시간 요청 문자열 전송
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
        char time_request[100];
        sprintf(time_request, "[USR_SQL]GET@TIME");
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <HAL_UART_Init+0x12>
        send_message_to_server(time_request);
        //printf("🕒 서버에 시간 요청 전송\r\n");
 800387a:	2301      	movs	r3, #1
 800387c:	e042      	b.n	8003904 <HAL_UART_Init+0x98>
                sys_minutes == alarm_times[i].minute &&
                sys_seconds_only < 3) { // 초는 3초 이내 허용 (중복 알람 방지)

              printf("알람 시간 일치! 알람 %d번 시작 (내부시간: %02lu:%02lu:%02lu)\r\n",
                     i, sys_hours, sys_minutes, sys_seconds_only);

 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d106      	bne.n	8003898 <HAL_UART_Init+0x2c>
              // 현재 알람 인덱스 설정하고 부저 울림
              current_alarm_index = i;
              Buzzer_Control(true);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      last_time_print = current_time;
    }

    poll_uart6_input();

    // 알람 상태가 활성화되어 있을 때 부저 상태 관리
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7fd fe96 	bl	80015c4 <HAL_UART_MspInit>
    if (current_alarm_state == ALARM_STATE_ACTIVE) {
      // 상태 메시지를 한 번만 출력
      static bool status_printed = false;
      if (!status_printed) {
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2224      	movs	r2, #36	@ 0x24
 800389c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        printf("알람 활성화 상태\r\n");
        status_printed = true;
      }
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68da      	ldr	r2, [r3, #12]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038ae:	60da      	str	r2, [r3, #12]

      // 알람이 처음 활성화될 때 시작 시간 기록 (디버깅용으로 유지)
      static uint32_t alarm_start_time = 0;
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 fe55 	bl	8004560 <UART_SetConfig>
      if (alarm_active && alarm_start_time == 0) {
        alarm_start_time = current_time;
        printf("알람 시작 시간: %lu\r\n", alarm_start_time);
      }

 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	691a      	ldr	r2, [r3, #16]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038c4:	611a      	str	r2, [r3, #16]
        // 알람 상태 초기화
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	695a      	ldr	r2, [r3, #20]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80038d4:	615a      	str	r2, [r3, #20]
        alarm_active = false;
        current_alarm_state = ALARM_STATE_IDLE;
        alarm_start_time = 0; // 다음 알람을 위해 초기화
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68da      	ldr	r2, [r3, #12]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038e4:	60da      	str	r2, [r3, #12]
        status_printed = false;

    }
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	645a      	str	r2, [r3, #68]	@ 0x44

 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    // 오류 임계값 초과 시 리셋
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2220      	movs	r2, #32
 80038f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    if (connection_errors >= 5) {
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	635a      	str	r2, [r3, #52]	@ 0x34
      printf("연결 오류 임계값 초과, ESP 모듈 리셋\r\n");
      HAL_Delay(1000);
 8003902:	2300      	movs	r3, #0
      Reset_Connection();
 8003904:	4618      	mov	r0, r3
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <HAL_UART_Transmit>:
 800390c:	b580      	push	{r7, lr}
 800390e:	b08a      	sub	sp, #40	@ 0x28
 8003910:	af02      	add	r7, sp, #8
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	603b      	str	r3, [r7, #0]
 8003918:	4613      	mov	r3, r2
 800391a:	80fb      	strh	r3, [r7, #6]
 800391c:	2300      	movs	r3, #0
 800391e:	617b      	str	r3, [r7, #20]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b20      	cmp	r3, #32
 800392a:	d175      	bne.n	8003a18 <HAL_UART_Transmit+0x10c>
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d002      	beq.n	8003938 <HAL_UART_Transmit+0x2c>
 8003932:	88fb      	ldrh	r3, [r7, #6]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <HAL_UART_Transmit+0x30>
 8003938:	2301      	movs	r3, #1
 800393a:	e06e      	b.n	8003a1a <HAL_UART_Transmit+0x10e>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	645a      	str	r2, [r3, #68]	@ 0x44
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2221      	movs	r2, #33	@ 0x21
 8003946:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800394a:	f7fe f837 	bl	80019bc <HAL_GetTick>
 800394e:	6178      	str	r0, [r7, #20]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	88fa      	ldrh	r2, [r7, #6]
 8003954:	849a      	strh	r2, [r3, #36]	@ 0x24
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	88fa      	ldrh	r2, [r7, #6]
 800395a:	84da      	strh	r2, [r3, #38]	@ 0x26
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003964:	d108      	bne.n	8003978 <HAL_UART_Transmit+0x6c>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d104      	bne.n	8003978 <HAL_UART_Transmit+0x6c>
 800396e:	2300      	movs	r3, #0
 8003970:	61fb      	str	r3, [r7, #28]
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	61bb      	str	r3, [r7, #24]
 8003976:	e003      	b.n	8003980 <HAL_UART_Transmit+0x74>
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	61fb      	str	r3, [r7, #28]
 800397c:	2300      	movs	r3, #0
 800397e:	61bb      	str	r3, [r7, #24]
 8003980:	e02e      	b.n	80039e0 <HAL_UART_Transmit+0xd4>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	2200      	movs	r2, #0
 800398a:	2180      	movs	r1, #128	@ 0x80
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f000 fbb7 	bl	8004100 <UART_WaitOnFlagUntilTimeout>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d005      	beq.n	80039a4 <HAL_UART_Transmit+0x98>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2220      	movs	r2, #32
 800399c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80039a0:	2303      	movs	r3, #3
 80039a2:	e03a      	b.n	8003a1a <HAL_UART_Transmit+0x10e>
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10b      	bne.n	80039c2 <HAL_UART_Transmit+0xb6>
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	881b      	ldrh	r3, [r3, #0]
 80039ae:	461a      	mov	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039b8:	605a      	str	r2, [r3, #4]
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	3302      	adds	r3, #2
 80039be:	61bb      	str	r3, [r7, #24]
 80039c0:	e007      	b.n	80039d2 <HAL_UART_Transmit+0xc6>
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	781a      	ldrb	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	605a      	str	r2, [r3, #4]
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	3301      	adds	r3, #1
 80039d0:	61fb      	str	r3, [r7, #28]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	3b01      	subs	r3, #1
 80039da:	b29a      	uxth	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	84da      	strh	r2, [r3, #38]	@ 0x26
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1cb      	bne.n	8003982 <HAL_UART_Transmit+0x76>
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	2200      	movs	r2, #0
 80039f2:	2140      	movs	r1, #64	@ 0x40
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 fb83 	bl	8004100 <UART_WaitOnFlagUntilTimeout>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d005      	beq.n	8003a0c <HAL_UART_Transmit+0x100>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2220      	movs	r2, #32
 8003a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e006      	b.n	8003a1a <HAL_UART_Transmit+0x10e>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003a14:	2300      	movs	r3, #0
 8003a16:	e000      	b.n	8003a1a <HAL_UART_Transmit+0x10e>
 8003a18:	2302      	movs	r3, #2
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3720      	adds	r7, #32
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <HAL_UART_Receive>:
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b08a      	sub	sp, #40	@ 0x28
 8003a26:	af02      	add	r7, sp, #8
 8003a28:	60f8      	str	r0, [r7, #12]
 8003a2a:	60b9      	str	r1, [r7, #8]
 8003a2c:	603b      	str	r3, [r7, #0]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	80fb      	strh	r3, [r7, #6]
 8003a32:	2300      	movs	r3, #0
 8003a34:	617b      	str	r3, [r7, #20]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b20      	cmp	r3, #32
 8003a40:	f040 8081 	bne.w	8003b46 <HAL_UART_Receive+0x124>
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d002      	beq.n	8003a50 <HAL_UART_Receive+0x2e>
 8003a4a:	88fb      	ldrh	r3, [r7, #6]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d101      	bne.n	8003a54 <HAL_UART_Receive+0x32>
 8003a50:	2301      	movs	r3, #1
 8003a52:	e079      	b.n	8003b48 <HAL_UART_Receive+0x126>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	645a      	str	r2, [r3, #68]	@ 0x44
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2222      	movs	r2, #34	@ 0x22
 8003a5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a68:	f7fd ffa8 	bl	80019bc <HAL_GetTick>
 8003a6c:	6178      	str	r0, [r7, #20]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	88fa      	ldrh	r2, [r7, #6]
 8003a72:	859a      	strh	r2, [r3, #44]	@ 0x2c
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	88fa      	ldrh	r2, [r7, #6]
 8003a78:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a82:	d108      	bne.n	8003a96 <HAL_UART_Receive+0x74>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d104      	bne.n	8003a96 <HAL_UART_Receive+0x74>
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	61fb      	str	r3, [r7, #28]
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	61bb      	str	r3, [r7, #24]
 8003a94:	e003      	b.n	8003a9e <HAL_UART_Receive+0x7c>
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	61fb      	str	r3, [r7, #28]
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	61bb      	str	r3, [r7, #24]
 8003a9e:	e047      	b.n	8003b30 <HAL_UART_Receive+0x10e>
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	2120      	movs	r1, #32
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f000 fb28 	bl	8004100 <UART_WaitOnFlagUntilTimeout>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d005      	beq.n	8003ac2 <HAL_UART_Receive+0xa0>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e042      	b.n	8003b48 <HAL_UART_Receive+0x126>
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10c      	bne.n	8003ae2 <HAL_UART_Receive+0xc0>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	801a      	strh	r2, [r3, #0]
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	3302      	adds	r3, #2
 8003ade:	61bb      	str	r3, [r7, #24]
 8003ae0:	e01f      	b.n	8003b22 <HAL_UART_Receive+0x100>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aea:	d007      	beq.n	8003afc <HAL_UART_Receive+0xda>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10a      	bne.n	8003b0a <HAL_UART_Receive+0xe8>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d106      	bne.n	8003b0a <HAL_UART_Receive+0xe8>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	b2da      	uxtb	r2, r3
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	701a      	strb	r2, [r3, #0]
 8003b08:	e008      	b.n	8003b1c <HAL_UART_Receive+0xfa>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	701a      	strb	r2, [r3, #0]
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	3301      	adds	r3, #1
 8003b20:	61fb      	str	r3, [r7, #28]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1b2      	bne.n	8003aa0 <HAL_UART_Receive+0x7e>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b42:	2300      	movs	r3, #0
 8003b44:	e000      	b.n	8003b48 <HAL_UART_Receive+0x126>
 8003b46:	2302      	movs	r3, #2
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3720      	adds	r7, #32
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_UART_Receive_IT>:
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	80fb      	strh	r3, [r7, #6]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b20      	cmp	r3, #32
 8003b68:	d112      	bne.n	8003b90 <HAL_UART_Receive_IT+0x40>
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d002      	beq.n	8003b76 <HAL_UART_Receive_IT+0x26>
 8003b70:	88fb      	ldrh	r3, [r7, #6]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_UART_Receive_IT+0x2a>
 8003b76:	2301      	movs	r3, #1
 8003b78:	e00b      	b.n	8003b92 <HAL_UART_Receive_IT+0x42>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b80:	88fb      	ldrh	r3, [r7, #6]
 8003b82:	461a      	mov	r2, r3
 8003b84:	68b9      	ldr	r1, [r7, #8]
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 fb13 	bl	80041b2 <UART_Start_Receive_IT>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	e000      	b.n	8003b92 <HAL_UART_Receive_IT+0x42>
 8003b90:	2302      	movs	r3, #2
 8003b92:	4618      	mov	r0, r3
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
	...

08003b9c <HAL_UART_IRQHandler>:
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b0ba      	sub	sp, #232	@ 0xe8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003bc8:	2300      	movs	r3, #0
 8003bca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bd2:	f003 030f 	and.w	r3, r3, #15
 8003bd6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003bda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10f      	bne.n	8003c02 <HAL_UART_IRQHandler+0x66>
 8003be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003be6:	f003 0320 	and.w	r3, r3, #32
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d009      	beq.n	8003c02 <HAL_UART_IRQHandler+0x66>
 8003bee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bf2:	f003 0320 	and.w	r3, r3, #32
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_UART_IRQHandler+0x66>
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 fbf2 	bl	80043e4 <UART_Receive_IT>
 8003c00:	e25b      	b.n	80040ba <HAL_UART_IRQHandler+0x51e>
 8003c02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 80de 	beq.w	8003dc8 <HAL_UART_IRQHandler+0x22c>
 8003c0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d106      	bne.n	8003c26 <HAL_UART_IRQHandler+0x8a>
 8003c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c1c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 80d1 	beq.w	8003dc8 <HAL_UART_IRQHandler+0x22c>
 8003c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00b      	beq.n	8003c4a <HAL_UART_IRQHandler+0xae>
 8003c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d005      	beq.n	8003c4a <HAL_UART_IRQHandler+0xae>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c42:	f043 0201 	orr.w	r2, r3, #1
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	645a      	str	r2, [r3, #68]	@ 0x44
 8003c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c4e:	f003 0304 	and.w	r3, r3, #4
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00b      	beq.n	8003c6e <HAL_UART_IRQHandler+0xd2>
 8003c56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d005      	beq.n	8003c6e <HAL_UART_IRQHandler+0xd2>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c66:	f043 0202 	orr.w	r2, r3, #2
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	645a      	str	r2, [r3, #68]	@ 0x44
 8003c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00b      	beq.n	8003c92 <HAL_UART_IRQHandler+0xf6>
 8003c7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d005      	beq.n	8003c92 <HAL_UART_IRQHandler+0xf6>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c8a:	f043 0204 	orr.w	r2, r3, #4
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	645a      	str	r2, [r3, #68]	@ 0x44
 8003c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c96:	f003 0308 	and.w	r3, r3, #8
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d011      	beq.n	8003cc2 <HAL_UART_IRQHandler+0x126>
 8003c9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ca2:	f003 0320 	and.w	r3, r3, #32
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d105      	bne.n	8003cb6 <HAL_UART_IRQHandler+0x11a>
 8003caa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d005      	beq.n	8003cc2 <HAL_UART_IRQHandler+0x126>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cba:	f043 0208 	orr.w	r2, r3, #8
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	645a      	str	r2, [r3, #68]	@ 0x44
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f000 81f2 	beq.w	80040b0 <HAL_UART_IRQHandler+0x514>
 8003ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cd0:	f003 0320 	and.w	r3, r3, #32
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d008      	beq.n	8003cea <HAL_UART_IRQHandler+0x14e>
 8003cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cdc:	f003 0320 	and.w	r3, r3, #32
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d002      	beq.n	8003cea <HAL_UART_IRQHandler+0x14e>
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 fb7d 	bl	80043e4 <UART_Receive_IT>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf4:	2b40      	cmp	r3, #64	@ 0x40
 8003cf6:	bf0c      	ite	eq
 8003cf8:	2301      	moveq	r3, #1
 8003cfa:	2300      	movne	r3, #0
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d103      	bne.n	8003d16 <HAL_UART_IRQHandler+0x17a>
 8003d0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d04f      	beq.n	8003db6 <HAL_UART_IRQHandler+0x21a>
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 fa85 	bl	8004226 <UART_EndRxTransfer>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d26:	2b40      	cmp	r3, #64	@ 0x40
 8003d28:	d141      	bne.n	8003dae <HAL_UART_IRQHandler+0x212>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	3314      	adds	r3, #20
 8003d30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d34:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d38:	e853 3f00 	ldrex	r3, [r3]
 8003d3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003d40:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	3314      	adds	r3, #20
 8003d52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003d56:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003d5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003d62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003d66:	e841 2300 	strex	r3, r2, [r1]
 8003d6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003d6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1d9      	bne.n	8003d2a <HAL_UART_IRQHandler+0x18e>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d013      	beq.n	8003da6 <HAL_UART_IRQHandler+0x20a>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d82:	4a7e      	ldr	r2, [pc, #504]	@ (8003f7c <HAL_UART_IRQHandler+0x3e0>)
 8003d84:	651a      	str	r2, [r3, #80]	@ 0x50
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7fe fa39 	bl	8002202 <HAL_DMA_Abort_IT>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d016      	beq.n	8003dc4 <HAL_UART_IRQHandler+0x228>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003da0:	4610      	mov	r0, r2
 8003da2:	4798      	blx	r3
 8003da4:	e00e      	b.n	8003dc4 <HAL_UART_IRQHandler+0x228>
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f994 	bl	80040d4 <HAL_UART_ErrorCallback>
 8003dac:	e00a      	b.n	8003dc4 <HAL_UART_IRQHandler+0x228>
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f990 	bl	80040d4 <HAL_UART_ErrorCallback>
 8003db4:	e006      	b.n	8003dc4 <HAL_UART_IRQHandler+0x228>
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f98c 	bl	80040d4 <HAL_UART_ErrorCallback>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	645a      	str	r2, [r3, #68]	@ 0x44
 8003dc2:	e175      	b.n	80040b0 <HAL_UART_IRQHandler+0x514>
 8003dc4:	bf00      	nop
 8003dc6:	e173      	b.n	80040b0 <HAL_UART_IRQHandler+0x514>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	f040 814f 	bne.w	8004070 <HAL_UART_IRQHandler+0x4d4>
 8003dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dd6:	f003 0310 	and.w	r3, r3, #16
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 8148 	beq.w	8004070 <HAL_UART_IRQHandler+0x4d4>
 8003de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003de4:	f003 0310 	and.w	r3, r3, #16
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 8141 	beq.w	8004070 <HAL_UART_IRQHandler+0x4d4>
 8003dee:	2300      	movs	r3, #0
 8003df0:	60bb      	str	r3, [r7, #8]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	60bb      	str	r3, [r7, #8]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	60bb      	str	r3, [r7, #8]
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e0e:	2b40      	cmp	r3, #64	@ 0x40
 8003e10:	f040 80b6 	bne.w	8003f80 <HAL_UART_IRQHandler+0x3e4>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
 8003e20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 8145 	beq.w	80040b4 <HAL_UART_IRQHandler+0x518>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e32:	429a      	cmp	r2, r3
 8003e34:	f080 813e 	bcs.w	80040b4 <HAL_UART_IRQHandler+0x518>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e3e:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e4a:	f000 8088 	beq.w	8003f5e <HAL_UART_IRQHandler+0x3c2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	330c      	adds	r3, #12
 8003e54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e58:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e5c:	e853 3f00 	ldrex	r3, [r3]
 8003e60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003e64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	330c      	adds	r3, #12
 8003e76:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003e7a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e82:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003e86:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003e8a:	e841 2300 	strex	r3, r2, [r1]
 8003e8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003e92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1d9      	bne.n	8003e4e <HAL_UART_IRQHandler+0x2b2>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	3314      	adds	r3, #20
 8003ea0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ea4:	e853 3f00 	ldrex	r3, [r3]
 8003ea8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003eaa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003eac:	f023 0301 	bic.w	r3, r3, #1
 8003eb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	3314      	adds	r3, #20
 8003eba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003ebe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003ec2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003ec6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003eca:	e841 2300 	strex	r3, r2, [r1]
 8003ece:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003ed0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1e1      	bne.n	8003e9a <HAL_UART_IRQHandler+0x2fe>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	3314      	adds	r3, #20
 8003edc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ede:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ee0:	e853 3f00 	ldrex	r3, [r3]
 8003ee4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003ee6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ee8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003eec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3314      	adds	r3, #20
 8003ef6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003efa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003efc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003f00:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003f02:	e841 2300 	strex	r3, r2, [r1]
 8003f06:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003f08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1e3      	bne.n	8003ed6 <HAL_UART_IRQHandler+0x33a>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2220      	movs	r2, #32
 8003f12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	330c      	adds	r3, #12
 8003f22:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f26:	e853 3f00 	ldrex	r3, [r3]
 8003f2a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003f2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f2e:	f023 0310 	bic.w	r3, r3, #16
 8003f32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	330c      	adds	r3, #12
 8003f3c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003f40:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003f42:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f44:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f46:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f48:	e841 2300 	strex	r3, r2, [r1]
 8003f4c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003f4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1e3      	bne.n	8003f1c <HAL_UART_IRQHandler+0x380>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7fe f8e2 	bl	8002122 <HAL_DMA_Abort>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2202      	movs	r2, #2
 8003f62:	635a      	str	r2, [r3, #52]	@ 0x34
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	4619      	mov	r1, r3
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f8b7 	bl	80040e8 <HAL_UARTEx_RxEventCallback>
 8003f7a:	e09b      	b.n	80040b4 <HAL_UART_IRQHandler+0x518>
 8003f7c:	080042ed 	.word	0x080042ed
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 808e 	beq.w	80040b8 <HAL_UART_IRQHandler+0x51c>
 8003f9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f000 8089 	beq.w	80040b8 <HAL_UART_IRQHandler+0x51c>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	330c      	adds	r3, #12
 8003fac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb0:	e853 3f00 	ldrex	r3, [r3]
 8003fb4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003fb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fb8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fbc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	330c      	adds	r3, #12
 8003fc6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003fca:	647a      	str	r2, [r7, #68]	@ 0x44
 8003fcc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003fd0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fd2:	e841 2300 	strex	r3, r2, [r1]
 8003fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003fd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1e3      	bne.n	8003fa6 <HAL_UART_IRQHandler+0x40a>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3314      	adds	r3, #20
 8003fe4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe8:	e853 3f00 	ldrex	r3, [r3]
 8003fec:	623b      	str	r3, [r7, #32]
   return(result);
 8003fee:	6a3b      	ldr	r3, [r7, #32]
 8003ff0:	f023 0301 	bic.w	r3, r3, #1
 8003ff4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	3314      	adds	r3, #20
 8003ffe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004002:	633a      	str	r2, [r7, #48]	@ 0x30
 8004004:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004006:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004008:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800400a:	e841 2300 	strex	r3, r2, [r1]
 800400e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1e3      	bne.n	8003fde <HAL_UART_IRQHandler+0x442>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2220      	movs	r2, #32
 800401a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	631a      	str	r2, [r3, #48]	@ 0x30
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	330c      	adds	r3, #12
 800402a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	e853 3f00 	ldrex	r3, [r3]
 8004032:	60fb      	str	r3, [r7, #12]
   return(result);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f023 0310 	bic.w	r3, r3, #16
 800403a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	330c      	adds	r3, #12
 8004044:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004048:	61fa      	str	r2, [r7, #28]
 800404a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404c:	69b9      	ldr	r1, [r7, #24]
 800404e:	69fa      	ldr	r2, [r7, #28]
 8004050:	e841 2300 	strex	r3, r2, [r1]
 8004054:	617b      	str	r3, [r7, #20]
   return(result);
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1e3      	bne.n	8004024 <HAL_UART_IRQHandler+0x488>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2202      	movs	r2, #2
 8004060:	635a      	str	r2, [r3, #52]	@ 0x34
 8004062:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004066:	4619      	mov	r1, r3
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 f83d 	bl	80040e8 <HAL_UARTEx_RxEventCallback>
 800406e:	e023      	b.n	80040b8 <HAL_UART_IRQHandler+0x51c>
 8004070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004074:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004078:	2b00      	cmp	r3, #0
 800407a:	d009      	beq.n	8004090 <HAL_UART_IRQHandler+0x4f4>
 800407c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004080:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004084:	2b00      	cmp	r3, #0
 8004086:	d003      	beq.n	8004090 <HAL_UART_IRQHandler+0x4f4>
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 f943 	bl	8004314 <UART_Transmit_IT>
 800408e:	e014      	b.n	80040ba <HAL_UART_IRQHandler+0x51e>
 8004090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00e      	beq.n	80040ba <HAL_UART_IRQHandler+0x51e>
 800409c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d008      	beq.n	80040ba <HAL_UART_IRQHandler+0x51e>
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f983 	bl	80043b4 <UART_EndTransmit_IT>
 80040ae:	e004      	b.n	80040ba <HAL_UART_IRQHandler+0x51e>
 80040b0:	bf00      	nop
 80040b2:	e002      	b.n	80040ba <HAL_UART_IRQHandler+0x51e>
 80040b4:	bf00      	nop
 80040b6:	e000      	b.n	80040ba <HAL_UART_IRQHandler+0x51e>
 80040b8:	bf00      	nop
 80040ba:	37e8      	adds	r7, #232	@ 0xe8
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <HAL_UART_TxCpltCallback>:
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <HAL_UART_ErrorCallback>:
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <HAL_UARTEx_RxEventCallback>:
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	460b      	mov	r3, r1
 80040f2:	807b      	strh	r3, [r7, #2]
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <UART_WaitOnFlagUntilTimeout>:
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	603b      	str	r3, [r7, #0]
 800410c:	4613      	mov	r3, r2
 800410e:	71fb      	strb	r3, [r7, #7]
 8004110:	e03b      	b.n	800418a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004112:	6a3b      	ldr	r3, [r7, #32]
 8004114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004118:	d037      	beq.n	800418a <UART_WaitOnFlagUntilTimeout+0x8a>
 800411a:	f7fd fc4f 	bl	80019bc <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	6a3a      	ldr	r2, [r7, #32]
 8004126:	429a      	cmp	r2, r3
 8004128:	d302      	bcc.n	8004130 <UART_WaitOnFlagUntilTimeout+0x30>
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <UART_WaitOnFlagUntilTimeout+0x34>
 8004130:	2303      	movs	r3, #3
 8004132:	e03a      	b.n	80041aa <UART_WaitOnFlagUntilTimeout+0xaa>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	f003 0304 	and.w	r3, r3, #4
 800413e:	2b00      	cmp	r3, #0
 8004140:	d023      	beq.n	800418a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	2b80      	cmp	r3, #128	@ 0x80
 8004146:	d020      	beq.n	800418a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	2b40      	cmp	r3, #64	@ 0x40
 800414c:	d01d      	beq.n	800418a <UART_WaitOnFlagUntilTimeout+0x8a>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0308 	and.w	r3, r3, #8
 8004158:	2b08      	cmp	r3, #8
 800415a:	d116      	bne.n	800418a <UART_WaitOnFlagUntilTimeout+0x8a>
 800415c:	2300      	movs	r3, #0
 800415e:	617b      	str	r3, [r7, #20]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	617b      	str	r3, [r7, #20]
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f000 f857 	bl	8004226 <UART_EndRxTransfer>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2208      	movs	r2, #8
 800417c:	645a      	str	r2, [r3, #68]	@ 0x44
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004186:	2301      	movs	r3, #1
 8004188:	e00f      	b.n	80041aa <UART_WaitOnFlagUntilTimeout+0xaa>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	4013      	ands	r3, r2
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	429a      	cmp	r2, r3
 8004198:	bf0c      	ite	eq
 800419a:	2301      	moveq	r3, #1
 800419c:	2300      	movne	r3, #0
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	461a      	mov	r2, r3
 80041a2:	79fb      	ldrb	r3, [r7, #7]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d0b4      	beq.n	8004112 <UART_WaitOnFlagUntilTimeout+0x12>
 80041a8:	2300      	movs	r3, #0
 80041aa:	4618      	mov	r0, r3
 80041ac:	3718      	adds	r7, #24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <UART_Start_Receive_IT>:
 80041b2:	b480      	push	{r7}
 80041b4:	b085      	sub	sp, #20
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	60f8      	str	r0, [r7, #12]
 80041ba:	60b9      	str	r1, [r7, #8]
 80041bc:	4613      	mov	r3, r2
 80041be:	80fb      	strh	r3, [r7, #6]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	88fa      	ldrh	r2, [r7, #6]
 80041ca:	859a      	strh	r2, [r3, #44]	@ 0x2c
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	88fa      	ldrh	r2, [r7, #6]
 80041d0:	85da      	strh	r2, [r3, #46]	@ 0x2e
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	645a      	str	r2, [r3, #68]	@ 0x44
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2222      	movs	r2, #34	@ 0x22
 80041dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d007      	beq.n	80041f8 <UART_Start_Receive_IT+0x46>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68da      	ldr	r2, [r3, #12]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041f6:	60da      	str	r2, [r3, #12]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	695a      	ldr	r2, [r3, #20]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f042 0201 	orr.w	r2, r2, #1
 8004206:	615a      	str	r2, [r3, #20]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68da      	ldr	r2, [r3, #12]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 0220 	orr.w	r2, r2, #32
 8004216:	60da      	str	r2, [r3, #12]
 8004218:	2300      	movs	r3, #0
 800421a:	4618      	mov	r0, r3
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <UART_EndRxTransfer>:
 8004226:	b480      	push	{r7}
 8004228:	b095      	sub	sp, #84	@ 0x54
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	330c      	adds	r3, #12
 8004234:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004238:	e853 3f00 	ldrex	r3, [r3]
 800423c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800423e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004240:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004244:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	330c      	adds	r3, #12
 800424c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800424e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004250:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004252:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004254:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004256:	e841 2300 	strex	r3, r2, [r1]
 800425a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800425c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1e5      	bne.n	800422e <UART_EndRxTransfer+0x8>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	3314      	adds	r3, #20
 8004268:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	e853 3f00 	ldrex	r3, [r3]
 8004270:	61fb      	str	r3, [r7, #28]
   return(result);
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	f023 0301 	bic.w	r3, r3, #1
 8004278:	64bb      	str	r3, [r7, #72]	@ 0x48
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	3314      	adds	r3, #20
 8004280:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004282:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004284:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004286:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004288:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800428a:	e841 2300 	strex	r3, r2, [r1]
 800428e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1e5      	bne.n	8004262 <UART_EndRxTransfer+0x3c>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800429a:	2b01      	cmp	r3, #1
 800429c:	d119      	bne.n	80042d2 <UART_EndRxTransfer+0xac>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	330c      	adds	r3, #12
 80042a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	e853 3f00 	ldrex	r3, [r3]
 80042ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	f023 0310 	bic.w	r3, r3, #16
 80042b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	330c      	adds	r3, #12
 80042bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042be:	61ba      	str	r2, [r7, #24]
 80042c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c2:	6979      	ldr	r1, [r7, #20]
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	e841 2300 	strex	r3, r2, [r1]
 80042ca:	613b      	str	r3, [r7, #16]
   return(result);
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1e5      	bne.n	800429e <UART_EndRxTransfer+0x78>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2220      	movs	r2, #32
 80042d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	631a      	str	r2, [r3, #48]	@ 0x30
 80042e0:	bf00      	nop
 80042e2:	3754      	adds	r7, #84	@ 0x54
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <UART_DMAAbortOnError>:
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f8:	60fb      	str	r3, [r7, #12]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	84da      	strh	r2, [r3, #38]	@ 0x26
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f7ff fee4 	bl	80040d4 <HAL_UART_ErrorCallback>
 800430c:	bf00      	nop
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <UART_Transmit_IT>:
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b21      	cmp	r3, #33	@ 0x21
 8004326:	d13e      	bne.n	80043a6 <UART_Transmit_IT+0x92>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004330:	d114      	bne.n	800435c <UART_Transmit_IT+0x48>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d110      	bne.n	800435c <UART_Transmit_IT+0x48>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	881b      	ldrh	r3, [r3, #0]
 8004344:	461a      	mov	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800434e:	605a      	str	r2, [r3, #4]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	1c9a      	adds	r2, r3, #2
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	621a      	str	r2, [r3, #32]
 800435a:	e008      	b.n	800436e <UART_Transmit_IT+0x5a>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	1c59      	adds	r1, r3, #1
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	6211      	str	r1, [r2, #32]
 8004366:	781a      	ldrb	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	605a      	str	r2, [r3, #4]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004372:	b29b      	uxth	r3, r3
 8004374:	3b01      	subs	r3, #1
 8004376:	b29b      	uxth	r3, r3
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	4619      	mov	r1, r3
 800437c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10f      	bne.n	80043a2 <UART_Transmit_IT+0x8e>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68da      	ldr	r2, [r3, #12]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004390:	60da      	str	r2, [r3, #12]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68da      	ldr	r2, [r3, #12]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043a0:	60da      	str	r2, [r3, #12]
 80043a2:	2300      	movs	r3, #0
 80043a4:	e000      	b.n	80043a8 <UART_Transmit_IT+0x94>
 80043a6:	2302      	movs	r3, #2
 80043a8:	4618      	mov	r0, r3
 80043aa:	3714      	adds	r7, #20
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <UART_EndTransmit_IT>:
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68da      	ldr	r2, [r3, #12]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043ca:	60da      	str	r2, [r3, #12]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2220      	movs	r2, #32
 80043d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f7ff fe73 	bl	80040c0 <HAL_UART_TxCpltCallback>
 80043da:	2300      	movs	r3, #0
 80043dc:	4618      	mov	r0, r3
 80043de:	3708      	adds	r7, #8
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <UART_Receive_IT>:
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b08c      	sub	sp, #48	@ 0x30
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b22      	cmp	r3, #34	@ 0x22
 80043f6:	f040 80ae 	bne.w	8004556 <UART_Receive_IT+0x172>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004402:	d117      	bne.n	8004434 <UART_Receive_IT+0x50>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d113      	bne.n	8004434 <UART_Receive_IT+0x50>
 800440c:	2300      	movs	r3, #0
 800440e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004414:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	b29b      	uxth	r3, r3
 800441e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004422:	b29a      	uxth	r2, r3
 8004424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004426:	801a      	strh	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800442c:	1c9a      	adds	r2, r3, #2
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	629a      	str	r2, [r3, #40]	@ 0x28
 8004432:	e026      	b.n	8004482 <UART_Receive_IT+0x9e>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004438:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800443a:	2300      	movs	r3, #0
 800443c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004446:	d007      	beq.n	8004458 <UART_Receive_IT+0x74>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10a      	bne.n	8004466 <UART_Receive_IT+0x82>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d106      	bne.n	8004466 <UART_Receive_IT+0x82>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	b2da      	uxtb	r2, r3
 8004460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004462:	701a      	strb	r2, [r3, #0]
 8004464:	e008      	b.n	8004478 <UART_Receive_IT+0x94>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	b2db      	uxtb	r3, r3
 800446e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004472:	b2da      	uxtb	r2, r3
 8004474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004476:	701a      	strb	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800447c:	1c5a      	adds	r2, r3, #1
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	629a      	str	r2, [r3, #40]	@ 0x28
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004486:	b29b      	uxth	r3, r3
 8004488:	3b01      	subs	r3, #1
 800448a:	b29b      	uxth	r3, r3
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	4619      	mov	r1, r3
 8004490:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004492:	2b00      	cmp	r3, #0
 8004494:	d15d      	bne.n	8004552 <UART_Receive_IT+0x16e>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68da      	ldr	r2, [r3, #12]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 0220 	bic.w	r2, r2, #32
 80044a4:	60da      	str	r2, [r3, #12]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68da      	ldr	r2, [r3, #12]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044b4:	60da      	str	r2, [r3, #12]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	695a      	ldr	r2, [r3, #20]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f022 0201 	bic.w	r2, r2, #1
 80044c4:	615a      	str	r2, [r3, #20]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2220      	movs	r2, #32
 80044ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	635a      	str	r2, [r3, #52]	@ 0x34
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d135      	bne.n	8004548 <UART_Receive_IT+0x164>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	330c      	adds	r3, #12
 80044e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	e853 3f00 	ldrex	r3, [r3]
 80044f0:	613b      	str	r3, [r7, #16]
   return(result);
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	f023 0310 	bic.w	r3, r3, #16
 80044f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	330c      	adds	r3, #12
 8004500:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004502:	623a      	str	r2, [r7, #32]
 8004504:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004506:	69f9      	ldr	r1, [r7, #28]
 8004508:	6a3a      	ldr	r2, [r7, #32]
 800450a:	e841 2300 	strex	r3, r2, [r1]
 800450e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1e5      	bne.n	80044e2 <UART_Receive_IT+0xfe>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0310 	and.w	r3, r3, #16
 8004520:	2b10      	cmp	r3, #16
 8004522:	d10a      	bne.n	800453a <UART_Receive_IT+0x156>
 8004524:	2300      	movs	r3, #0
 8004526:	60fb      	str	r3, [r7, #12]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	60fb      	str	r3, [r7, #12]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	60fb      	str	r3, [r7, #12]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800453e:	4619      	mov	r1, r3
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f7ff fdd1 	bl	80040e8 <HAL_UARTEx_RxEventCallback>
 8004546:	e002      	b.n	800454e <UART_Receive_IT+0x16a>
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f7fc f8b3 	bl	80006b4 <HAL_UART_RxCpltCallback>
 800454e:	2300      	movs	r3, #0
 8004550:	e002      	b.n	8004558 <UART_Receive_IT+0x174>
 8004552:	2300      	movs	r3, #0
 8004554:	e000      	b.n	8004558 <UART_Receive_IT+0x174>
 8004556:	2302      	movs	r3, #2
 8004558:	4618      	mov	r0, r3
 800455a:	3730      	adds	r7, #48	@ 0x30
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <UART_SetConfig>:
 8004560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004564:	b0c0      	sub	sp, #256	@ 0x100
 8004566:	af00      	add	r7, sp, #0
 8004568:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
 800456c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800457c:	68d9      	ldr	r1, [r3, #12]
 800457e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	ea40 0301 	orr.w	r3, r0, r1
 8004588:	6113      	str	r3, [r2, #16]
 800458a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	431a      	orrs	r2, r3
 8004598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	431a      	orrs	r2, r3
 80045a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80045ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80045b8:	f021 010c 	bic.w	r1, r1, #12
 80045bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80045c6:	430b      	orrs	r3, r1
 80045c8:	60d3      	str	r3, [r2, #12]
 80045ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80045d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045da:	6999      	ldr	r1, [r3, #24]
 80045dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	ea40 0301 	orr.w	r3, r0, r1
 80045e6:	6153      	str	r3, [r2, #20]
 80045e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	4b8f      	ldr	r3, [pc, #572]	@ (800482c <UART_SetConfig+0x2cc>)
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d005      	beq.n	8004600 <UART_SetConfig+0xa0>
 80045f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	4b8d      	ldr	r3, [pc, #564]	@ (8004830 <UART_SetConfig+0x2d0>)
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d104      	bne.n	800460a <UART_SetConfig+0xaa>
 8004600:	f7fe fd88 	bl	8003114 <HAL_RCC_GetPCLK2Freq>
 8004604:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004608:	e003      	b.n	8004612 <UART_SetConfig+0xb2>
 800460a:	f7fe fd6f 	bl	80030ec <HAL_RCC_GetPCLK1Freq>
 800460e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004616:	69db      	ldr	r3, [r3, #28]
 8004618:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800461c:	f040 810c 	bne.w	8004838 <UART_SetConfig+0x2d8>
 8004620:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004624:	2200      	movs	r2, #0
 8004626:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800462a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800462e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004632:	4622      	mov	r2, r4
 8004634:	462b      	mov	r3, r5
 8004636:	1891      	adds	r1, r2, r2
 8004638:	65b9      	str	r1, [r7, #88]	@ 0x58
 800463a:	415b      	adcs	r3, r3
 800463c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800463e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004642:	4621      	mov	r1, r4
 8004644:	eb12 0801 	adds.w	r8, r2, r1
 8004648:	4629      	mov	r1, r5
 800464a:	eb43 0901 	adc.w	r9, r3, r1
 800464e:	f04f 0200 	mov.w	r2, #0
 8004652:	f04f 0300 	mov.w	r3, #0
 8004656:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800465a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800465e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004662:	4690      	mov	r8, r2
 8004664:	4699      	mov	r9, r3
 8004666:	4623      	mov	r3, r4
 8004668:	eb18 0303 	adds.w	r3, r8, r3
 800466c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004670:	462b      	mov	r3, r5
 8004672:	eb49 0303 	adc.w	r3, r9, r3
 8004676:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800467a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004686:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800468a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800468e:	460b      	mov	r3, r1
 8004690:	18db      	adds	r3, r3, r3
 8004692:	653b      	str	r3, [r7, #80]	@ 0x50
 8004694:	4613      	mov	r3, r2
 8004696:	eb42 0303 	adc.w	r3, r2, r3
 800469a:	657b      	str	r3, [r7, #84]	@ 0x54
 800469c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80046a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80046a4:	f7fb fdf4 	bl	8000290 <__aeabi_uldivmod>
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	4b61      	ldr	r3, [pc, #388]	@ (8004834 <UART_SetConfig+0x2d4>)
 80046ae:	fba3 2302 	umull	r2, r3, r3, r2
 80046b2:	095b      	lsrs	r3, r3, #5
 80046b4:	011c      	lsls	r4, r3, #4
 80046b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046ba:	2200      	movs	r2, #0
 80046bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80046c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80046c8:	4642      	mov	r2, r8
 80046ca:	464b      	mov	r3, r9
 80046cc:	1891      	adds	r1, r2, r2
 80046ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80046d0:	415b      	adcs	r3, r3
 80046d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80046d8:	4641      	mov	r1, r8
 80046da:	eb12 0a01 	adds.w	sl, r2, r1
 80046de:	4649      	mov	r1, r9
 80046e0:	eb43 0b01 	adc.w	fp, r3, r1
 80046e4:	f04f 0200 	mov.w	r2, #0
 80046e8:	f04f 0300 	mov.w	r3, #0
 80046ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046f8:	4692      	mov	sl, r2
 80046fa:	469b      	mov	fp, r3
 80046fc:	4643      	mov	r3, r8
 80046fe:	eb1a 0303 	adds.w	r3, sl, r3
 8004702:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004706:	464b      	mov	r3, r9
 8004708:	eb4b 0303 	adc.w	r3, fp, r3
 800470c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800471c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004720:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004724:	460b      	mov	r3, r1
 8004726:	18db      	adds	r3, r3, r3
 8004728:	643b      	str	r3, [r7, #64]	@ 0x40
 800472a:	4613      	mov	r3, r2
 800472c:	eb42 0303 	adc.w	r3, r2, r3
 8004730:	647b      	str	r3, [r7, #68]	@ 0x44
 8004732:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004736:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800473a:	f7fb fda9 	bl	8000290 <__aeabi_uldivmod>
 800473e:	4602      	mov	r2, r0
 8004740:	460b      	mov	r3, r1
 8004742:	4611      	mov	r1, r2
 8004744:	4b3b      	ldr	r3, [pc, #236]	@ (8004834 <UART_SetConfig+0x2d4>)
 8004746:	fba3 2301 	umull	r2, r3, r3, r1
 800474a:	095b      	lsrs	r3, r3, #5
 800474c:	2264      	movs	r2, #100	@ 0x64
 800474e:	fb02 f303 	mul.w	r3, r2, r3
 8004752:	1acb      	subs	r3, r1, r3
 8004754:	00db      	lsls	r3, r3, #3
 8004756:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800475a:	4b36      	ldr	r3, [pc, #216]	@ (8004834 <UART_SetConfig+0x2d4>)
 800475c:	fba3 2302 	umull	r2, r3, r3, r2
 8004760:	095b      	lsrs	r3, r3, #5
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004768:	441c      	add	r4, r3
 800476a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800476e:	2200      	movs	r2, #0
 8004770:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004774:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004778:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800477c:	4642      	mov	r2, r8
 800477e:	464b      	mov	r3, r9
 8004780:	1891      	adds	r1, r2, r2
 8004782:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004784:	415b      	adcs	r3, r3
 8004786:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004788:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800478c:	4641      	mov	r1, r8
 800478e:	1851      	adds	r1, r2, r1
 8004790:	6339      	str	r1, [r7, #48]	@ 0x30
 8004792:	4649      	mov	r1, r9
 8004794:	414b      	adcs	r3, r1
 8004796:	637b      	str	r3, [r7, #52]	@ 0x34
 8004798:	f04f 0200 	mov.w	r2, #0
 800479c:	f04f 0300 	mov.w	r3, #0
 80047a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80047a4:	4659      	mov	r1, fp
 80047a6:	00cb      	lsls	r3, r1, #3
 80047a8:	4651      	mov	r1, sl
 80047aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047ae:	4651      	mov	r1, sl
 80047b0:	00ca      	lsls	r2, r1, #3
 80047b2:	4610      	mov	r0, r2
 80047b4:	4619      	mov	r1, r3
 80047b6:	4603      	mov	r3, r0
 80047b8:	4642      	mov	r2, r8
 80047ba:	189b      	adds	r3, r3, r2
 80047bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047c0:	464b      	mov	r3, r9
 80047c2:	460a      	mov	r2, r1
 80047c4:	eb42 0303 	adc.w	r3, r2, r3
 80047c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80047d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80047dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80047e0:	460b      	mov	r3, r1
 80047e2:	18db      	adds	r3, r3, r3
 80047e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047e6:	4613      	mov	r3, r2
 80047e8:	eb42 0303 	adc.w	r3, r2, r3
 80047ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80047f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80047f6:	f7fb fd4b 	bl	8000290 <__aeabi_uldivmod>
 80047fa:	4602      	mov	r2, r0
 80047fc:	460b      	mov	r3, r1
 80047fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004834 <UART_SetConfig+0x2d4>)
 8004800:	fba3 1302 	umull	r1, r3, r3, r2
 8004804:	095b      	lsrs	r3, r3, #5
 8004806:	2164      	movs	r1, #100	@ 0x64
 8004808:	fb01 f303 	mul.w	r3, r1, r3
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	3332      	adds	r3, #50	@ 0x32
 8004812:	4a08      	ldr	r2, [pc, #32]	@ (8004834 <UART_SetConfig+0x2d4>)
 8004814:	fba2 2303 	umull	r2, r3, r2, r3
 8004818:	095b      	lsrs	r3, r3, #5
 800481a:	f003 0207 	and.w	r2, r3, #7
 800481e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4422      	add	r2, r4
 8004826:	609a      	str	r2, [r3, #8]
 8004828:	e106      	b.n	8004a38 <UART_SetConfig+0x4d8>
 800482a:	bf00      	nop
 800482c:	40011000 	.word	0x40011000
 8004830:	40011400 	.word	0x40011400
 8004834:	51eb851f 	.word	0x51eb851f
 8004838:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800483c:	2200      	movs	r2, #0
 800483e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004842:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004846:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800484a:	4642      	mov	r2, r8
 800484c:	464b      	mov	r3, r9
 800484e:	1891      	adds	r1, r2, r2
 8004850:	6239      	str	r1, [r7, #32]
 8004852:	415b      	adcs	r3, r3
 8004854:	627b      	str	r3, [r7, #36]	@ 0x24
 8004856:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800485a:	4641      	mov	r1, r8
 800485c:	1854      	adds	r4, r2, r1
 800485e:	4649      	mov	r1, r9
 8004860:	eb43 0501 	adc.w	r5, r3, r1
 8004864:	f04f 0200 	mov.w	r2, #0
 8004868:	f04f 0300 	mov.w	r3, #0
 800486c:	00eb      	lsls	r3, r5, #3
 800486e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004872:	00e2      	lsls	r2, r4, #3
 8004874:	4614      	mov	r4, r2
 8004876:	461d      	mov	r5, r3
 8004878:	4643      	mov	r3, r8
 800487a:	18e3      	adds	r3, r4, r3
 800487c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004880:	464b      	mov	r3, r9
 8004882:	eb45 0303 	adc.w	r3, r5, r3
 8004886:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800488a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004896:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800489a:	f04f 0200 	mov.w	r2, #0
 800489e:	f04f 0300 	mov.w	r3, #0
 80048a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80048a6:	4629      	mov	r1, r5
 80048a8:	008b      	lsls	r3, r1, #2
 80048aa:	4621      	mov	r1, r4
 80048ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048b0:	4621      	mov	r1, r4
 80048b2:	008a      	lsls	r2, r1, #2
 80048b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80048b8:	f7fb fcea 	bl	8000290 <__aeabi_uldivmod>
 80048bc:	4602      	mov	r2, r0
 80048be:	460b      	mov	r3, r1
 80048c0:	4b60      	ldr	r3, [pc, #384]	@ (8004a44 <UART_SetConfig+0x4e4>)
 80048c2:	fba3 2302 	umull	r2, r3, r3, r2
 80048c6:	095b      	lsrs	r3, r3, #5
 80048c8:	011c      	lsls	r4, r3, #4
 80048ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048ce:	2200      	movs	r2, #0
 80048d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80048d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80048d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80048dc:	4642      	mov	r2, r8
 80048de:	464b      	mov	r3, r9
 80048e0:	1891      	adds	r1, r2, r2
 80048e2:	61b9      	str	r1, [r7, #24]
 80048e4:	415b      	adcs	r3, r3
 80048e6:	61fb      	str	r3, [r7, #28]
 80048e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048ec:	4641      	mov	r1, r8
 80048ee:	1851      	adds	r1, r2, r1
 80048f0:	6139      	str	r1, [r7, #16]
 80048f2:	4649      	mov	r1, r9
 80048f4:	414b      	adcs	r3, r1
 80048f6:	617b      	str	r3, [r7, #20]
 80048f8:	f04f 0200 	mov.w	r2, #0
 80048fc:	f04f 0300 	mov.w	r3, #0
 8004900:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004904:	4659      	mov	r1, fp
 8004906:	00cb      	lsls	r3, r1, #3
 8004908:	4651      	mov	r1, sl
 800490a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800490e:	4651      	mov	r1, sl
 8004910:	00ca      	lsls	r2, r1, #3
 8004912:	4610      	mov	r0, r2
 8004914:	4619      	mov	r1, r3
 8004916:	4603      	mov	r3, r0
 8004918:	4642      	mov	r2, r8
 800491a:	189b      	adds	r3, r3, r2
 800491c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004920:	464b      	mov	r3, r9
 8004922:	460a      	mov	r2, r1
 8004924:	eb42 0303 	adc.w	r3, r2, r3
 8004928:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800492c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004936:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004938:	f04f 0200 	mov.w	r2, #0
 800493c:	f04f 0300 	mov.w	r3, #0
 8004940:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004944:	4649      	mov	r1, r9
 8004946:	008b      	lsls	r3, r1, #2
 8004948:	4641      	mov	r1, r8
 800494a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800494e:	4641      	mov	r1, r8
 8004950:	008a      	lsls	r2, r1, #2
 8004952:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004956:	f7fb fc9b 	bl	8000290 <__aeabi_uldivmod>
 800495a:	4602      	mov	r2, r0
 800495c:	460b      	mov	r3, r1
 800495e:	4611      	mov	r1, r2
 8004960:	4b38      	ldr	r3, [pc, #224]	@ (8004a44 <UART_SetConfig+0x4e4>)
 8004962:	fba3 2301 	umull	r2, r3, r3, r1
 8004966:	095b      	lsrs	r3, r3, #5
 8004968:	2264      	movs	r2, #100	@ 0x64
 800496a:	fb02 f303 	mul.w	r3, r2, r3
 800496e:	1acb      	subs	r3, r1, r3
 8004970:	011b      	lsls	r3, r3, #4
 8004972:	3332      	adds	r3, #50	@ 0x32
 8004974:	4a33      	ldr	r2, [pc, #204]	@ (8004a44 <UART_SetConfig+0x4e4>)
 8004976:	fba2 2303 	umull	r2, r3, r2, r3
 800497a:	095b      	lsrs	r3, r3, #5
 800497c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004980:	441c      	add	r4, r3
 8004982:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004986:	2200      	movs	r2, #0
 8004988:	673b      	str	r3, [r7, #112]	@ 0x70
 800498a:	677a      	str	r2, [r7, #116]	@ 0x74
 800498c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004990:	4642      	mov	r2, r8
 8004992:	464b      	mov	r3, r9
 8004994:	1891      	adds	r1, r2, r2
 8004996:	60b9      	str	r1, [r7, #8]
 8004998:	415b      	adcs	r3, r3
 800499a:	60fb      	str	r3, [r7, #12]
 800499c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049a0:	4641      	mov	r1, r8
 80049a2:	1851      	adds	r1, r2, r1
 80049a4:	6039      	str	r1, [r7, #0]
 80049a6:	4649      	mov	r1, r9
 80049a8:	414b      	adcs	r3, r1
 80049aa:	607b      	str	r3, [r7, #4]
 80049ac:	f04f 0200 	mov.w	r2, #0
 80049b0:	f04f 0300 	mov.w	r3, #0
 80049b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049b8:	4659      	mov	r1, fp
 80049ba:	00cb      	lsls	r3, r1, #3
 80049bc:	4651      	mov	r1, sl
 80049be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049c2:	4651      	mov	r1, sl
 80049c4:	00ca      	lsls	r2, r1, #3
 80049c6:	4610      	mov	r0, r2
 80049c8:	4619      	mov	r1, r3
 80049ca:	4603      	mov	r3, r0
 80049cc:	4642      	mov	r2, r8
 80049ce:	189b      	adds	r3, r3, r2
 80049d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049d2:	464b      	mov	r3, r9
 80049d4:	460a      	mov	r2, r1
 80049d6:	eb42 0303 	adc.w	r3, r2, r3
 80049da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80049dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80049e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80049e8:	f04f 0200 	mov.w	r2, #0
 80049ec:	f04f 0300 	mov.w	r3, #0
 80049f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80049f4:	4649      	mov	r1, r9
 80049f6:	008b      	lsls	r3, r1, #2
 80049f8:	4641      	mov	r1, r8
 80049fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049fe:	4641      	mov	r1, r8
 8004a00:	008a      	lsls	r2, r1, #2
 8004a02:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004a06:	f7fb fc43 	bl	8000290 <__aeabi_uldivmod>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a44 <UART_SetConfig+0x4e4>)
 8004a10:	fba3 1302 	umull	r1, r3, r3, r2
 8004a14:	095b      	lsrs	r3, r3, #5
 8004a16:	2164      	movs	r1, #100	@ 0x64
 8004a18:	fb01 f303 	mul.w	r3, r1, r3
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	011b      	lsls	r3, r3, #4
 8004a20:	3332      	adds	r3, #50	@ 0x32
 8004a22:	4a08      	ldr	r2, [pc, #32]	@ (8004a44 <UART_SetConfig+0x4e4>)
 8004a24:	fba2 2303 	umull	r2, r3, r2, r3
 8004a28:	095b      	lsrs	r3, r3, #5
 8004a2a:	f003 020f 	and.w	r2, r3, #15
 8004a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4422      	add	r2, r4
 8004a36:	609a      	str	r2, [r3, #8]
 8004a38:	bf00      	nop
 8004a3a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a44:	51eb851f 	.word	0x51eb851f

08004a48 <std>:
 8004a48:	2300      	movs	r3, #0
 8004a4a:	b510      	push	{r4, lr}
 8004a4c:	4604      	mov	r4, r0
 8004a4e:	e9c0 3300 	strd	r3, r3, [r0]
 8004a52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a56:	6083      	str	r3, [r0, #8]
 8004a58:	8181      	strh	r1, [r0, #12]
 8004a5a:	6643      	str	r3, [r0, #100]	@ 0x64
 8004a5c:	81c2      	strh	r2, [r0, #14]
 8004a5e:	6183      	str	r3, [r0, #24]
 8004a60:	4619      	mov	r1, r3
 8004a62:	2208      	movs	r2, #8
 8004a64:	305c      	adds	r0, #92	@ 0x5c
 8004a66:	f000 fa79 	bl	8004f5c <memset>
 8004a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8004aa0 <std+0x58>)
 8004a6c:	6263      	str	r3, [r4, #36]	@ 0x24
 8004a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8004aa4 <std+0x5c>)
 8004a70:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004a72:	4b0d      	ldr	r3, [pc, #52]	@ (8004aa8 <std+0x60>)
 8004a74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004a76:	4b0d      	ldr	r3, [pc, #52]	@ (8004aac <std+0x64>)
 8004a78:	6323      	str	r3, [r4, #48]	@ 0x30
 8004a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ab0 <std+0x68>)
 8004a7c:	6224      	str	r4, [r4, #32]
 8004a7e:	429c      	cmp	r4, r3
 8004a80:	d006      	beq.n	8004a90 <std+0x48>
 8004a82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004a86:	4294      	cmp	r4, r2
 8004a88:	d002      	beq.n	8004a90 <std+0x48>
 8004a8a:	33d0      	adds	r3, #208	@ 0xd0
 8004a8c:	429c      	cmp	r4, r3
 8004a8e:	d105      	bne.n	8004a9c <std+0x54>
 8004a90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a98:	f000 bb20 	b.w	80050dc <__retarget_lock_init_recursive>
 8004a9c:	bd10      	pop	{r4, pc}
 8004a9e:	bf00      	nop
 8004aa0:	08004da9 	.word	0x08004da9
 8004aa4:	08004dcf 	.word	0x08004dcf
 8004aa8:	08004e07 	.word	0x08004e07
 8004aac:	08004e2b 	.word	0x08004e2b
 8004ab0:	200006f8 	.word	0x200006f8

08004ab4 <stdio_exit_handler>:
 8004ab4:	4a02      	ldr	r2, [pc, #8]	@ (8004ac0 <stdio_exit_handler+0xc>)
 8004ab6:	4903      	ldr	r1, [pc, #12]	@ (8004ac4 <stdio_exit_handler+0x10>)
 8004ab8:	4803      	ldr	r0, [pc, #12]	@ (8004ac8 <stdio_exit_handler+0x14>)
 8004aba:	f000 b869 	b.w	8004b90 <_fwalk_sglue>
 8004abe:	bf00      	nop
 8004ac0:	20000040 	.word	0x20000040
 8004ac4:	0800627d 	.word	0x0800627d
 8004ac8:	20000050 	.word	0x20000050

08004acc <cleanup_stdio>:
 8004acc:	6841      	ldr	r1, [r0, #4]
 8004ace:	4b0c      	ldr	r3, [pc, #48]	@ (8004b00 <cleanup_stdio+0x34>)
 8004ad0:	4299      	cmp	r1, r3
 8004ad2:	b510      	push	{r4, lr}
 8004ad4:	4604      	mov	r4, r0
 8004ad6:	d001      	beq.n	8004adc <cleanup_stdio+0x10>
 8004ad8:	f001 fbd0 	bl	800627c <_fflush_r>
 8004adc:	68a1      	ldr	r1, [r4, #8]
 8004ade:	4b09      	ldr	r3, [pc, #36]	@ (8004b04 <cleanup_stdio+0x38>)
 8004ae0:	4299      	cmp	r1, r3
 8004ae2:	d002      	beq.n	8004aea <cleanup_stdio+0x1e>
 8004ae4:	4620      	mov	r0, r4
 8004ae6:	f001 fbc9 	bl	800627c <_fflush_r>
 8004aea:	68e1      	ldr	r1, [r4, #12]
 8004aec:	4b06      	ldr	r3, [pc, #24]	@ (8004b08 <cleanup_stdio+0x3c>)
 8004aee:	4299      	cmp	r1, r3
 8004af0:	d004      	beq.n	8004afc <cleanup_stdio+0x30>
 8004af2:	4620      	mov	r0, r4
 8004af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004af8:	f001 bbc0 	b.w	800627c <_fflush_r>
 8004afc:	bd10      	pop	{r4, pc}
 8004afe:	bf00      	nop
 8004b00:	200006f8 	.word	0x200006f8
 8004b04:	20000760 	.word	0x20000760
 8004b08:	200007c8 	.word	0x200007c8

08004b0c <global_stdio_init.part.0>:
 8004b0c:	b510      	push	{r4, lr}
 8004b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8004b3c <global_stdio_init.part.0+0x30>)
 8004b10:	4c0b      	ldr	r4, [pc, #44]	@ (8004b40 <global_stdio_init.part.0+0x34>)
 8004b12:	4a0c      	ldr	r2, [pc, #48]	@ (8004b44 <global_stdio_init.part.0+0x38>)
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	4620      	mov	r0, r4
 8004b18:	2200      	movs	r2, #0
 8004b1a:	2104      	movs	r1, #4
 8004b1c:	f7ff ff94 	bl	8004a48 <std>
 8004b20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004b24:	2201      	movs	r2, #1
 8004b26:	2109      	movs	r1, #9
 8004b28:	f7ff ff8e 	bl	8004a48 <std>
 8004b2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004b30:	2202      	movs	r2, #2
 8004b32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b36:	2112      	movs	r1, #18
 8004b38:	f7ff bf86 	b.w	8004a48 <std>
 8004b3c:	20000830 	.word	0x20000830
 8004b40:	200006f8 	.word	0x200006f8
 8004b44:	08004ab5 	.word	0x08004ab5

08004b48 <__sfp_lock_acquire>:
 8004b48:	4801      	ldr	r0, [pc, #4]	@ (8004b50 <__sfp_lock_acquire+0x8>)
 8004b4a:	f000 bac8 	b.w	80050de <__retarget_lock_acquire_recursive>
 8004b4e:	bf00      	nop
 8004b50:	20000839 	.word	0x20000839

08004b54 <__sfp_lock_release>:
 8004b54:	4801      	ldr	r0, [pc, #4]	@ (8004b5c <__sfp_lock_release+0x8>)
 8004b56:	f000 bac3 	b.w	80050e0 <__retarget_lock_release_recursive>
 8004b5a:	bf00      	nop
 8004b5c:	20000839 	.word	0x20000839

08004b60 <__sinit>:
 8004b60:	b510      	push	{r4, lr}
 8004b62:	4604      	mov	r4, r0
 8004b64:	f7ff fff0 	bl	8004b48 <__sfp_lock_acquire>
 8004b68:	6a23      	ldr	r3, [r4, #32]
 8004b6a:	b11b      	cbz	r3, 8004b74 <__sinit+0x14>
 8004b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b70:	f7ff bff0 	b.w	8004b54 <__sfp_lock_release>
 8004b74:	4b04      	ldr	r3, [pc, #16]	@ (8004b88 <__sinit+0x28>)
 8004b76:	6223      	str	r3, [r4, #32]
 8004b78:	4b04      	ldr	r3, [pc, #16]	@ (8004b8c <__sinit+0x2c>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1f5      	bne.n	8004b6c <__sinit+0xc>
 8004b80:	f7ff ffc4 	bl	8004b0c <global_stdio_init.part.0>
 8004b84:	e7f2      	b.n	8004b6c <__sinit+0xc>
 8004b86:	bf00      	nop
 8004b88:	08004acd 	.word	0x08004acd
 8004b8c:	20000830 	.word	0x20000830

08004b90 <_fwalk_sglue>:
 8004b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b94:	4607      	mov	r7, r0
 8004b96:	4688      	mov	r8, r1
 8004b98:	4614      	mov	r4, r2
 8004b9a:	2600      	movs	r6, #0
 8004b9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ba0:	f1b9 0901 	subs.w	r9, r9, #1
 8004ba4:	d505      	bpl.n	8004bb2 <_fwalk_sglue+0x22>
 8004ba6:	6824      	ldr	r4, [r4, #0]
 8004ba8:	2c00      	cmp	r4, #0
 8004baa:	d1f7      	bne.n	8004b9c <_fwalk_sglue+0xc>
 8004bac:	4630      	mov	r0, r6
 8004bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bb2:	89ab      	ldrh	r3, [r5, #12]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d907      	bls.n	8004bc8 <_fwalk_sglue+0x38>
 8004bb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	d003      	beq.n	8004bc8 <_fwalk_sglue+0x38>
 8004bc0:	4629      	mov	r1, r5
 8004bc2:	4638      	mov	r0, r7
 8004bc4:	47c0      	blx	r8
 8004bc6:	4306      	orrs	r6, r0
 8004bc8:	3568      	adds	r5, #104	@ 0x68
 8004bca:	e7e9      	b.n	8004ba0 <_fwalk_sglue+0x10>

08004bcc <iprintf>:
 8004bcc:	b40f      	push	{r0, r1, r2, r3}
 8004bce:	b507      	push	{r0, r1, r2, lr}
 8004bd0:	4906      	ldr	r1, [pc, #24]	@ (8004bec <iprintf+0x20>)
 8004bd2:	ab04      	add	r3, sp, #16
 8004bd4:	6808      	ldr	r0, [r1, #0]
 8004bd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bda:	6881      	ldr	r1, [r0, #8]
 8004bdc:	9301      	str	r3, [sp, #4]
 8004bde:	f000 fed5 	bl	800598c <_vfiprintf_r>
 8004be2:	b003      	add	sp, #12
 8004be4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004be8:	b004      	add	sp, #16
 8004bea:	4770      	bx	lr
 8004bec:	2000004c 	.word	0x2000004c

08004bf0 <_puts_r>:
 8004bf0:	6a03      	ldr	r3, [r0, #32]
 8004bf2:	b570      	push	{r4, r5, r6, lr}
 8004bf4:	6884      	ldr	r4, [r0, #8]
 8004bf6:	4605      	mov	r5, r0
 8004bf8:	460e      	mov	r6, r1
 8004bfa:	b90b      	cbnz	r3, 8004c00 <_puts_r+0x10>
 8004bfc:	f7ff ffb0 	bl	8004b60 <__sinit>
 8004c00:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c02:	07db      	lsls	r3, r3, #31
 8004c04:	d405      	bmi.n	8004c12 <_puts_r+0x22>
 8004c06:	89a3      	ldrh	r3, [r4, #12]
 8004c08:	0598      	lsls	r0, r3, #22
 8004c0a:	d402      	bmi.n	8004c12 <_puts_r+0x22>
 8004c0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c0e:	f000 fa66 	bl	80050de <__retarget_lock_acquire_recursive>
 8004c12:	89a3      	ldrh	r3, [r4, #12]
 8004c14:	0719      	lsls	r1, r3, #28
 8004c16:	d502      	bpl.n	8004c1e <_puts_r+0x2e>
 8004c18:	6923      	ldr	r3, [r4, #16]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d135      	bne.n	8004c8a <_puts_r+0x9a>
 8004c1e:	4621      	mov	r1, r4
 8004c20:	4628      	mov	r0, r5
 8004c22:	f000 f945 	bl	8004eb0 <__swsetup_r>
 8004c26:	b380      	cbz	r0, 8004c8a <_puts_r+0x9a>
 8004c28:	f04f 35ff 	mov.w	r5, #4294967295
 8004c2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c2e:	07da      	lsls	r2, r3, #31
 8004c30:	d405      	bmi.n	8004c3e <_puts_r+0x4e>
 8004c32:	89a3      	ldrh	r3, [r4, #12]
 8004c34:	059b      	lsls	r3, r3, #22
 8004c36:	d402      	bmi.n	8004c3e <_puts_r+0x4e>
 8004c38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c3a:	f000 fa51 	bl	80050e0 <__retarget_lock_release_recursive>
 8004c3e:	4628      	mov	r0, r5
 8004c40:	bd70      	pop	{r4, r5, r6, pc}
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	da04      	bge.n	8004c50 <_puts_r+0x60>
 8004c46:	69a2      	ldr	r2, [r4, #24]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	dc17      	bgt.n	8004c7c <_puts_r+0x8c>
 8004c4c:	290a      	cmp	r1, #10
 8004c4e:	d015      	beq.n	8004c7c <_puts_r+0x8c>
 8004c50:	6823      	ldr	r3, [r4, #0]
 8004c52:	1c5a      	adds	r2, r3, #1
 8004c54:	6022      	str	r2, [r4, #0]
 8004c56:	7019      	strb	r1, [r3, #0]
 8004c58:	68a3      	ldr	r3, [r4, #8]
 8004c5a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	60a3      	str	r3, [r4, #8]
 8004c62:	2900      	cmp	r1, #0
 8004c64:	d1ed      	bne.n	8004c42 <_puts_r+0x52>
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	da11      	bge.n	8004c8e <_puts_r+0x9e>
 8004c6a:	4622      	mov	r2, r4
 8004c6c:	210a      	movs	r1, #10
 8004c6e:	4628      	mov	r0, r5
 8004c70:	f000 f8df 	bl	8004e32 <__swbuf_r>
 8004c74:	3001      	adds	r0, #1
 8004c76:	d0d7      	beq.n	8004c28 <_puts_r+0x38>
 8004c78:	250a      	movs	r5, #10
 8004c7a:	e7d7      	b.n	8004c2c <_puts_r+0x3c>
 8004c7c:	4622      	mov	r2, r4
 8004c7e:	4628      	mov	r0, r5
 8004c80:	f000 f8d7 	bl	8004e32 <__swbuf_r>
 8004c84:	3001      	adds	r0, #1
 8004c86:	d1e7      	bne.n	8004c58 <_puts_r+0x68>
 8004c88:	e7ce      	b.n	8004c28 <_puts_r+0x38>
 8004c8a:	3e01      	subs	r6, #1
 8004c8c:	e7e4      	b.n	8004c58 <_puts_r+0x68>
 8004c8e:	6823      	ldr	r3, [r4, #0]
 8004c90:	1c5a      	adds	r2, r3, #1
 8004c92:	6022      	str	r2, [r4, #0]
 8004c94:	220a      	movs	r2, #10
 8004c96:	701a      	strb	r2, [r3, #0]
 8004c98:	e7ee      	b.n	8004c78 <_puts_r+0x88>
	...

08004c9c <puts>:
 8004c9c:	4b02      	ldr	r3, [pc, #8]	@ (8004ca8 <puts+0xc>)
 8004c9e:	4601      	mov	r1, r0
 8004ca0:	6818      	ldr	r0, [r3, #0]
 8004ca2:	f7ff bfa5 	b.w	8004bf0 <_puts_r>
 8004ca6:	bf00      	nop
 8004ca8:	2000004c 	.word	0x2000004c

08004cac <sniprintf>:
 8004cac:	b40c      	push	{r2, r3}
 8004cae:	b530      	push	{r4, r5, lr}
 8004cb0:	4b17      	ldr	r3, [pc, #92]	@ (8004d10 <sniprintf+0x64>)
 8004cb2:	1e0c      	subs	r4, r1, #0
 8004cb4:	681d      	ldr	r5, [r3, #0]
 8004cb6:	b09d      	sub	sp, #116	@ 0x74
 8004cb8:	da08      	bge.n	8004ccc <sniprintf+0x20>
 8004cba:	238b      	movs	r3, #139	@ 0x8b
 8004cbc:	602b      	str	r3, [r5, #0]
 8004cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8004cc2:	b01d      	add	sp, #116	@ 0x74
 8004cc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004cc8:	b002      	add	sp, #8
 8004cca:	4770      	bx	lr
 8004ccc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004cd0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004cd4:	bf14      	ite	ne
 8004cd6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004cda:	4623      	moveq	r3, r4
 8004cdc:	9304      	str	r3, [sp, #16]
 8004cde:	9307      	str	r3, [sp, #28]
 8004ce0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004ce4:	9002      	str	r0, [sp, #8]
 8004ce6:	9006      	str	r0, [sp, #24]
 8004ce8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004cec:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004cee:	ab21      	add	r3, sp, #132	@ 0x84
 8004cf0:	a902      	add	r1, sp, #8
 8004cf2:	4628      	mov	r0, r5
 8004cf4:	9301      	str	r3, [sp, #4]
 8004cf6:	f000 fb57 	bl	80053a8 <_svfiprintf_r>
 8004cfa:	1c43      	adds	r3, r0, #1
 8004cfc:	bfbc      	itt	lt
 8004cfe:	238b      	movlt	r3, #139	@ 0x8b
 8004d00:	602b      	strlt	r3, [r5, #0]
 8004d02:	2c00      	cmp	r4, #0
 8004d04:	d0dd      	beq.n	8004cc2 <sniprintf+0x16>
 8004d06:	9b02      	ldr	r3, [sp, #8]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	701a      	strb	r2, [r3, #0]
 8004d0c:	e7d9      	b.n	8004cc2 <sniprintf+0x16>
 8004d0e:	bf00      	nop
 8004d10:	2000004c 	.word	0x2000004c

08004d14 <siprintf>:
 8004d14:	b40e      	push	{r1, r2, r3}
 8004d16:	b500      	push	{lr}
 8004d18:	b09c      	sub	sp, #112	@ 0x70
 8004d1a:	ab1d      	add	r3, sp, #116	@ 0x74
 8004d1c:	9002      	str	r0, [sp, #8]
 8004d1e:	9006      	str	r0, [sp, #24]
 8004d20:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004d24:	4809      	ldr	r0, [pc, #36]	@ (8004d4c <siprintf+0x38>)
 8004d26:	9107      	str	r1, [sp, #28]
 8004d28:	9104      	str	r1, [sp, #16]
 8004d2a:	4909      	ldr	r1, [pc, #36]	@ (8004d50 <siprintf+0x3c>)
 8004d2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d30:	9105      	str	r1, [sp, #20]
 8004d32:	6800      	ldr	r0, [r0, #0]
 8004d34:	9301      	str	r3, [sp, #4]
 8004d36:	a902      	add	r1, sp, #8
 8004d38:	f000 fb36 	bl	80053a8 <_svfiprintf_r>
 8004d3c:	9b02      	ldr	r3, [sp, #8]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	701a      	strb	r2, [r3, #0]
 8004d42:	b01c      	add	sp, #112	@ 0x70
 8004d44:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d48:	b003      	add	sp, #12
 8004d4a:	4770      	bx	lr
 8004d4c:	2000004c 	.word	0x2000004c
 8004d50:	ffff0208 	.word	0xffff0208

08004d54 <siscanf>:
 8004d54:	b40e      	push	{r1, r2, r3}
 8004d56:	b530      	push	{r4, r5, lr}
 8004d58:	b09c      	sub	sp, #112	@ 0x70
 8004d5a:	ac1f      	add	r4, sp, #124	@ 0x7c
 8004d5c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8004d60:	f854 5b04 	ldr.w	r5, [r4], #4
 8004d64:	f8ad 2014 	strh.w	r2, [sp, #20]
 8004d68:	9002      	str	r0, [sp, #8]
 8004d6a:	9006      	str	r0, [sp, #24]
 8004d6c:	f7fb fa38 	bl	80001e0 <strlen>
 8004d70:	4b0b      	ldr	r3, [pc, #44]	@ (8004da0 <siscanf+0x4c>)
 8004d72:	9003      	str	r0, [sp, #12]
 8004d74:	9007      	str	r0, [sp, #28]
 8004d76:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004d78:	480a      	ldr	r0, [pc, #40]	@ (8004da4 <siscanf+0x50>)
 8004d7a:	9401      	str	r4, [sp, #4]
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004d80:	9314      	str	r3, [sp, #80]	@ 0x50
 8004d82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004d86:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004d8a:	462a      	mov	r2, r5
 8004d8c:	4623      	mov	r3, r4
 8004d8e:	a902      	add	r1, sp, #8
 8004d90:	6800      	ldr	r0, [r0, #0]
 8004d92:	f000 fc5d 	bl	8005650 <__ssvfiscanf_r>
 8004d96:	b01c      	add	sp, #112	@ 0x70
 8004d98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d9c:	b003      	add	sp, #12
 8004d9e:	4770      	bx	lr
 8004da0:	08004dcb 	.word	0x08004dcb
 8004da4:	2000004c 	.word	0x2000004c

08004da8 <__sread>:
 8004da8:	b510      	push	{r4, lr}
 8004daa:	460c      	mov	r4, r1
 8004dac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004db0:	f000 f946 	bl	8005040 <_read_r>
 8004db4:	2800      	cmp	r0, #0
 8004db6:	bfab      	itete	ge
 8004db8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004dba:	89a3      	ldrhlt	r3, [r4, #12]
 8004dbc:	181b      	addge	r3, r3, r0
 8004dbe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004dc2:	bfac      	ite	ge
 8004dc4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004dc6:	81a3      	strhlt	r3, [r4, #12]
 8004dc8:	bd10      	pop	{r4, pc}

08004dca <__seofread>:
 8004dca:	2000      	movs	r0, #0
 8004dcc:	4770      	bx	lr

08004dce <__swrite>:
 8004dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dd2:	461f      	mov	r7, r3
 8004dd4:	898b      	ldrh	r3, [r1, #12]
 8004dd6:	05db      	lsls	r3, r3, #23
 8004dd8:	4605      	mov	r5, r0
 8004dda:	460c      	mov	r4, r1
 8004ddc:	4616      	mov	r6, r2
 8004dde:	d505      	bpl.n	8004dec <__swrite+0x1e>
 8004de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004de4:	2302      	movs	r3, #2
 8004de6:	2200      	movs	r2, #0
 8004de8:	f000 f918 	bl	800501c <_lseek_r>
 8004dec:	89a3      	ldrh	r3, [r4, #12]
 8004dee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004df2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004df6:	81a3      	strh	r3, [r4, #12]
 8004df8:	4632      	mov	r2, r6
 8004dfa:	463b      	mov	r3, r7
 8004dfc:	4628      	mov	r0, r5
 8004dfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e02:	f000 b92f 	b.w	8005064 <_write_r>

08004e06 <__sseek>:
 8004e06:	b510      	push	{r4, lr}
 8004e08:	460c      	mov	r4, r1
 8004e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e0e:	f000 f905 	bl	800501c <_lseek_r>
 8004e12:	1c43      	adds	r3, r0, #1
 8004e14:	89a3      	ldrh	r3, [r4, #12]
 8004e16:	bf15      	itete	ne
 8004e18:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004e1a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004e1e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004e22:	81a3      	strheq	r3, [r4, #12]
 8004e24:	bf18      	it	ne
 8004e26:	81a3      	strhne	r3, [r4, #12]
 8004e28:	bd10      	pop	{r4, pc}

08004e2a <__sclose>:
 8004e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e2e:	f000 b8e5 	b.w	8004ffc <_close_r>

08004e32 <__swbuf_r>:
 8004e32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e34:	460e      	mov	r6, r1
 8004e36:	4614      	mov	r4, r2
 8004e38:	4605      	mov	r5, r0
 8004e3a:	b118      	cbz	r0, 8004e44 <__swbuf_r+0x12>
 8004e3c:	6a03      	ldr	r3, [r0, #32]
 8004e3e:	b90b      	cbnz	r3, 8004e44 <__swbuf_r+0x12>
 8004e40:	f7ff fe8e 	bl	8004b60 <__sinit>
 8004e44:	69a3      	ldr	r3, [r4, #24]
 8004e46:	60a3      	str	r3, [r4, #8]
 8004e48:	89a3      	ldrh	r3, [r4, #12]
 8004e4a:	071a      	lsls	r2, r3, #28
 8004e4c:	d501      	bpl.n	8004e52 <__swbuf_r+0x20>
 8004e4e:	6923      	ldr	r3, [r4, #16]
 8004e50:	b943      	cbnz	r3, 8004e64 <__swbuf_r+0x32>
 8004e52:	4621      	mov	r1, r4
 8004e54:	4628      	mov	r0, r5
 8004e56:	f000 f82b 	bl	8004eb0 <__swsetup_r>
 8004e5a:	b118      	cbz	r0, 8004e64 <__swbuf_r+0x32>
 8004e5c:	f04f 37ff 	mov.w	r7, #4294967295
 8004e60:	4638      	mov	r0, r7
 8004e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e64:	6823      	ldr	r3, [r4, #0]
 8004e66:	6922      	ldr	r2, [r4, #16]
 8004e68:	1a98      	subs	r0, r3, r2
 8004e6a:	6963      	ldr	r3, [r4, #20]
 8004e6c:	b2f6      	uxtb	r6, r6
 8004e6e:	4283      	cmp	r3, r0
 8004e70:	4637      	mov	r7, r6
 8004e72:	dc05      	bgt.n	8004e80 <__swbuf_r+0x4e>
 8004e74:	4621      	mov	r1, r4
 8004e76:	4628      	mov	r0, r5
 8004e78:	f001 fa00 	bl	800627c <_fflush_r>
 8004e7c:	2800      	cmp	r0, #0
 8004e7e:	d1ed      	bne.n	8004e5c <__swbuf_r+0x2a>
 8004e80:	68a3      	ldr	r3, [r4, #8]
 8004e82:	3b01      	subs	r3, #1
 8004e84:	60a3      	str	r3, [r4, #8]
 8004e86:	6823      	ldr	r3, [r4, #0]
 8004e88:	1c5a      	adds	r2, r3, #1
 8004e8a:	6022      	str	r2, [r4, #0]
 8004e8c:	701e      	strb	r6, [r3, #0]
 8004e8e:	6962      	ldr	r2, [r4, #20]
 8004e90:	1c43      	adds	r3, r0, #1
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d004      	beq.n	8004ea0 <__swbuf_r+0x6e>
 8004e96:	89a3      	ldrh	r3, [r4, #12]
 8004e98:	07db      	lsls	r3, r3, #31
 8004e9a:	d5e1      	bpl.n	8004e60 <__swbuf_r+0x2e>
 8004e9c:	2e0a      	cmp	r6, #10
 8004e9e:	d1df      	bne.n	8004e60 <__swbuf_r+0x2e>
 8004ea0:	4621      	mov	r1, r4
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	f001 f9ea 	bl	800627c <_fflush_r>
 8004ea8:	2800      	cmp	r0, #0
 8004eaa:	d0d9      	beq.n	8004e60 <__swbuf_r+0x2e>
 8004eac:	e7d6      	b.n	8004e5c <__swbuf_r+0x2a>
	...

08004eb0 <__swsetup_r>:
 8004eb0:	b538      	push	{r3, r4, r5, lr}
 8004eb2:	4b29      	ldr	r3, [pc, #164]	@ (8004f58 <__swsetup_r+0xa8>)
 8004eb4:	4605      	mov	r5, r0
 8004eb6:	6818      	ldr	r0, [r3, #0]
 8004eb8:	460c      	mov	r4, r1
 8004eba:	b118      	cbz	r0, 8004ec4 <__swsetup_r+0x14>
 8004ebc:	6a03      	ldr	r3, [r0, #32]
 8004ebe:	b90b      	cbnz	r3, 8004ec4 <__swsetup_r+0x14>
 8004ec0:	f7ff fe4e 	bl	8004b60 <__sinit>
 8004ec4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ec8:	0719      	lsls	r1, r3, #28
 8004eca:	d422      	bmi.n	8004f12 <__swsetup_r+0x62>
 8004ecc:	06da      	lsls	r2, r3, #27
 8004ece:	d407      	bmi.n	8004ee0 <__swsetup_r+0x30>
 8004ed0:	2209      	movs	r2, #9
 8004ed2:	602a      	str	r2, [r5, #0]
 8004ed4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ed8:	81a3      	strh	r3, [r4, #12]
 8004eda:	f04f 30ff 	mov.w	r0, #4294967295
 8004ede:	e033      	b.n	8004f48 <__swsetup_r+0x98>
 8004ee0:	0758      	lsls	r0, r3, #29
 8004ee2:	d512      	bpl.n	8004f0a <__swsetup_r+0x5a>
 8004ee4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004ee6:	b141      	cbz	r1, 8004efa <__swsetup_r+0x4a>
 8004ee8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004eec:	4299      	cmp	r1, r3
 8004eee:	d002      	beq.n	8004ef6 <__swsetup_r+0x46>
 8004ef0:	4628      	mov	r0, r5
 8004ef2:	f000 f905 	bl	8005100 <_free_r>
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	6363      	str	r3, [r4, #52]	@ 0x34
 8004efa:	89a3      	ldrh	r3, [r4, #12]
 8004efc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004f00:	81a3      	strh	r3, [r4, #12]
 8004f02:	2300      	movs	r3, #0
 8004f04:	6063      	str	r3, [r4, #4]
 8004f06:	6923      	ldr	r3, [r4, #16]
 8004f08:	6023      	str	r3, [r4, #0]
 8004f0a:	89a3      	ldrh	r3, [r4, #12]
 8004f0c:	f043 0308 	orr.w	r3, r3, #8
 8004f10:	81a3      	strh	r3, [r4, #12]
 8004f12:	6923      	ldr	r3, [r4, #16]
 8004f14:	b94b      	cbnz	r3, 8004f2a <__swsetup_r+0x7a>
 8004f16:	89a3      	ldrh	r3, [r4, #12]
 8004f18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004f1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f20:	d003      	beq.n	8004f2a <__swsetup_r+0x7a>
 8004f22:	4621      	mov	r1, r4
 8004f24:	4628      	mov	r0, r5
 8004f26:	f001 f9f7 	bl	8006318 <__smakebuf_r>
 8004f2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f2e:	f013 0201 	ands.w	r2, r3, #1
 8004f32:	d00a      	beq.n	8004f4a <__swsetup_r+0x9a>
 8004f34:	2200      	movs	r2, #0
 8004f36:	60a2      	str	r2, [r4, #8]
 8004f38:	6962      	ldr	r2, [r4, #20]
 8004f3a:	4252      	negs	r2, r2
 8004f3c:	61a2      	str	r2, [r4, #24]
 8004f3e:	6922      	ldr	r2, [r4, #16]
 8004f40:	b942      	cbnz	r2, 8004f54 <__swsetup_r+0xa4>
 8004f42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004f46:	d1c5      	bne.n	8004ed4 <__swsetup_r+0x24>
 8004f48:	bd38      	pop	{r3, r4, r5, pc}
 8004f4a:	0799      	lsls	r1, r3, #30
 8004f4c:	bf58      	it	pl
 8004f4e:	6962      	ldrpl	r2, [r4, #20]
 8004f50:	60a2      	str	r2, [r4, #8]
 8004f52:	e7f4      	b.n	8004f3e <__swsetup_r+0x8e>
 8004f54:	2000      	movs	r0, #0
 8004f56:	e7f7      	b.n	8004f48 <__swsetup_r+0x98>
 8004f58:	2000004c 	.word	0x2000004c

08004f5c <memset>:
 8004f5c:	4402      	add	r2, r0
 8004f5e:	4603      	mov	r3, r0
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d100      	bne.n	8004f66 <memset+0xa>
 8004f64:	4770      	bx	lr
 8004f66:	f803 1b01 	strb.w	r1, [r3], #1
 8004f6a:	e7f9      	b.n	8004f60 <memset+0x4>

08004f6c <strchr>:
 8004f6c:	b2c9      	uxtb	r1, r1
 8004f6e:	4603      	mov	r3, r0
 8004f70:	4618      	mov	r0, r3
 8004f72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f76:	b112      	cbz	r2, 8004f7e <strchr+0x12>
 8004f78:	428a      	cmp	r2, r1
 8004f7a:	d1f9      	bne.n	8004f70 <strchr+0x4>
 8004f7c:	4770      	bx	lr
 8004f7e:	2900      	cmp	r1, #0
 8004f80:	bf18      	it	ne
 8004f82:	2000      	movne	r0, #0
 8004f84:	4770      	bx	lr

08004f86 <strcspn>:
 8004f86:	b570      	push	{r4, r5, r6, lr}
 8004f88:	4603      	mov	r3, r0
 8004f8a:	461e      	mov	r6, r3
 8004f8c:	f813 4b01 	ldrb.w	r4, [r3], #1
 8004f90:	b144      	cbz	r4, 8004fa4 <strcspn+0x1e>
 8004f92:	1e4a      	subs	r2, r1, #1
 8004f94:	e001      	b.n	8004f9a <strcspn+0x14>
 8004f96:	42a5      	cmp	r5, r4
 8004f98:	d004      	beq.n	8004fa4 <strcspn+0x1e>
 8004f9a:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8004f9e:	2d00      	cmp	r5, #0
 8004fa0:	d1f9      	bne.n	8004f96 <strcspn+0x10>
 8004fa2:	e7f2      	b.n	8004f8a <strcspn+0x4>
 8004fa4:	1a30      	subs	r0, r6, r0
 8004fa6:	bd70      	pop	{r4, r5, r6, pc}

08004fa8 <strncpy>:
 8004fa8:	b510      	push	{r4, lr}
 8004faa:	3901      	subs	r1, #1
 8004fac:	4603      	mov	r3, r0
 8004fae:	b132      	cbz	r2, 8004fbe <strncpy+0x16>
 8004fb0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004fb4:	f803 4b01 	strb.w	r4, [r3], #1
 8004fb8:	3a01      	subs	r2, #1
 8004fba:	2c00      	cmp	r4, #0
 8004fbc:	d1f7      	bne.n	8004fae <strncpy+0x6>
 8004fbe:	441a      	add	r2, r3
 8004fc0:	2100      	movs	r1, #0
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d100      	bne.n	8004fc8 <strncpy+0x20>
 8004fc6:	bd10      	pop	{r4, pc}
 8004fc8:	f803 1b01 	strb.w	r1, [r3], #1
 8004fcc:	e7f9      	b.n	8004fc2 <strncpy+0x1a>

08004fce <strstr>:
 8004fce:	780a      	ldrb	r2, [r1, #0]
 8004fd0:	b570      	push	{r4, r5, r6, lr}
 8004fd2:	b96a      	cbnz	r2, 8004ff0 <strstr+0x22>
 8004fd4:	bd70      	pop	{r4, r5, r6, pc}
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d109      	bne.n	8004fee <strstr+0x20>
 8004fda:	460c      	mov	r4, r1
 8004fdc:	4605      	mov	r5, r0
 8004fde:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d0f6      	beq.n	8004fd4 <strstr+0x6>
 8004fe6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004fea:	429e      	cmp	r6, r3
 8004fec:	d0f7      	beq.n	8004fde <strstr+0x10>
 8004fee:	3001      	adds	r0, #1
 8004ff0:	7803      	ldrb	r3, [r0, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1ef      	bne.n	8004fd6 <strstr+0x8>
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	e7ec      	b.n	8004fd4 <strstr+0x6>
	...

08004ffc <_close_r>:
 8004ffc:	b538      	push	{r3, r4, r5, lr}
 8004ffe:	4d06      	ldr	r5, [pc, #24]	@ (8005018 <_close_r+0x1c>)
 8005000:	2300      	movs	r3, #0
 8005002:	4604      	mov	r4, r0
 8005004:	4608      	mov	r0, r1
 8005006:	602b      	str	r3, [r5, #0]
 8005008:	f7fc fbcb 	bl	80017a2 <_close>
 800500c:	1c43      	adds	r3, r0, #1
 800500e:	d102      	bne.n	8005016 <_close_r+0x1a>
 8005010:	682b      	ldr	r3, [r5, #0]
 8005012:	b103      	cbz	r3, 8005016 <_close_r+0x1a>
 8005014:	6023      	str	r3, [r4, #0]
 8005016:	bd38      	pop	{r3, r4, r5, pc}
 8005018:	20000834 	.word	0x20000834

0800501c <_lseek_r>:
 800501c:	b538      	push	{r3, r4, r5, lr}
 800501e:	4d07      	ldr	r5, [pc, #28]	@ (800503c <_lseek_r+0x20>)
 8005020:	4604      	mov	r4, r0
 8005022:	4608      	mov	r0, r1
 8005024:	4611      	mov	r1, r2
 8005026:	2200      	movs	r2, #0
 8005028:	602a      	str	r2, [r5, #0]
 800502a:	461a      	mov	r2, r3
 800502c:	f7fc fbe0 	bl	80017f0 <_lseek>
 8005030:	1c43      	adds	r3, r0, #1
 8005032:	d102      	bne.n	800503a <_lseek_r+0x1e>
 8005034:	682b      	ldr	r3, [r5, #0]
 8005036:	b103      	cbz	r3, 800503a <_lseek_r+0x1e>
 8005038:	6023      	str	r3, [r4, #0]
 800503a:	bd38      	pop	{r3, r4, r5, pc}
 800503c:	20000834 	.word	0x20000834

08005040 <_read_r>:
 8005040:	b538      	push	{r3, r4, r5, lr}
 8005042:	4d07      	ldr	r5, [pc, #28]	@ (8005060 <_read_r+0x20>)
 8005044:	4604      	mov	r4, r0
 8005046:	4608      	mov	r0, r1
 8005048:	4611      	mov	r1, r2
 800504a:	2200      	movs	r2, #0
 800504c:	602a      	str	r2, [r5, #0]
 800504e:	461a      	mov	r2, r3
 8005050:	f7fc fb8a 	bl	8001768 <_read>
 8005054:	1c43      	adds	r3, r0, #1
 8005056:	d102      	bne.n	800505e <_read_r+0x1e>
 8005058:	682b      	ldr	r3, [r5, #0]
 800505a:	b103      	cbz	r3, 800505e <_read_r+0x1e>
 800505c:	6023      	str	r3, [r4, #0]
 800505e:	bd38      	pop	{r3, r4, r5, pc}
 8005060:	20000834 	.word	0x20000834

08005064 <_write_r>:
 8005064:	b538      	push	{r3, r4, r5, lr}
 8005066:	4d07      	ldr	r5, [pc, #28]	@ (8005084 <_write_r+0x20>)
 8005068:	4604      	mov	r4, r0
 800506a:	4608      	mov	r0, r1
 800506c:	4611      	mov	r1, r2
 800506e:	2200      	movs	r2, #0
 8005070:	602a      	str	r2, [r5, #0]
 8005072:	461a      	mov	r2, r3
 8005074:	f7fb fbba 	bl	80007ec <_write>
 8005078:	1c43      	adds	r3, r0, #1
 800507a:	d102      	bne.n	8005082 <_write_r+0x1e>
 800507c:	682b      	ldr	r3, [r5, #0]
 800507e:	b103      	cbz	r3, 8005082 <_write_r+0x1e>
 8005080:	6023      	str	r3, [r4, #0]
 8005082:	bd38      	pop	{r3, r4, r5, pc}
 8005084:	20000834 	.word	0x20000834

08005088 <__errno>:
 8005088:	4b01      	ldr	r3, [pc, #4]	@ (8005090 <__errno+0x8>)
 800508a:	6818      	ldr	r0, [r3, #0]
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	2000004c 	.word	0x2000004c

08005094 <__libc_init_array>:
 8005094:	b570      	push	{r4, r5, r6, lr}
 8005096:	4d0d      	ldr	r5, [pc, #52]	@ (80050cc <__libc_init_array+0x38>)
 8005098:	4c0d      	ldr	r4, [pc, #52]	@ (80050d0 <__libc_init_array+0x3c>)
 800509a:	1b64      	subs	r4, r4, r5
 800509c:	10a4      	asrs	r4, r4, #2
 800509e:	2600      	movs	r6, #0
 80050a0:	42a6      	cmp	r6, r4
 80050a2:	d109      	bne.n	80050b8 <__libc_init_array+0x24>
 80050a4:	4d0b      	ldr	r5, [pc, #44]	@ (80050d4 <__libc_init_array+0x40>)
 80050a6:	4c0c      	ldr	r4, [pc, #48]	@ (80050d8 <__libc_init_array+0x44>)
 80050a8:	f001 fb54 	bl	8006754 <_init>
 80050ac:	1b64      	subs	r4, r4, r5
 80050ae:	10a4      	asrs	r4, r4, #2
 80050b0:	2600      	movs	r6, #0
 80050b2:	42a6      	cmp	r6, r4
 80050b4:	d105      	bne.n	80050c2 <__libc_init_array+0x2e>
 80050b6:	bd70      	pop	{r4, r5, r6, pc}
 80050b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80050bc:	4798      	blx	r3
 80050be:	3601      	adds	r6, #1
 80050c0:	e7ee      	b.n	80050a0 <__libc_init_array+0xc>
 80050c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80050c6:	4798      	blx	r3
 80050c8:	3601      	adds	r6, #1
 80050ca:	e7f2      	b.n	80050b2 <__libc_init_array+0x1e>
 80050cc:	08007690 	.word	0x08007690
 80050d0:	08007690 	.word	0x08007690
 80050d4:	08007690 	.word	0x08007690
 80050d8:	08007694 	.word	0x08007694

080050dc <__retarget_lock_init_recursive>:
 80050dc:	4770      	bx	lr

080050de <__retarget_lock_acquire_recursive>:
 80050de:	4770      	bx	lr

080050e0 <__retarget_lock_release_recursive>:
 80050e0:	4770      	bx	lr

080050e2 <memcpy>:
 80050e2:	440a      	add	r2, r1
 80050e4:	4291      	cmp	r1, r2
 80050e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80050ea:	d100      	bne.n	80050ee <memcpy+0xc>
 80050ec:	4770      	bx	lr
 80050ee:	b510      	push	{r4, lr}
 80050f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050f8:	4291      	cmp	r1, r2
 80050fa:	d1f9      	bne.n	80050f0 <memcpy+0xe>
 80050fc:	bd10      	pop	{r4, pc}
	...

08005100 <_free_r>:
 8005100:	b538      	push	{r3, r4, r5, lr}
 8005102:	4605      	mov	r5, r0
 8005104:	2900      	cmp	r1, #0
 8005106:	d041      	beq.n	800518c <_free_r+0x8c>
 8005108:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800510c:	1f0c      	subs	r4, r1, #4
 800510e:	2b00      	cmp	r3, #0
 8005110:	bfb8      	it	lt
 8005112:	18e4      	addlt	r4, r4, r3
 8005114:	f000 f8e0 	bl	80052d8 <__malloc_lock>
 8005118:	4a1d      	ldr	r2, [pc, #116]	@ (8005190 <_free_r+0x90>)
 800511a:	6813      	ldr	r3, [r2, #0]
 800511c:	b933      	cbnz	r3, 800512c <_free_r+0x2c>
 800511e:	6063      	str	r3, [r4, #4]
 8005120:	6014      	str	r4, [r2, #0]
 8005122:	4628      	mov	r0, r5
 8005124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005128:	f000 b8dc 	b.w	80052e4 <__malloc_unlock>
 800512c:	42a3      	cmp	r3, r4
 800512e:	d908      	bls.n	8005142 <_free_r+0x42>
 8005130:	6820      	ldr	r0, [r4, #0]
 8005132:	1821      	adds	r1, r4, r0
 8005134:	428b      	cmp	r3, r1
 8005136:	bf01      	itttt	eq
 8005138:	6819      	ldreq	r1, [r3, #0]
 800513a:	685b      	ldreq	r3, [r3, #4]
 800513c:	1809      	addeq	r1, r1, r0
 800513e:	6021      	streq	r1, [r4, #0]
 8005140:	e7ed      	b.n	800511e <_free_r+0x1e>
 8005142:	461a      	mov	r2, r3
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	b10b      	cbz	r3, 800514c <_free_r+0x4c>
 8005148:	42a3      	cmp	r3, r4
 800514a:	d9fa      	bls.n	8005142 <_free_r+0x42>
 800514c:	6811      	ldr	r1, [r2, #0]
 800514e:	1850      	adds	r0, r2, r1
 8005150:	42a0      	cmp	r0, r4
 8005152:	d10b      	bne.n	800516c <_free_r+0x6c>
 8005154:	6820      	ldr	r0, [r4, #0]
 8005156:	4401      	add	r1, r0
 8005158:	1850      	adds	r0, r2, r1
 800515a:	4283      	cmp	r3, r0
 800515c:	6011      	str	r1, [r2, #0]
 800515e:	d1e0      	bne.n	8005122 <_free_r+0x22>
 8005160:	6818      	ldr	r0, [r3, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	6053      	str	r3, [r2, #4]
 8005166:	4408      	add	r0, r1
 8005168:	6010      	str	r0, [r2, #0]
 800516a:	e7da      	b.n	8005122 <_free_r+0x22>
 800516c:	d902      	bls.n	8005174 <_free_r+0x74>
 800516e:	230c      	movs	r3, #12
 8005170:	602b      	str	r3, [r5, #0]
 8005172:	e7d6      	b.n	8005122 <_free_r+0x22>
 8005174:	6820      	ldr	r0, [r4, #0]
 8005176:	1821      	adds	r1, r4, r0
 8005178:	428b      	cmp	r3, r1
 800517a:	bf04      	itt	eq
 800517c:	6819      	ldreq	r1, [r3, #0]
 800517e:	685b      	ldreq	r3, [r3, #4]
 8005180:	6063      	str	r3, [r4, #4]
 8005182:	bf04      	itt	eq
 8005184:	1809      	addeq	r1, r1, r0
 8005186:	6021      	streq	r1, [r4, #0]
 8005188:	6054      	str	r4, [r2, #4]
 800518a:	e7ca      	b.n	8005122 <_free_r+0x22>
 800518c:	bd38      	pop	{r3, r4, r5, pc}
 800518e:	bf00      	nop
 8005190:	20000840 	.word	0x20000840

08005194 <sbrk_aligned>:
 8005194:	b570      	push	{r4, r5, r6, lr}
 8005196:	4e0f      	ldr	r6, [pc, #60]	@ (80051d4 <sbrk_aligned+0x40>)
 8005198:	460c      	mov	r4, r1
 800519a:	6831      	ldr	r1, [r6, #0]
 800519c:	4605      	mov	r5, r0
 800519e:	b911      	cbnz	r1, 80051a6 <sbrk_aligned+0x12>
 80051a0:	f001 f9a6 	bl	80064f0 <_sbrk_r>
 80051a4:	6030      	str	r0, [r6, #0]
 80051a6:	4621      	mov	r1, r4
 80051a8:	4628      	mov	r0, r5
 80051aa:	f001 f9a1 	bl	80064f0 <_sbrk_r>
 80051ae:	1c43      	adds	r3, r0, #1
 80051b0:	d103      	bne.n	80051ba <sbrk_aligned+0x26>
 80051b2:	f04f 34ff 	mov.w	r4, #4294967295
 80051b6:	4620      	mov	r0, r4
 80051b8:	bd70      	pop	{r4, r5, r6, pc}
 80051ba:	1cc4      	adds	r4, r0, #3
 80051bc:	f024 0403 	bic.w	r4, r4, #3
 80051c0:	42a0      	cmp	r0, r4
 80051c2:	d0f8      	beq.n	80051b6 <sbrk_aligned+0x22>
 80051c4:	1a21      	subs	r1, r4, r0
 80051c6:	4628      	mov	r0, r5
 80051c8:	f001 f992 	bl	80064f0 <_sbrk_r>
 80051cc:	3001      	adds	r0, #1
 80051ce:	d1f2      	bne.n	80051b6 <sbrk_aligned+0x22>
 80051d0:	e7ef      	b.n	80051b2 <sbrk_aligned+0x1e>
 80051d2:	bf00      	nop
 80051d4:	2000083c 	.word	0x2000083c

080051d8 <_malloc_r>:
 80051d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051dc:	1ccd      	adds	r5, r1, #3
 80051de:	f025 0503 	bic.w	r5, r5, #3
 80051e2:	3508      	adds	r5, #8
 80051e4:	2d0c      	cmp	r5, #12
 80051e6:	bf38      	it	cc
 80051e8:	250c      	movcc	r5, #12
 80051ea:	2d00      	cmp	r5, #0
 80051ec:	4606      	mov	r6, r0
 80051ee:	db01      	blt.n	80051f4 <_malloc_r+0x1c>
 80051f0:	42a9      	cmp	r1, r5
 80051f2:	d904      	bls.n	80051fe <_malloc_r+0x26>
 80051f4:	230c      	movs	r3, #12
 80051f6:	6033      	str	r3, [r6, #0]
 80051f8:	2000      	movs	r0, #0
 80051fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80052d4 <_malloc_r+0xfc>
 8005202:	f000 f869 	bl	80052d8 <__malloc_lock>
 8005206:	f8d8 3000 	ldr.w	r3, [r8]
 800520a:	461c      	mov	r4, r3
 800520c:	bb44      	cbnz	r4, 8005260 <_malloc_r+0x88>
 800520e:	4629      	mov	r1, r5
 8005210:	4630      	mov	r0, r6
 8005212:	f7ff ffbf 	bl	8005194 <sbrk_aligned>
 8005216:	1c43      	adds	r3, r0, #1
 8005218:	4604      	mov	r4, r0
 800521a:	d158      	bne.n	80052ce <_malloc_r+0xf6>
 800521c:	f8d8 4000 	ldr.w	r4, [r8]
 8005220:	4627      	mov	r7, r4
 8005222:	2f00      	cmp	r7, #0
 8005224:	d143      	bne.n	80052ae <_malloc_r+0xd6>
 8005226:	2c00      	cmp	r4, #0
 8005228:	d04b      	beq.n	80052c2 <_malloc_r+0xea>
 800522a:	6823      	ldr	r3, [r4, #0]
 800522c:	4639      	mov	r1, r7
 800522e:	4630      	mov	r0, r6
 8005230:	eb04 0903 	add.w	r9, r4, r3
 8005234:	f001 f95c 	bl	80064f0 <_sbrk_r>
 8005238:	4581      	cmp	r9, r0
 800523a:	d142      	bne.n	80052c2 <_malloc_r+0xea>
 800523c:	6821      	ldr	r1, [r4, #0]
 800523e:	1a6d      	subs	r5, r5, r1
 8005240:	4629      	mov	r1, r5
 8005242:	4630      	mov	r0, r6
 8005244:	f7ff ffa6 	bl	8005194 <sbrk_aligned>
 8005248:	3001      	adds	r0, #1
 800524a:	d03a      	beq.n	80052c2 <_malloc_r+0xea>
 800524c:	6823      	ldr	r3, [r4, #0]
 800524e:	442b      	add	r3, r5
 8005250:	6023      	str	r3, [r4, #0]
 8005252:	f8d8 3000 	ldr.w	r3, [r8]
 8005256:	685a      	ldr	r2, [r3, #4]
 8005258:	bb62      	cbnz	r2, 80052b4 <_malloc_r+0xdc>
 800525a:	f8c8 7000 	str.w	r7, [r8]
 800525e:	e00f      	b.n	8005280 <_malloc_r+0xa8>
 8005260:	6822      	ldr	r2, [r4, #0]
 8005262:	1b52      	subs	r2, r2, r5
 8005264:	d420      	bmi.n	80052a8 <_malloc_r+0xd0>
 8005266:	2a0b      	cmp	r2, #11
 8005268:	d917      	bls.n	800529a <_malloc_r+0xc2>
 800526a:	1961      	adds	r1, r4, r5
 800526c:	42a3      	cmp	r3, r4
 800526e:	6025      	str	r5, [r4, #0]
 8005270:	bf18      	it	ne
 8005272:	6059      	strne	r1, [r3, #4]
 8005274:	6863      	ldr	r3, [r4, #4]
 8005276:	bf08      	it	eq
 8005278:	f8c8 1000 	streq.w	r1, [r8]
 800527c:	5162      	str	r2, [r4, r5]
 800527e:	604b      	str	r3, [r1, #4]
 8005280:	4630      	mov	r0, r6
 8005282:	f000 f82f 	bl	80052e4 <__malloc_unlock>
 8005286:	f104 000b 	add.w	r0, r4, #11
 800528a:	1d23      	adds	r3, r4, #4
 800528c:	f020 0007 	bic.w	r0, r0, #7
 8005290:	1ac2      	subs	r2, r0, r3
 8005292:	bf1c      	itt	ne
 8005294:	1a1b      	subne	r3, r3, r0
 8005296:	50a3      	strne	r3, [r4, r2]
 8005298:	e7af      	b.n	80051fa <_malloc_r+0x22>
 800529a:	6862      	ldr	r2, [r4, #4]
 800529c:	42a3      	cmp	r3, r4
 800529e:	bf0c      	ite	eq
 80052a0:	f8c8 2000 	streq.w	r2, [r8]
 80052a4:	605a      	strne	r2, [r3, #4]
 80052a6:	e7eb      	b.n	8005280 <_malloc_r+0xa8>
 80052a8:	4623      	mov	r3, r4
 80052aa:	6864      	ldr	r4, [r4, #4]
 80052ac:	e7ae      	b.n	800520c <_malloc_r+0x34>
 80052ae:	463c      	mov	r4, r7
 80052b0:	687f      	ldr	r7, [r7, #4]
 80052b2:	e7b6      	b.n	8005222 <_malloc_r+0x4a>
 80052b4:	461a      	mov	r2, r3
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	42a3      	cmp	r3, r4
 80052ba:	d1fb      	bne.n	80052b4 <_malloc_r+0xdc>
 80052bc:	2300      	movs	r3, #0
 80052be:	6053      	str	r3, [r2, #4]
 80052c0:	e7de      	b.n	8005280 <_malloc_r+0xa8>
 80052c2:	230c      	movs	r3, #12
 80052c4:	6033      	str	r3, [r6, #0]
 80052c6:	4630      	mov	r0, r6
 80052c8:	f000 f80c 	bl	80052e4 <__malloc_unlock>
 80052cc:	e794      	b.n	80051f8 <_malloc_r+0x20>
 80052ce:	6005      	str	r5, [r0, #0]
 80052d0:	e7d6      	b.n	8005280 <_malloc_r+0xa8>
 80052d2:	bf00      	nop
 80052d4:	20000840 	.word	0x20000840

080052d8 <__malloc_lock>:
 80052d8:	4801      	ldr	r0, [pc, #4]	@ (80052e0 <__malloc_lock+0x8>)
 80052da:	f7ff bf00 	b.w	80050de <__retarget_lock_acquire_recursive>
 80052de:	bf00      	nop
 80052e0:	20000838 	.word	0x20000838

080052e4 <__malloc_unlock>:
 80052e4:	4801      	ldr	r0, [pc, #4]	@ (80052ec <__malloc_unlock+0x8>)
 80052e6:	f7ff befb 	b.w	80050e0 <__retarget_lock_release_recursive>
 80052ea:	bf00      	nop
 80052ec:	20000838 	.word	0x20000838

080052f0 <__ssputs_r>:
 80052f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052f4:	688e      	ldr	r6, [r1, #8]
 80052f6:	461f      	mov	r7, r3
 80052f8:	42be      	cmp	r6, r7
 80052fa:	680b      	ldr	r3, [r1, #0]
 80052fc:	4682      	mov	sl, r0
 80052fe:	460c      	mov	r4, r1
 8005300:	4690      	mov	r8, r2
 8005302:	d82d      	bhi.n	8005360 <__ssputs_r+0x70>
 8005304:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005308:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800530c:	d026      	beq.n	800535c <__ssputs_r+0x6c>
 800530e:	6965      	ldr	r5, [r4, #20]
 8005310:	6909      	ldr	r1, [r1, #16]
 8005312:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005316:	eba3 0901 	sub.w	r9, r3, r1
 800531a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800531e:	1c7b      	adds	r3, r7, #1
 8005320:	444b      	add	r3, r9
 8005322:	106d      	asrs	r5, r5, #1
 8005324:	429d      	cmp	r5, r3
 8005326:	bf38      	it	cc
 8005328:	461d      	movcc	r5, r3
 800532a:	0553      	lsls	r3, r2, #21
 800532c:	d527      	bpl.n	800537e <__ssputs_r+0x8e>
 800532e:	4629      	mov	r1, r5
 8005330:	f7ff ff52 	bl	80051d8 <_malloc_r>
 8005334:	4606      	mov	r6, r0
 8005336:	b360      	cbz	r0, 8005392 <__ssputs_r+0xa2>
 8005338:	6921      	ldr	r1, [r4, #16]
 800533a:	464a      	mov	r2, r9
 800533c:	f7ff fed1 	bl	80050e2 <memcpy>
 8005340:	89a3      	ldrh	r3, [r4, #12]
 8005342:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005346:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800534a:	81a3      	strh	r3, [r4, #12]
 800534c:	6126      	str	r6, [r4, #16]
 800534e:	6165      	str	r5, [r4, #20]
 8005350:	444e      	add	r6, r9
 8005352:	eba5 0509 	sub.w	r5, r5, r9
 8005356:	6026      	str	r6, [r4, #0]
 8005358:	60a5      	str	r5, [r4, #8]
 800535a:	463e      	mov	r6, r7
 800535c:	42be      	cmp	r6, r7
 800535e:	d900      	bls.n	8005362 <__ssputs_r+0x72>
 8005360:	463e      	mov	r6, r7
 8005362:	6820      	ldr	r0, [r4, #0]
 8005364:	4632      	mov	r2, r6
 8005366:	4641      	mov	r1, r8
 8005368:	f001 f885 	bl	8006476 <memmove>
 800536c:	68a3      	ldr	r3, [r4, #8]
 800536e:	1b9b      	subs	r3, r3, r6
 8005370:	60a3      	str	r3, [r4, #8]
 8005372:	6823      	ldr	r3, [r4, #0]
 8005374:	4433      	add	r3, r6
 8005376:	6023      	str	r3, [r4, #0]
 8005378:	2000      	movs	r0, #0
 800537a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800537e:	462a      	mov	r2, r5
 8005380:	f001 f8c6 	bl	8006510 <_realloc_r>
 8005384:	4606      	mov	r6, r0
 8005386:	2800      	cmp	r0, #0
 8005388:	d1e0      	bne.n	800534c <__ssputs_r+0x5c>
 800538a:	6921      	ldr	r1, [r4, #16]
 800538c:	4650      	mov	r0, sl
 800538e:	f7ff feb7 	bl	8005100 <_free_r>
 8005392:	230c      	movs	r3, #12
 8005394:	f8ca 3000 	str.w	r3, [sl]
 8005398:	89a3      	ldrh	r3, [r4, #12]
 800539a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800539e:	81a3      	strh	r3, [r4, #12]
 80053a0:	f04f 30ff 	mov.w	r0, #4294967295
 80053a4:	e7e9      	b.n	800537a <__ssputs_r+0x8a>
	...

080053a8 <_svfiprintf_r>:
 80053a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ac:	4698      	mov	r8, r3
 80053ae:	898b      	ldrh	r3, [r1, #12]
 80053b0:	061b      	lsls	r3, r3, #24
 80053b2:	b09d      	sub	sp, #116	@ 0x74
 80053b4:	4607      	mov	r7, r0
 80053b6:	460d      	mov	r5, r1
 80053b8:	4614      	mov	r4, r2
 80053ba:	d510      	bpl.n	80053de <_svfiprintf_r+0x36>
 80053bc:	690b      	ldr	r3, [r1, #16]
 80053be:	b973      	cbnz	r3, 80053de <_svfiprintf_r+0x36>
 80053c0:	2140      	movs	r1, #64	@ 0x40
 80053c2:	f7ff ff09 	bl	80051d8 <_malloc_r>
 80053c6:	6028      	str	r0, [r5, #0]
 80053c8:	6128      	str	r0, [r5, #16]
 80053ca:	b930      	cbnz	r0, 80053da <_svfiprintf_r+0x32>
 80053cc:	230c      	movs	r3, #12
 80053ce:	603b      	str	r3, [r7, #0]
 80053d0:	f04f 30ff 	mov.w	r0, #4294967295
 80053d4:	b01d      	add	sp, #116	@ 0x74
 80053d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053da:	2340      	movs	r3, #64	@ 0x40
 80053dc:	616b      	str	r3, [r5, #20]
 80053de:	2300      	movs	r3, #0
 80053e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80053e2:	2320      	movs	r3, #32
 80053e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80053e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80053ec:	2330      	movs	r3, #48	@ 0x30
 80053ee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800558c <_svfiprintf_r+0x1e4>
 80053f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80053f6:	f04f 0901 	mov.w	r9, #1
 80053fa:	4623      	mov	r3, r4
 80053fc:	469a      	mov	sl, r3
 80053fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005402:	b10a      	cbz	r2, 8005408 <_svfiprintf_r+0x60>
 8005404:	2a25      	cmp	r2, #37	@ 0x25
 8005406:	d1f9      	bne.n	80053fc <_svfiprintf_r+0x54>
 8005408:	ebba 0b04 	subs.w	fp, sl, r4
 800540c:	d00b      	beq.n	8005426 <_svfiprintf_r+0x7e>
 800540e:	465b      	mov	r3, fp
 8005410:	4622      	mov	r2, r4
 8005412:	4629      	mov	r1, r5
 8005414:	4638      	mov	r0, r7
 8005416:	f7ff ff6b 	bl	80052f0 <__ssputs_r>
 800541a:	3001      	adds	r0, #1
 800541c:	f000 80a7 	beq.w	800556e <_svfiprintf_r+0x1c6>
 8005420:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005422:	445a      	add	r2, fp
 8005424:	9209      	str	r2, [sp, #36]	@ 0x24
 8005426:	f89a 3000 	ldrb.w	r3, [sl]
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 809f 	beq.w	800556e <_svfiprintf_r+0x1c6>
 8005430:	2300      	movs	r3, #0
 8005432:	f04f 32ff 	mov.w	r2, #4294967295
 8005436:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800543a:	f10a 0a01 	add.w	sl, sl, #1
 800543e:	9304      	str	r3, [sp, #16]
 8005440:	9307      	str	r3, [sp, #28]
 8005442:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005446:	931a      	str	r3, [sp, #104]	@ 0x68
 8005448:	4654      	mov	r4, sl
 800544a:	2205      	movs	r2, #5
 800544c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005450:	484e      	ldr	r0, [pc, #312]	@ (800558c <_svfiprintf_r+0x1e4>)
 8005452:	f7fa fecd 	bl	80001f0 <memchr>
 8005456:	9a04      	ldr	r2, [sp, #16]
 8005458:	b9d8      	cbnz	r0, 8005492 <_svfiprintf_r+0xea>
 800545a:	06d0      	lsls	r0, r2, #27
 800545c:	bf44      	itt	mi
 800545e:	2320      	movmi	r3, #32
 8005460:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005464:	0711      	lsls	r1, r2, #28
 8005466:	bf44      	itt	mi
 8005468:	232b      	movmi	r3, #43	@ 0x2b
 800546a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800546e:	f89a 3000 	ldrb.w	r3, [sl]
 8005472:	2b2a      	cmp	r3, #42	@ 0x2a
 8005474:	d015      	beq.n	80054a2 <_svfiprintf_r+0xfa>
 8005476:	9a07      	ldr	r2, [sp, #28]
 8005478:	4654      	mov	r4, sl
 800547a:	2000      	movs	r0, #0
 800547c:	f04f 0c0a 	mov.w	ip, #10
 8005480:	4621      	mov	r1, r4
 8005482:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005486:	3b30      	subs	r3, #48	@ 0x30
 8005488:	2b09      	cmp	r3, #9
 800548a:	d94b      	bls.n	8005524 <_svfiprintf_r+0x17c>
 800548c:	b1b0      	cbz	r0, 80054bc <_svfiprintf_r+0x114>
 800548e:	9207      	str	r2, [sp, #28]
 8005490:	e014      	b.n	80054bc <_svfiprintf_r+0x114>
 8005492:	eba0 0308 	sub.w	r3, r0, r8
 8005496:	fa09 f303 	lsl.w	r3, r9, r3
 800549a:	4313      	orrs	r3, r2
 800549c:	9304      	str	r3, [sp, #16]
 800549e:	46a2      	mov	sl, r4
 80054a0:	e7d2      	b.n	8005448 <_svfiprintf_r+0xa0>
 80054a2:	9b03      	ldr	r3, [sp, #12]
 80054a4:	1d19      	adds	r1, r3, #4
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	9103      	str	r1, [sp, #12]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	bfbb      	ittet	lt
 80054ae:	425b      	neglt	r3, r3
 80054b0:	f042 0202 	orrlt.w	r2, r2, #2
 80054b4:	9307      	strge	r3, [sp, #28]
 80054b6:	9307      	strlt	r3, [sp, #28]
 80054b8:	bfb8      	it	lt
 80054ba:	9204      	strlt	r2, [sp, #16]
 80054bc:	7823      	ldrb	r3, [r4, #0]
 80054be:	2b2e      	cmp	r3, #46	@ 0x2e
 80054c0:	d10a      	bne.n	80054d8 <_svfiprintf_r+0x130>
 80054c2:	7863      	ldrb	r3, [r4, #1]
 80054c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80054c6:	d132      	bne.n	800552e <_svfiprintf_r+0x186>
 80054c8:	9b03      	ldr	r3, [sp, #12]
 80054ca:	1d1a      	adds	r2, r3, #4
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	9203      	str	r2, [sp, #12]
 80054d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80054d4:	3402      	adds	r4, #2
 80054d6:	9305      	str	r3, [sp, #20]
 80054d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800559c <_svfiprintf_r+0x1f4>
 80054dc:	7821      	ldrb	r1, [r4, #0]
 80054de:	2203      	movs	r2, #3
 80054e0:	4650      	mov	r0, sl
 80054e2:	f7fa fe85 	bl	80001f0 <memchr>
 80054e6:	b138      	cbz	r0, 80054f8 <_svfiprintf_r+0x150>
 80054e8:	9b04      	ldr	r3, [sp, #16]
 80054ea:	eba0 000a 	sub.w	r0, r0, sl
 80054ee:	2240      	movs	r2, #64	@ 0x40
 80054f0:	4082      	lsls	r2, r0
 80054f2:	4313      	orrs	r3, r2
 80054f4:	3401      	adds	r4, #1
 80054f6:	9304      	str	r3, [sp, #16]
 80054f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054fc:	4824      	ldr	r0, [pc, #144]	@ (8005590 <_svfiprintf_r+0x1e8>)
 80054fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005502:	2206      	movs	r2, #6
 8005504:	f7fa fe74 	bl	80001f0 <memchr>
 8005508:	2800      	cmp	r0, #0
 800550a:	d036      	beq.n	800557a <_svfiprintf_r+0x1d2>
 800550c:	4b21      	ldr	r3, [pc, #132]	@ (8005594 <_svfiprintf_r+0x1ec>)
 800550e:	bb1b      	cbnz	r3, 8005558 <_svfiprintf_r+0x1b0>
 8005510:	9b03      	ldr	r3, [sp, #12]
 8005512:	3307      	adds	r3, #7
 8005514:	f023 0307 	bic.w	r3, r3, #7
 8005518:	3308      	adds	r3, #8
 800551a:	9303      	str	r3, [sp, #12]
 800551c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800551e:	4433      	add	r3, r6
 8005520:	9309      	str	r3, [sp, #36]	@ 0x24
 8005522:	e76a      	b.n	80053fa <_svfiprintf_r+0x52>
 8005524:	fb0c 3202 	mla	r2, ip, r2, r3
 8005528:	460c      	mov	r4, r1
 800552a:	2001      	movs	r0, #1
 800552c:	e7a8      	b.n	8005480 <_svfiprintf_r+0xd8>
 800552e:	2300      	movs	r3, #0
 8005530:	3401      	adds	r4, #1
 8005532:	9305      	str	r3, [sp, #20]
 8005534:	4619      	mov	r1, r3
 8005536:	f04f 0c0a 	mov.w	ip, #10
 800553a:	4620      	mov	r0, r4
 800553c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005540:	3a30      	subs	r2, #48	@ 0x30
 8005542:	2a09      	cmp	r2, #9
 8005544:	d903      	bls.n	800554e <_svfiprintf_r+0x1a6>
 8005546:	2b00      	cmp	r3, #0
 8005548:	d0c6      	beq.n	80054d8 <_svfiprintf_r+0x130>
 800554a:	9105      	str	r1, [sp, #20]
 800554c:	e7c4      	b.n	80054d8 <_svfiprintf_r+0x130>
 800554e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005552:	4604      	mov	r4, r0
 8005554:	2301      	movs	r3, #1
 8005556:	e7f0      	b.n	800553a <_svfiprintf_r+0x192>
 8005558:	ab03      	add	r3, sp, #12
 800555a:	9300      	str	r3, [sp, #0]
 800555c:	462a      	mov	r2, r5
 800555e:	4b0e      	ldr	r3, [pc, #56]	@ (8005598 <_svfiprintf_r+0x1f0>)
 8005560:	a904      	add	r1, sp, #16
 8005562:	4638      	mov	r0, r7
 8005564:	f3af 8000 	nop.w
 8005568:	1c42      	adds	r2, r0, #1
 800556a:	4606      	mov	r6, r0
 800556c:	d1d6      	bne.n	800551c <_svfiprintf_r+0x174>
 800556e:	89ab      	ldrh	r3, [r5, #12]
 8005570:	065b      	lsls	r3, r3, #25
 8005572:	f53f af2d 	bmi.w	80053d0 <_svfiprintf_r+0x28>
 8005576:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005578:	e72c      	b.n	80053d4 <_svfiprintf_r+0x2c>
 800557a:	ab03      	add	r3, sp, #12
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	462a      	mov	r2, r5
 8005580:	4b05      	ldr	r3, [pc, #20]	@ (8005598 <_svfiprintf_r+0x1f0>)
 8005582:	a904      	add	r1, sp, #16
 8005584:	4638      	mov	r0, r7
 8005586:	f000 fb87 	bl	8005c98 <_printf_i>
 800558a:	e7ed      	b.n	8005568 <_svfiprintf_r+0x1c0>
 800558c:	08007538 	.word	0x08007538
 8005590:	08007542 	.word	0x08007542
 8005594:	00000000 	.word	0x00000000
 8005598:	080052f1 	.word	0x080052f1
 800559c:	0800753e 	.word	0x0800753e

080055a0 <_sungetc_r>:
 80055a0:	b538      	push	{r3, r4, r5, lr}
 80055a2:	1c4b      	adds	r3, r1, #1
 80055a4:	4614      	mov	r4, r2
 80055a6:	d103      	bne.n	80055b0 <_sungetc_r+0x10>
 80055a8:	f04f 35ff 	mov.w	r5, #4294967295
 80055ac:	4628      	mov	r0, r5
 80055ae:	bd38      	pop	{r3, r4, r5, pc}
 80055b0:	8993      	ldrh	r3, [r2, #12]
 80055b2:	f023 0320 	bic.w	r3, r3, #32
 80055b6:	8193      	strh	r3, [r2, #12]
 80055b8:	6853      	ldr	r3, [r2, #4]
 80055ba:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80055bc:	b2cd      	uxtb	r5, r1
 80055be:	b18a      	cbz	r2, 80055e4 <_sungetc_r+0x44>
 80055c0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80055c2:	429a      	cmp	r2, r3
 80055c4:	dd08      	ble.n	80055d8 <_sungetc_r+0x38>
 80055c6:	6823      	ldr	r3, [r4, #0]
 80055c8:	1e5a      	subs	r2, r3, #1
 80055ca:	6022      	str	r2, [r4, #0]
 80055cc:	f803 5c01 	strb.w	r5, [r3, #-1]
 80055d0:	6863      	ldr	r3, [r4, #4]
 80055d2:	3301      	adds	r3, #1
 80055d4:	6063      	str	r3, [r4, #4]
 80055d6:	e7e9      	b.n	80055ac <_sungetc_r+0xc>
 80055d8:	4621      	mov	r1, r4
 80055da:	f000 ff12 	bl	8006402 <__submore>
 80055de:	2800      	cmp	r0, #0
 80055e0:	d0f1      	beq.n	80055c6 <_sungetc_r+0x26>
 80055e2:	e7e1      	b.n	80055a8 <_sungetc_r+0x8>
 80055e4:	6921      	ldr	r1, [r4, #16]
 80055e6:	6822      	ldr	r2, [r4, #0]
 80055e8:	b141      	cbz	r1, 80055fc <_sungetc_r+0x5c>
 80055ea:	4291      	cmp	r1, r2
 80055ec:	d206      	bcs.n	80055fc <_sungetc_r+0x5c>
 80055ee:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80055f2:	42a9      	cmp	r1, r5
 80055f4:	d102      	bne.n	80055fc <_sungetc_r+0x5c>
 80055f6:	3a01      	subs	r2, #1
 80055f8:	6022      	str	r2, [r4, #0]
 80055fa:	e7ea      	b.n	80055d2 <_sungetc_r+0x32>
 80055fc:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8005600:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005604:	6363      	str	r3, [r4, #52]	@ 0x34
 8005606:	2303      	movs	r3, #3
 8005608:	63a3      	str	r3, [r4, #56]	@ 0x38
 800560a:	4623      	mov	r3, r4
 800560c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005610:	6023      	str	r3, [r4, #0]
 8005612:	2301      	movs	r3, #1
 8005614:	e7de      	b.n	80055d4 <_sungetc_r+0x34>

08005616 <__ssrefill_r>:
 8005616:	b510      	push	{r4, lr}
 8005618:	460c      	mov	r4, r1
 800561a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800561c:	b169      	cbz	r1, 800563a <__ssrefill_r+0x24>
 800561e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005622:	4299      	cmp	r1, r3
 8005624:	d001      	beq.n	800562a <__ssrefill_r+0x14>
 8005626:	f7ff fd6b 	bl	8005100 <_free_r>
 800562a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800562c:	6063      	str	r3, [r4, #4]
 800562e:	2000      	movs	r0, #0
 8005630:	6360      	str	r0, [r4, #52]	@ 0x34
 8005632:	b113      	cbz	r3, 800563a <__ssrefill_r+0x24>
 8005634:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005636:	6023      	str	r3, [r4, #0]
 8005638:	bd10      	pop	{r4, pc}
 800563a:	6923      	ldr	r3, [r4, #16]
 800563c:	6023      	str	r3, [r4, #0]
 800563e:	2300      	movs	r3, #0
 8005640:	6063      	str	r3, [r4, #4]
 8005642:	89a3      	ldrh	r3, [r4, #12]
 8005644:	f043 0320 	orr.w	r3, r3, #32
 8005648:	81a3      	strh	r3, [r4, #12]
 800564a:	f04f 30ff 	mov.w	r0, #4294967295
 800564e:	e7f3      	b.n	8005638 <__ssrefill_r+0x22>

08005650 <__ssvfiscanf_r>:
 8005650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005654:	460c      	mov	r4, r1
 8005656:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800565a:	2100      	movs	r1, #0
 800565c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8005660:	49a5      	ldr	r1, [pc, #660]	@ (80058f8 <__ssvfiscanf_r+0x2a8>)
 8005662:	91a0      	str	r1, [sp, #640]	@ 0x280
 8005664:	f10d 0804 	add.w	r8, sp, #4
 8005668:	49a4      	ldr	r1, [pc, #656]	@ (80058fc <__ssvfiscanf_r+0x2ac>)
 800566a:	4fa5      	ldr	r7, [pc, #660]	@ (8005900 <__ssvfiscanf_r+0x2b0>)
 800566c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8005670:	4606      	mov	r6, r0
 8005672:	91a1      	str	r1, [sp, #644]	@ 0x284
 8005674:	9300      	str	r3, [sp, #0]
 8005676:	7813      	ldrb	r3, [r2, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	f000 8158 	beq.w	800592e <__ssvfiscanf_r+0x2de>
 800567e:	5cf9      	ldrb	r1, [r7, r3]
 8005680:	f011 0108 	ands.w	r1, r1, #8
 8005684:	f102 0501 	add.w	r5, r2, #1
 8005688:	d019      	beq.n	80056be <__ssvfiscanf_r+0x6e>
 800568a:	6863      	ldr	r3, [r4, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	dd0f      	ble.n	80056b0 <__ssvfiscanf_r+0x60>
 8005690:	6823      	ldr	r3, [r4, #0]
 8005692:	781a      	ldrb	r2, [r3, #0]
 8005694:	5cba      	ldrb	r2, [r7, r2]
 8005696:	0712      	lsls	r2, r2, #28
 8005698:	d401      	bmi.n	800569e <__ssvfiscanf_r+0x4e>
 800569a:	462a      	mov	r2, r5
 800569c:	e7eb      	b.n	8005676 <__ssvfiscanf_r+0x26>
 800569e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80056a0:	3201      	adds	r2, #1
 80056a2:	9245      	str	r2, [sp, #276]	@ 0x114
 80056a4:	6862      	ldr	r2, [r4, #4]
 80056a6:	3301      	adds	r3, #1
 80056a8:	3a01      	subs	r2, #1
 80056aa:	6062      	str	r2, [r4, #4]
 80056ac:	6023      	str	r3, [r4, #0]
 80056ae:	e7ec      	b.n	800568a <__ssvfiscanf_r+0x3a>
 80056b0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80056b2:	4621      	mov	r1, r4
 80056b4:	4630      	mov	r0, r6
 80056b6:	4798      	blx	r3
 80056b8:	2800      	cmp	r0, #0
 80056ba:	d0e9      	beq.n	8005690 <__ssvfiscanf_r+0x40>
 80056bc:	e7ed      	b.n	800569a <__ssvfiscanf_r+0x4a>
 80056be:	2b25      	cmp	r3, #37	@ 0x25
 80056c0:	d012      	beq.n	80056e8 <__ssvfiscanf_r+0x98>
 80056c2:	4699      	mov	r9, r3
 80056c4:	6863      	ldr	r3, [r4, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	f340 8093 	ble.w	80057f2 <__ssvfiscanf_r+0x1a2>
 80056cc:	6822      	ldr	r2, [r4, #0]
 80056ce:	7813      	ldrb	r3, [r2, #0]
 80056d0:	454b      	cmp	r3, r9
 80056d2:	f040 812c 	bne.w	800592e <__ssvfiscanf_r+0x2de>
 80056d6:	6863      	ldr	r3, [r4, #4]
 80056d8:	3b01      	subs	r3, #1
 80056da:	6063      	str	r3, [r4, #4]
 80056dc:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80056de:	3201      	adds	r2, #1
 80056e0:	3301      	adds	r3, #1
 80056e2:	6022      	str	r2, [r4, #0]
 80056e4:	9345      	str	r3, [sp, #276]	@ 0x114
 80056e6:	e7d8      	b.n	800569a <__ssvfiscanf_r+0x4a>
 80056e8:	9141      	str	r1, [sp, #260]	@ 0x104
 80056ea:	9143      	str	r1, [sp, #268]	@ 0x10c
 80056ec:	7853      	ldrb	r3, [r2, #1]
 80056ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80056f0:	bf02      	ittt	eq
 80056f2:	2310      	moveq	r3, #16
 80056f4:	1c95      	addeq	r5, r2, #2
 80056f6:	9341      	streq	r3, [sp, #260]	@ 0x104
 80056f8:	220a      	movs	r2, #10
 80056fa:	46a9      	mov	r9, r5
 80056fc:	f819 1b01 	ldrb.w	r1, [r9], #1
 8005700:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8005704:	2b09      	cmp	r3, #9
 8005706:	d91e      	bls.n	8005746 <__ssvfiscanf_r+0xf6>
 8005708:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8005904 <__ssvfiscanf_r+0x2b4>
 800570c:	2203      	movs	r2, #3
 800570e:	4650      	mov	r0, sl
 8005710:	f7fa fd6e 	bl	80001f0 <memchr>
 8005714:	b138      	cbz	r0, 8005726 <__ssvfiscanf_r+0xd6>
 8005716:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005718:	eba0 000a 	sub.w	r0, r0, sl
 800571c:	2301      	movs	r3, #1
 800571e:	4083      	lsls	r3, r0
 8005720:	4313      	orrs	r3, r2
 8005722:	9341      	str	r3, [sp, #260]	@ 0x104
 8005724:	464d      	mov	r5, r9
 8005726:	f815 3b01 	ldrb.w	r3, [r5], #1
 800572a:	2b78      	cmp	r3, #120	@ 0x78
 800572c:	d806      	bhi.n	800573c <__ssvfiscanf_r+0xec>
 800572e:	2b57      	cmp	r3, #87	@ 0x57
 8005730:	d810      	bhi.n	8005754 <__ssvfiscanf_r+0x104>
 8005732:	2b25      	cmp	r3, #37	@ 0x25
 8005734:	d0c5      	beq.n	80056c2 <__ssvfiscanf_r+0x72>
 8005736:	d857      	bhi.n	80057e8 <__ssvfiscanf_r+0x198>
 8005738:	2b00      	cmp	r3, #0
 800573a:	d065      	beq.n	8005808 <__ssvfiscanf_r+0x1b8>
 800573c:	2303      	movs	r3, #3
 800573e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8005740:	230a      	movs	r3, #10
 8005742:	9342      	str	r3, [sp, #264]	@ 0x108
 8005744:	e078      	b.n	8005838 <__ssvfiscanf_r+0x1e8>
 8005746:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8005748:	fb02 1103 	mla	r1, r2, r3, r1
 800574c:	3930      	subs	r1, #48	@ 0x30
 800574e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8005750:	464d      	mov	r5, r9
 8005752:	e7d2      	b.n	80056fa <__ssvfiscanf_r+0xaa>
 8005754:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8005758:	2a20      	cmp	r2, #32
 800575a:	d8ef      	bhi.n	800573c <__ssvfiscanf_r+0xec>
 800575c:	a101      	add	r1, pc, #4	@ (adr r1, 8005764 <__ssvfiscanf_r+0x114>)
 800575e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005762:	bf00      	nop
 8005764:	08005817 	.word	0x08005817
 8005768:	0800573d 	.word	0x0800573d
 800576c:	0800573d 	.word	0x0800573d
 8005770:	08005871 	.word	0x08005871
 8005774:	0800573d 	.word	0x0800573d
 8005778:	0800573d 	.word	0x0800573d
 800577c:	0800573d 	.word	0x0800573d
 8005780:	0800573d 	.word	0x0800573d
 8005784:	0800573d 	.word	0x0800573d
 8005788:	0800573d 	.word	0x0800573d
 800578c:	0800573d 	.word	0x0800573d
 8005790:	08005887 	.word	0x08005887
 8005794:	0800586d 	.word	0x0800586d
 8005798:	080057ef 	.word	0x080057ef
 800579c:	080057ef 	.word	0x080057ef
 80057a0:	080057ef 	.word	0x080057ef
 80057a4:	0800573d 	.word	0x0800573d
 80057a8:	08005829 	.word	0x08005829
 80057ac:	0800573d 	.word	0x0800573d
 80057b0:	0800573d 	.word	0x0800573d
 80057b4:	0800573d 	.word	0x0800573d
 80057b8:	0800573d 	.word	0x0800573d
 80057bc:	08005897 	.word	0x08005897
 80057c0:	08005831 	.word	0x08005831
 80057c4:	0800580f 	.word	0x0800580f
 80057c8:	0800573d 	.word	0x0800573d
 80057cc:	0800573d 	.word	0x0800573d
 80057d0:	08005893 	.word	0x08005893
 80057d4:	0800573d 	.word	0x0800573d
 80057d8:	0800586d 	.word	0x0800586d
 80057dc:	0800573d 	.word	0x0800573d
 80057e0:	0800573d 	.word	0x0800573d
 80057e4:	08005817 	.word	0x08005817
 80057e8:	3b45      	subs	r3, #69	@ 0x45
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d8a6      	bhi.n	800573c <__ssvfiscanf_r+0xec>
 80057ee:	2305      	movs	r3, #5
 80057f0:	e021      	b.n	8005836 <__ssvfiscanf_r+0x1e6>
 80057f2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80057f4:	4621      	mov	r1, r4
 80057f6:	4630      	mov	r0, r6
 80057f8:	4798      	blx	r3
 80057fa:	2800      	cmp	r0, #0
 80057fc:	f43f af66 	beq.w	80056cc <__ssvfiscanf_r+0x7c>
 8005800:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8005802:	2800      	cmp	r0, #0
 8005804:	f040 808b 	bne.w	800591e <__ssvfiscanf_r+0x2ce>
 8005808:	f04f 30ff 	mov.w	r0, #4294967295
 800580c:	e08b      	b.n	8005926 <__ssvfiscanf_r+0x2d6>
 800580e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005810:	f042 0220 	orr.w	r2, r2, #32
 8005814:	9241      	str	r2, [sp, #260]	@ 0x104
 8005816:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005818:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800581c:	9241      	str	r2, [sp, #260]	@ 0x104
 800581e:	2210      	movs	r2, #16
 8005820:	2b6e      	cmp	r3, #110	@ 0x6e
 8005822:	9242      	str	r2, [sp, #264]	@ 0x108
 8005824:	d902      	bls.n	800582c <__ssvfiscanf_r+0x1dc>
 8005826:	e005      	b.n	8005834 <__ssvfiscanf_r+0x1e4>
 8005828:	2300      	movs	r3, #0
 800582a:	9342      	str	r3, [sp, #264]	@ 0x108
 800582c:	2303      	movs	r3, #3
 800582e:	e002      	b.n	8005836 <__ssvfiscanf_r+0x1e6>
 8005830:	2308      	movs	r3, #8
 8005832:	9342      	str	r3, [sp, #264]	@ 0x108
 8005834:	2304      	movs	r3, #4
 8005836:	9347      	str	r3, [sp, #284]	@ 0x11c
 8005838:	6863      	ldr	r3, [r4, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	dd39      	ble.n	80058b2 <__ssvfiscanf_r+0x262>
 800583e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8005840:	0659      	lsls	r1, r3, #25
 8005842:	d404      	bmi.n	800584e <__ssvfiscanf_r+0x1fe>
 8005844:	6823      	ldr	r3, [r4, #0]
 8005846:	781a      	ldrb	r2, [r3, #0]
 8005848:	5cba      	ldrb	r2, [r7, r2]
 800584a:	0712      	lsls	r2, r2, #28
 800584c:	d438      	bmi.n	80058c0 <__ssvfiscanf_r+0x270>
 800584e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8005850:	2b02      	cmp	r3, #2
 8005852:	dc47      	bgt.n	80058e4 <__ssvfiscanf_r+0x294>
 8005854:	466b      	mov	r3, sp
 8005856:	4622      	mov	r2, r4
 8005858:	a941      	add	r1, sp, #260	@ 0x104
 800585a:	4630      	mov	r0, r6
 800585c:	f000 fb3c 	bl	8005ed8 <_scanf_chars>
 8005860:	2801      	cmp	r0, #1
 8005862:	d064      	beq.n	800592e <__ssvfiscanf_r+0x2de>
 8005864:	2802      	cmp	r0, #2
 8005866:	f47f af18 	bne.w	800569a <__ssvfiscanf_r+0x4a>
 800586a:	e7c9      	b.n	8005800 <__ssvfiscanf_r+0x1b0>
 800586c:	220a      	movs	r2, #10
 800586e:	e7d7      	b.n	8005820 <__ssvfiscanf_r+0x1d0>
 8005870:	4629      	mov	r1, r5
 8005872:	4640      	mov	r0, r8
 8005874:	f000 fd8c 	bl	8006390 <__sccl>
 8005878:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800587a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800587e:	9341      	str	r3, [sp, #260]	@ 0x104
 8005880:	4605      	mov	r5, r0
 8005882:	2301      	movs	r3, #1
 8005884:	e7d7      	b.n	8005836 <__ssvfiscanf_r+0x1e6>
 8005886:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8005888:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800588c:	9341      	str	r3, [sp, #260]	@ 0x104
 800588e:	2300      	movs	r3, #0
 8005890:	e7d1      	b.n	8005836 <__ssvfiscanf_r+0x1e6>
 8005892:	2302      	movs	r3, #2
 8005894:	e7cf      	b.n	8005836 <__ssvfiscanf_r+0x1e6>
 8005896:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8005898:	06c3      	lsls	r3, r0, #27
 800589a:	f53f aefe 	bmi.w	800569a <__ssvfiscanf_r+0x4a>
 800589e:	9b00      	ldr	r3, [sp, #0]
 80058a0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80058a2:	1d19      	adds	r1, r3, #4
 80058a4:	9100      	str	r1, [sp, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	07c0      	lsls	r0, r0, #31
 80058aa:	bf4c      	ite	mi
 80058ac:	801a      	strhmi	r2, [r3, #0]
 80058ae:	601a      	strpl	r2, [r3, #0]
 80058b0:	e6f3      	b.n	800569a <__ssvfiscanf_r+0x4a>
 80058b2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80058b4:	4621      	mov	r1, r4
 80058b6:	4630      	mov	r0, r6
 80058b8:	4798      	blx	r3
 80058ba:	2800      	cmp	r0, #0
 80058bc:	d0bf      	beq.n	800583e <__ssvfiscanf_r+0x1ee>
 80058be:	e79f      	b.n	8005800 <__ssvfiscanf_r+0x1b0>
 80058c0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80058c2:	3201      	adds	r2, #1
 80058c4:	9245      	str	r2, [sp, #276]	@ 0x114
 80058c6:	6862      	ldr	r2, [r4, #4]
 80058c8:	3a01      	subs	r2, #1
 80058ca:	2a00      	cmp	r2, #0
 80058cc:	6062      	str	r2, [r4, #4]
 80058ce:	dd02      	ble.n	80058d6 <__ssvfiscanf_r+0x286>
 80058d0:	3301      	adds	r3, #1
 80058d2:	6023      	str	r3, [r4, #0]
 80058d4:	e7b6      	b.n	8005844 <__ssvfiscanf_r+0x1f4>
 80058d6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80058d8:	4621      	mov	r1, r4
 80058da:	4630      	mov	r0, r6
 80058dc:	4798      	blx	r3
 80058de:	2800      	cmp	r0, #0
 80058e0:	d0b0      	beq.n	8005844 <__ssvfiscanf_r+0x1f4>
 80058e2:	e78d      	b.n	8005800 <__ssvfiscanf_r+0x1b0>
 80058e4:	2b04      	cmp	r3, #4
 80058e6:	dc0f      	bgt.n	8005908 <__ssvfiscanf_r+0x2b8>
 80058e8:	466b      	mov	r3, sp
 80058ea:	4622      	mov	r2, r4
 80058ec:	a941      	add	r1, sp, #260	@ 0x104
 80058ee:	4630      	mov	r0, r6
 80058f0:	f000 fb4c 	bl	8005f8c <_scanf_i>
 80058f4:	e7b4      	b.n	8005860 <__ssvfiscanf_r+0x210>
 80058f6:	bf00      	nop
 80058f8:	080055a1 	.word	0x080055a1
 80058fc:	08005617 	.word	0x08005617
 8005900:	08007587 	.word	0x08007587
 8005904:	0800753e 	.word	0x0800753e
 8005908:	4b0a      	ldr	r3, [pc, #40]	@ (8005934 <__ssvfiscanf_r+0x2e4>)
 800590a:	2b00      	cmp	r3, #0
 800590c:	f43f aec5 	beq.w	800569a <__ssvfiscanf_r+0x4a>
 8005910:	466b      	mov	r3, sp
 8005912:	4622      	mov	r2, r4
 8005914:	a941      	add	r1, sp, #260	@ 0x104
 8005916:	4630      	mov	r0, r6
 8005918:	f3af 8000 	nop.w
 800591c:	e7a0      	b.n	8005860 <__ssvfiscanf_r+0x210>
 800591e:	89a3      	ldrh	r3, [r4, #12]
 8005920:	065b      	lsls	r3, r3, #25
 8005922:	f53f af71 	bmi.w	8005808 <__ssvfiscanf_r+0x1b8>
 8005926:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800592a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800592e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8005930:	e7f9      	b.n	8005926 <__ssvfiscanf_r+0x2d6>
 8005932:	bf00      	nop
 8005934:	00000000 	.word	0x00000000

08005938 <__sfputc_r>:
 8005938:	6893      	ldr	r3, [r2, #8]
 800593a:	3b01      	subs	r3, #1
 800593c:	2b00      	cmp	r3, #0
 800593e:	b410      	push	{r4}
 8005940:	6093      	str	r3, [r2, #8]
 8005942:	da08      	bge.n	8005956 <__sfputc_r+0x1e>
 8005944:	6994      	ldr	r4, [r2, #24]
 8005946:	42a3      	cmp	r3, r4
 8005948:	db01      	blt.n	800594e <__sfputc_r+0x16>
 800594a:	290a      	cmp	r1, #10
 800594c:	d103      	bne.n	8005956 <__sfputc_r+0x1e>
 800594e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005952:	f7ff ba6e 	b.w	8004e32 <__swbuf_r>
 8005956:	6813      	ldr	r3, [r2, #0]
 8005958:	1c58      	adds	r0, r3, #1
 800595a:	6010      	str	r0, [r2, #0]
 800595c:	7019      	strb	r1, [r3, #0]
 800595e:	4608      	mov	r0, r1
 8005960:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005964:	4770      	bx	lr

08005966 <__sfputs_r>:
 8005966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005968:	4606      	mov	r6, r0
 800596a:	460f      	mov	r7, r1
 800596c:	4614      	mov	r4, r2
 800596e:	18d5      	adds	r5, r2, r3
 8005970:	42ac      	cmp	r4, r5
 8005972:	d101      	bne.n	8005978 <__sfputs_r+0x12>
 8005974:	2000      	movs	r0, #0
 8005976:	e007      	b.n	8005988 <__sfputs_r+0x22>
 8005978:	f814 1b01 	ldrb.w	r1, [r4], #1
 800597c:	463a      	mov	r2, r7
 800597e:	4630      	mov	r0, r6
 8005980:	f7ff ffda 	bl	8005938 <__sfputc_r>
 8005984:	1c43      	adds	r3, r0, #1
 8005986:	d1f3      	bne.n	8005970 <__sfputs_r+0xa>
 8005988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800598c <_vfiprintf_r>:
 800598c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005990:	460d      	mov	r5, r1
 8005992:	b09d      	sub	sp, #116	@ 0x74
 8005994:	4614      	mov	r4, r2
 8005996:	4698      	mov	r8, r3
 8005998:	4606      	mov	r6, r0
 800599a:	b118      	cbz	r0, 80059a4 <_vfiprintf_r+0x18>
 800599c:	6a03      	ldr	r3, [r0, #32]
 800599e:	b90b      	cbnz	r3, 80059a4 <_vfiprintf_r+0x18>
 80059a0:	f7ff f8de 	bl	8004b60 <__sinit>
 80059a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80059a6:	07d9      	lsls	r1, r3, #31
 80059a8:	d405      	bmi.n	80059b6 <_vfiprintf_r+0x2a>
 80059aa:	89ab      	ldrh	r3, [r5, #12]
 80059ac:	059a      	lsls	r2, r3, #22
 80059ae:	d402      	bmi.n	80059b6 <_vfiprintf_r+0x2a>
 80059b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80059b2:	f7ff fb94 	bl	80050de <__retarget_lock_acquire_recursive>
 80059b6:	89ab      	ldrh	r3, [r5, #12]
 80059b8:	071b      	lsls	r3, r3, #28
 80059ba:	d501      	bpl.n	80059c0 <_vfiprintf_r+0x34>
 80059bc:	692b      	ldr	r3, [r5, #16]
 80059be:	b99b      	cbnz	r3, 80059e8 <_vfiprintf_r+0x5c>
 80059c0:	4629      	mov	r1, r5
 80059c2:	4630      	mov	r0, r6
 80059c4:	f7ff fa74 	bl	8004eb0 <__swsetup_r>
 80059c8:	b170      	cbz	r0, 80059e8 <_vfiprintf_r+0x5c>
 80059ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80059cc:	07dc      	lsls	r4, r3, #31
 80059ce:	d504      	bpl.n	80059da <_vfiprintf_r+0x4e>
 80059d0:	f04f 30ff 	mov.w	r0, #4294967295
 80059d4:	b01d      	add	sp, #116	@ 0x74
 80059d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059da:	89ab      	ldrh	r3, [r5, #12]
 80059dc:	0598      	lsls	r0, r3, #22
 80059de:	d4f7      	bmi.n	80059d0 <_vfiprintf_r+0x44>
 80059e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80059e2:	f7ff fb7d 	bl	80050e0 <__retarget_lock_release_recursive>
 80059e6:	e7f3      	b.n	80059d0 <_vfiprintf_r+0x44>
 80059e8:	2300      	movs	r3, #0
 80059ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80059ec:	2320      	movs	r3, #32
 80059ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80059f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80059f6:	2330      	movs	r3, #48	@ 0x30
 80059f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005ba8 <_vfiprintf_r+0x21c>
 80059fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005a00:	f04f 0901 	mov.w	r9, #1
 8005a04:	4623      	mov	r3, r4
 8005a06:	469a      	mov	sl, r3
 8005a08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a0c:	b10a      	cbz	r2, 8005a12 <_vfiprintf_r+0x86>
 8005a0e:	2a25      	cmp	r2, #37	@ 0x25
 8005a10:	d1f9      	bne.n	8005a06 <_vfiprintf_r+0x7a>
 8005a12:	ebba 0b04 	subs.w	fp, sl, r4
 8005a16:	d00b      	beq.n	8005a30 <_vfiprintf_r+0xa4>
 8005a18:	465b      	mov	r3, fp
 8005a1a:	4622      	mov	r2, r4
 8005a1c:	4629      	mov	r1, r5
 8005a1e:	4630      	mov	r0, r6
 8005a20:	f7ff ffa1 	bl	8005966 <__sfputs_r>
 8005a24:	3001      	adds	r0, #1
 8005a26:	f000 80a7 	beq.w	8005b78 <_vfiprintf_r+0x1ec>
 8005a2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a2c:	445a      	add	r2, fp
 8005a2e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a30:	f89a 3000 	ldrb.w	r3, [sl]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 809f 	beq.w	8005b78 <_vfiprintf_r+0x1ec>
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a44:	f10a 0a01 	add.w	sl, sl, #1
 8005a48:	9304      	str	r3, [sp, #16]
 8005a4a:	9307      	str	r3, [sp, #28]
 8005a4c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a50:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a52:	4654      	mov	r4, sl
 8005a54:	2205      	movs	r2, #5
 8005a56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a5a:	4853      	ldr	r0, [pc, #332]	@ (8005ba8 <_vfiprintf_r+0x21c>)
 8005a5c:	f7fa fbc8 	bl	80001f0 <memchr>
 8005a60:	9a04      	ldr	r2, [sp, #16]
 8005a62:	b9d8      	cbnz	r0, 8005a9c <_vfiprintf_r+0x110>
 8005a64:	06d1      	lsls	r1, r2, #27
 8005a66:	bf44      	itt	mi
 8005a68:	2320      	movmi	r3, #32
 8005a6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a6e:	0713      	lsls	r3, r2, #28
 8005a70:	bf44      	itt	mi
 8005a72:	232b      	movmi	r3, #43	@ 0x2b
 8005a74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a78:	f89a 3000 	ldrb.w	r3, [sl]
 8005a7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a7e:	d015      	beq.n	8005aac <_vfiprintf_r+0x120>
 8005a80:	9a07      	ldr	r2, [sp, #28]
 8005a82:	4654      	mov	r4, sl
 8005a84:	2000      	movs	r0, #0
 8005a86:	f04f 0c0a 	mov.w	ip, #10
 8005a8a:	4621      	mov	r1, r4
 8005a8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a90:	3b30      	subs	r3, #48	@ 0x30
 8005a92:	2b09      	cmp	r3, #9
 8005a94:	d94b      	bls.n	8005b2e <_vfiprintf_r+0x1a2>
 8005a96:	b1b0      	cbz	r0, 8005ac6 <_vfiprintf_r+0x13a>
 8005a98:	9207      	str	r2, [sp, #28]
 8005a9a:	e014      	b.n	8005ac6 <_vfiprintf_r+0x13a>
 8005a9c:	eba0 0308 	sub.w	r3, r0, r8
 8005aa0:	fa09 f303 	lsl.w	r3, r9, r3
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	9304      	str	r3, [sp, #16]
 8005aa8:	46a2      	mov	sl, r4
 8005aaa:	e7d2      	b.n	8005a52 <_vfiprintf_r+0xc6>
 8005aac:	9b03      	ldr	r3, [sp, #12]
 8005aae:	1d19      	adds	r1, r3, #4
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	9103      	str	r1, [sp, #12]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	bfbb      	ittet	lt
 8005ab8:	425b      	neglt	r3, r3
 8005aba:	f042 0202 	orrlt.w	r2, r2, #2
 8005abe:	9307      	strge	r3, [sp, #28]
 8005ac0:	9307      	strlt	r3, [sp, #28]
 8005ac2:	bfb8      	it	lt
 8005ac4:	9204      	strlt	r2, [sp, #16]
 8005ac6:	7823      	ldrb	r3, [r4, #0]
 8005ac8:	2b2e      	cmp	r3, #46	@ 0x2e
 8005aca:	d10a      	bne.n	8005ae2 <_vfiprintf_r+0x156>
 8005acc:	7863      	ldrb	r3, [r4, #1]
 8005ace:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ad0:	d132      	bne.n	8005b38 <_vfiprintf_r+0x1ac>
 8005ad2:	9b03      	ldr	r3, [sp, #12]
 8005ad4:	1d1a      	adds	r2, r3, #4
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	9203      	str	r2, [sp, #12]
 8005ada:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005ade:	3402      	adds	r4, #2
 8005ae0:	9305      	str	r3, [sp, #20]
 8005ae2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005bb8 <_vfiprintf_r+0x22c>
 8005ae6:	7821      	ldrb	r1, [r4, #0]
 8005ae8:	2203      	movs	r2, #3
 8005aea:	4650      	mov	r0, sl
 8005aec:	f7fa fb80 	bl	80001f0 <memchr>
 8005af0:	b138      	cbz	r0, 8005b02 <_vfiprintf_r+0x176>
 8005af2:	9b04      	ldr	r3, [sp, #16]
 8005af4:	eba0 000a 	sub.w	r0, r0, sl
 8005af8:	2240      	movs	r2, #64	@ 0x40
 8005afa:	4082      	lsls	r2, r0
 8005afc:	4313      	orrs	r3, r2
 8005afe:	3401      	adds	r4, #1
 8005b00:	9304      	str	r3, [sp, #16]
 8005b02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b06:	4829      	ldr	r0, [pc, #164]	@ (8005bac <_vfiprintf_r+0x220>)
 8005b08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005b0c:	2206      	movs	r2, #6
 8005b0e:	f7fa fb6f 	bl	80001f0 <memchr>
 8005b12:	2800      	cmp	r0, #0
 8005b14:	d03f      	beq.n	8005b96 <_vfiprintf_r+0x20a>
 8005b16:	4b26      	ldr	r3, [pc, #152]	@ (8005bb0 <_vfiprintf_r+0x224>)
 8005b18:	bb1b      	cbnz	r3, 8005b62 <_vfiprintf_r+0x1d6>
 8005b1a:	9b03      	ldr	r3, [sp, #12]
 8005b1c:	3307      	adds	r3, #7
 8005b1e:	f023 0307 	bic.w	r3, r3, #7
 8005b22:	3308      	adds	r3, #8
 8005b24:	9303      	str	r3, [sp, #12]
 8005b26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b28:	443b      	add	r3, r7
 8005b2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b2c:	e76a      	b.n	8005a04 <_vfiprintf_r+0x78>
 8005b2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b32:	460c      	mov	r4, r1
 8005b34:	2001      	movs	r0, #1
 8005b36:	e7a8      	b.n	8005a8a <_vfiprintf_r+0xfe>
 8005b38:	2300      	movs	r3, #0
 8005b3a:	3401      	adds	r4, #1
 8005b3c:	9305      	str	r3, [sp, #20]
 8005b3e:	4619      	mov	r1, r3
 8005b40:	f04f 0c0a 	mov.w	ip, #10
 8005b44:	4620      	mov	r0, r4
 8005b46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b4a:	3a30      	subs	r2, #48	@ 0x30
 8005b4c:	2a09      	cmp	r2, #9
 8005b4e:	d903      	bls.n	8005b58 <_vfiprintf_r+0x1cc>
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d0c6      	beq.n	8005ae2 <_vfiprintf_r+0x156>
 8005b54:	9105      	str	r1, [sp, #20]
 8005b56:	e7c4      	b.n	8005ae2 <_vfiprintf_r+0x156>
 8005b58:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b5c:	4604      	mov	r4, r0
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e7f0      	b.n	8005b44 <_vfiprintf_r+0x1b8>
 8005b62:	ab03      	add	r3, sp, #12
 8005b64:	9300      	str	r3, [sp, #0]
 8005b66:	462a      	mov	r2, r5
 8005b68:	4b12      	ldr	r3, [pc, #72]	@ (8005bb4 <_vfiprintf_r+0x228>)
 8005b6a:	a904      	add	r1, sp, #16
 8005b6c:	4630      	mov	r0, r6
 8005b6e:	f3af 8000 	nop.w
 8005b72:	4607      	mov	r7, r0
 8005b74:	1c78      	adds	r0, r7, #1
 8005b76:	d1d6      	bne.n	8005b26 <_vfiprintf_r+0x19a>
 8005b78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b7a:	07d9      	lsls	r1, r3, #31
 8005b7c:	d405      	bmi.n	8005b8a <_vfiprintf_r+0x1fe>
 8005b7e:	89ab      	ldrh	r3, [r5, #12]
 8005b80:	059a      	lsls	r2, r3, #22
 8005b82:	d402      	bmi.n	8005b8a <_vfiprintf_r+0x1fe>
 8005b84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b86:	f7ff faab 	bl	80050e0 <__retarget_lock_release_recursive>
 8005b8a:	89ab      	ldrh	r3, [r5, #12]
 8005b8c:	065b      	lsls	r3, r3, #25
 8005b8e:	f53f af1f 	bmi.w	80059d0 <_vfiprintf_r+0x44>
 8005b92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005b94:	e71e      	b.n	80059d4 <_vfiprintf_r+0x48>
 8005b96:	ab03      	add	r3, sp, #12
 8005b98:	9300      	str	r3, [sp, #0]
 8005b9a:	462a      	mov	r2, r5
 8005b9c:	4b05      	ldr	r3, [pc, #20]	@ (8005bb4 <_vfiprintf_r+0x228>)
 8005b9e:	a904      	add	r1, sp, #16
 8005ba0:	4630      	mov	r0, r6
 8005ba2:	f000 f879 	bl	8005c98 <_printf_i>
 8005ba6:	e7e4      	b.n	8005b72 <_vfiprintf_r+0x1e6>
 8005ba8:	08007538 	.word	0x08007538
 8005bac:	08007542 	.word	0x08007542
 8005bb0:	00000000 	.word	0x00000000
 8005bb4:	08005967 	.word	0x08005967
 8005bb8:	0800753e 	.word	0x0800753e

08005bbc <_printf_common>:
 8005bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bc0:	4616      	mov	r6, r2
 8005bc2:	4698      	mov	r8, r3
 8005bc4:	688a      	ldr	r2, [r1, #8]
 8005bc6:	690b      	ldr	r3, [r1, #16]
 8005bc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	bfb8      	it	lt
 8005bd0:	4613      	movlt	r3, r2
 8005bd2:	6033      	str	r3, [r6, #0]
 8005bd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005bd8:	4607      	mov	r7, r0
 8005bda:	460c      	mov	r4, r1
 8005bdc:	b10a      	cbz	r2, 8005be2 <_printf_common+0x26>
 8005bde:	3301      	adds	r3, #1
 8005be0:	6033      	str	r3, [r6, #0]
 8005be2:	6823      	ldr	r3, [r4, #0]
 8005be4:	0699      	lsls	r1, r3, #26
 8005be6:	bf42      	ittt	mi
 8005be8:	6833      	ldrmi	r3, [r6, #0]
 8005bea:	3302      	addmi	r3, #2
 8005bec:	6033      	strmi	r3, [r6, #0]
 8005bee:	6825      	ldr	r5, [r4, #0]
 8005bf0:	f015 0506 	ands.w	r5, r5, #6
 8005bf4:	d106      	bne.n	8005c04 <_printf_common+0x48>
 8005bf6:	f104 0a19 	add.w	sl, r4, #25
 8005bfa:	68e3      	ldr	r3, [r4, #12]
 8005bfc:	6832      	ldr	r2, [r6, #0]
 8005bfe:	1a9b      	subs	r3, r3, r2
 8005c00:	42ab      	cmp	r3, r5
 8005c02:	dc26      	bgt.n	8005c52 <_printf_common+0x96>
 8005c04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005c08:	6822      	ldr	r2, [r4, #0]
 8005c0a:	3b00      	subs	r3, #0
 8005c0c:	bf18      	it	ne
 8005c0e:	2301      	movne	r3, #1
 8005c10:	0692      	lsls	r2, r2, #26
 8005c12:	d42b      	bmi.n	8005c6c <_printf_common+0xb0>
 8005c14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005c18:	4641      	mov	r1, r8
 8005c1a:	4638      	mov	r0, r7
 8005c1c:	47c8      	blx	r9
 8005c1e:	3001      	adds	r0, #1
 8005c20:	d01e      	beq.n	8005c60 <_printf_common+0xa4>
 8005c22:	6823      	ldr	r3, [r4, #0]
 8005c24:	6922      	ldr	r2, [r4, #16]
 8005c26:	f003 0306 	and.w	r3, r3, #6
 8005c2a:	2b04      	cmp	r3, #4
 8005c2c:	bf02      	ittt	eq
 8005c2e:	68e5      	ldreq	r5, [r4, #12]
 8005c30:	6833      	ldreq	r3, [r6, #0]
 8005c32:	1aed      	subeq	r5, r5, r3
 8005c34:	68a3      	ldr	r3, [r4, #8]
 8005c36:	bf0c      	ite	eq
 8005c38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c3c:	2500      	movne	r5, #0
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	bfc4      	itt	gt
 8005c42:	1a9b      	subgt	r3, r3, r2
 8005c44:	18ed      	addgt	r5, r5, r3
 8005c46:	2600      	movs	r6, #0
 8005c48:	341a      	adds	r4, #26
 8005c4a:	42b5      	cmp	r5, r6
 8005c4c:	d11a      	bne.n	8005c84 <_printf_common+0xc8>
 8005c4e:	2000      	movs	r0, #0
 8005c50:	e008      	b.n	8005c64 <_printf_common+0xa8>
 8005c52:	2301      	movs	r3, #1
 8005c54:	4652      	mov	r2, sl
 8005c56:	4641      	mov	r1, r8
 8005c58:	4638      	mov	r0, r7
 8005c5a:	47c8      	blx	r9
 8005c5c:	3001      	adds	r0, #1
 8005c5e:	d103      	bne.n	8005c68 <_printf_common+0xac>
 8005c60:	f04f 30ff 	mov.w	r0, #4294967295
 8005c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c68:	3501      	adds	r5, #1
 8005c6a:	e7c6      	b.n	8005bfa <_printf_common+0x3e>
 8005c6c:	18e1      	adds	r1, r4, r3
 8005c6e:	1c5a      	adds	r2, r3, #1
 8005c70:	2030      	movs	r0, #48	@ 0x30
 8005c72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005c76:	4422      	add	r2, r4
 8005c78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005c7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005c80:	3302      	adds	r3, #2
 8005c82:	e7c7      	b.n	8005c14 <_printf_common+0x58>
 8005c84:	2301      	movs	r3, #1
 8005c86:	4622      	mov	r2, r4
 8005c88:	4641      	mov	r1, r8
 8005c8a:	4638      	mov	r0, r7
 8005c8c:	47c8      	blx	r9
 8005c8e:	3001      	adds	r0, #1
 8005c90:	d0e6      	beq.n	8005c60 <_printf_common+0xa4>
 8005c92:	3601      	adds	r6, #1
 8005c94:	e7d9      	b.n	8005c4a <_printf_common+0x8e>
	...

08005c98 <_printf_i>:
 8005c98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c9c:	7e0f      	ldrb	r7, [r1, #24]
 8005c9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005ca0:	2f78      	cmp	r7, #120	@ 0x78
 8005ca2:	4691      	mov	r9, r2
 8005ca4:	4680      	mov	r8, r0
 8005ca6:	460c      	mov	r4, r1
 8005ca8:	469a      	mov	sl, r3
 8005caa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005cae:	d807      	bhi.n	8005cc0 <_printf_i+0x28>
 8005cb0:	2f62      	cmp	r7, #98	@ 0x62
 8005cb2:	d80a      	bhi.n	8005cca <_printf_i+0x32>
 8005cb4:	2f00      	cmp	r7, #0
 8005cb6:	f000 80d2 	beq.w	8005e5e <_printf_i+0x1c6>
 8005cba:	2f58      	cmp	r7, #88	@ 0x58
 8005cbc:	f000 80b9 	beq.w	8005e32 <_printf_i+0x19a>
 8005cc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005cc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005cc8:	e03a      	b.n	8005d40 <_printf_i+0xa8>
 8005cca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005cce:	2b15      	cmp	r3, #21
 8005cd0:	d8f6      	bhi.n	8005cc0 <_printf_i+0x28>
 8005cd2:	a101      	add	r1, pc, #4	@ (adr r1, 8005cd8 <_printf_i+0x40>)
 8005cd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005cd8:	08005d31 	.word	0x08005d31
 8005cdc:	08005d45 	.word	0x08005d45
 8005ce0:	08005cc1 	.word	0x08005cc1
 8005ce4:	08005cc1 	.word	0x08005cc1
 8005ce8:	08005cc1 	.word	0x08005cc1
 8005cec:	08005cc1 	.word	0x08005cc1
 8005cf0:	08005d45 	.word	0x08005d45
 8005cf4:	08005cc1 	.word	0x08005cc1
 8005cf8:	08005cc1 	.word	0x08005cc1
 8005cfc:	08005cc1 	.word	0x08005cc1
 8005d00:	08005cc1 	.word	0x08005cc1
 8005d04:	08005e45 	.word	0x08005e45
 8005d08:	08005d6f 	.word	0x08005d6f
 8005d0c:	08005dff 	.word	0x08005dff
 8005d10:	08005cc1 	.word	0x08005cc1
 8005d14:	08005cc1 	.word	0x08005cc1
 8005d18:	08005e67 	.word	0x08005e67
 8005d1c:	08005cc1 	.word	0x08005cc1
 8005d20:	08005d6f 	.word	0x08005d6f
 8005d24:	08005cc1 	.word	0x08005cc1
 8005d28:	08005cc1 	.word	0x08005cc1
 8005d2c:	08005e07 	.word	0x08005e07
 8005d30:	6833      	ldr	r3, [r6, #0]
 8005d32:	1d1a      	adds	r2, r3, #4
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	6032      	str	r2, [r6, #0]
 8005d38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005d40:	2301      	movs	r3, #1
 8005d42:	e09d      	b.n	8005e80 <_printf_i+0x1e8>
 8005d44:	6833      	ldr	r3, [r6, #0]
 8005d46:	6820      	ldr	r0, [r4, #0]
 8005d48:	1d19      	adds	r1, r3, #4
 8005d4a:	6031      	str	r1, [r6, #0]
 8005d4c:	0606      	lsls	r6, r0, #24
 8005d4e:	d501      	bpl.n	8005d54 <_printf_i+0xbc>
 8005d50:	681d      	ldr	r5, [r3, #0]
 8005d52:	e003      	b.n	8005d5c <_printf_i+0xc4>
 8005d54:	0645      	lsls	r5, r0, #25
 8005d56:	d5fb      	bpl.n	8005d50 <_printf_i+0xb8>
 8005d58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005d5c:	2d00      	cmp	r5, #0
 8005d5e:	da03      	bge.n	8005d68 <_printf_i+0xd0>
 8005d60:	232d      	movs	r3, #45	@ 0x2d
 8005d62:	426d      	negs	r5, r5
 8005d64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d68:	4859      	ldr	r0, [pc, #356]	@ (8005ed0 <_printf_i+0x238>)
 8005d6a:	230a      	movs	r3, #10
 8005d6c:	e011      	b.n	8005d92 <_printf_i+0xfa>
 8005d6e:	6821      	ldr	r1, [r4, #0]
 8005d70:	6833      	ldr	r3, [r6, #0]
 8005d72:	0608      	lsls	r0, r1, #24
 8005d74:	f853 5b04 	ldr.w	r5, [r3], #4
 8005d78:	d402      	bmi.n	8005d80 <_printf_i+0xe8>
 8005d7a:	0649      	lsls	r1, r1, #25
 8005d7c:	bf48      	it	mi
 8005d7e:	b2ad      	uxthmi	r5, r5
 8005d80:	2f6f      	cmp	r7, #111	@ 0x6f
 8005d82:	4853      	ldr	r0, [pc, #332]	@ (8005ed0 <_printf_i+0x238>)
 8005d84:	6033      	str	r3, [r6, #0]
 8005d86:	bf14      	ite	ne
 8005d88:	230a      	movne	r3, #10
 8005d8a:	2308      	moveq	r3, #8
 8005d8c:	2100      	movs	r1, #0
 8005d8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005d92:	6866      	ldr	r6, [r4, #4]
 8005d94:	60a6      	str	r6, [r4, #8]
 8005d96:	2e00      	cmp	r6, #0
 8005d98:	bfa2      	ittt	ge
 8005d9a:	6821      	ldrge	r1, [r4, #0]
 8005d9c:	f021 0104 	bicge.w	r1, r1, #4
 8005da0:	6021      	strge	r1, [r4, #0]
 8005da2:	b90d      	cbnz	r5, 8005da8 <_printf_i+0x110>
 8005da4:	2e00      	cmp	r6, #0
 8005da6:	d04b      	beq.n	8005e40 <_printf_i+0x1a8>
 8005da8:	4616      	mov	r6, r2
 8005daa:	fbb5 f1f3 	udiv	r1, r5, r3
 8005dae:	fb03 5711 	mls	r7, r3, r1, r5
 8005db2:	5dc7      	ldrb	r7, [r0, r7]
 8005db4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005db8:	462f      	mov	r7, r5
 8005dba:	42bb      	cmp	r3, r7
 8005dbc:	460d      	mov	r5, r1
 8005dbe:	d9f4      	bls.n	8005daa <_printf_i+0x112>
 8005dc0:	2b08      	cmp	r3, #8
 8005dc2:	d10b      	bne.n	8005ddc <_printf_i+0x144>
 8005dc4:	6823      	ldr	r3, [r4, #0]
 8005dc6:	07df      	lsls	r7, r3, #31
 8005dc8:	d508      	bpl.n	8005ddc <_printf_i+0x144>
 8005dca:	6923      	ldr	r3, [r4, #16]
 8005dcc:	6861      	ldr	r1, [r4, #4]
 8005dce:	4299      	cmp	r1, r3
 8005dd0:	bfde      	ittt	le
 8005dd2:	2330      	movle	r3, #48	@ 0x30
 8005dd4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005dd8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ddc:	1b92      	subs	r2, r2, r6
 8005dde:	6122      	str	r2, [r4, #16]
 8005de0:	f8cd a000 	str.w	sl, [sp]
 8005de4:	464b      	mov	r3, r9
 8005de6:	aa03      	add	r2, sp, #12
 8005de8:	4621      	mov	r1, r4
 8005dea:	4640      	mov	r0, r8
 8005dec:	f7ff fee6 	bl	8005bbc <_printf_common>
 8005df0:	3001      	adds	r0, #1
 8005df2:	d14a      	bne.n	8005e8a <_printf_i+0x1f2>
 8005df4:	f04f 30ff 	mov.w	r0, #4294967295
 8005df8:	b004      	add	sp, #16
 8005dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dfe:	6823      	ldr	r3, [r4, #0]
 8005e00:	f043 0320 	orr.w	r3, r3, #32
 8005e04:	6023      	str	r3, [r4, #0]
 8005e06:	4833      	ldr	r0, [pc, #204]	@ (8005ed4 <_printf_i+0x23c>)
 8005e08:	2778      	movs	r7, #120	@ 0x78
 8005e0a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005e0e:	6823      	ldr	r3, [r4, #0]
 8005e10:	6831      	ldr	r1, [r6, #0]
 8005e12:	061f      	lsls	r7, r3, #24
 8005e14:	f851 5b04 	ldr.w	r5, [r1], #4
 8005e18:	d402      	bmi.n	8005e20 <_printf_i+0x188>
 8005e1a:	065f      	lsls	r7, r3, #25
 8005e1c:	bf48      	it	mi
 8005e1e:	b2ad      	uxthmi	r5, r5
 8005e20:	6031      	str	r1, [r6, #0]
 8005e22:	07d9      	lsls	r1, r3, #31
 8005e24:	bf44      	itt	mi
 8005e26:	f043 0320 	orrmi.w	r3, r3, #32
 8005e2a:	6023      	strmi	r3, [r4, #0]
 8005e2c:	b11d      	cbz	r5, 8005e36 <_printf_i+0x19e>
 8005e2e:	2310      	movs	r3, #16
 8005e30:	e7ac      	b.n	8005d8c <_printf_i+0xf4>
 8005e32:	4827      	ldr	r0, [pc, #156]	@ (8005ed0 <_printf_i+0x238>)
 8005e34:	e7e9      	b.n	8005e0a <_printf_i+0x172>
 8005e36:	6823      	ldr	r3, [r4, #0]
 8005e38:	f023 0320 	bic.w	r3, r3, #32
 8005e3c:	6023      	str	r3, [r4, #0]
 8005e3e:	e7f6      	b.n	8005e2e <_printf_i+0x196>
 8005e40:	4616      	mov	r6, r2
 8005e42:	e7bd      	b.n	8005dc0 <_printf_i+0x128>
 8005e44:	6833      	ldr	r3, [r6, #0]
 8005e46:	6825      	ldr	r5, [r4, #0]
 8005e48:	6961      	ldr	r1, [r4, #20]
 8005e4a:	1d18      	adds	r0, r3, #4
 8005e4c:	6030      	str	r0, [r6, #0]
 8005e4e:	062e      	lsls	r6, r5, #24
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	d501      	bpl.n	8005e58 <_printf_i+0x1c0>
 8005e54:	6019      	str	r1, [r3, #0]
 8005e56:	e002      	b.n	8005e5e <_printf_i+0x1c6>
 8005e58:	0668      	lsls	r0, r5, #25
 8005e5a:	d5fb      	bpl.n	8005e54 <_printf_i+0x1bc>
 8005e5c:	8019      	strh	r1, [r3, #0]
 8005e5e:	2300      	movs	r3, #0
 8005e60:	6123      	str	r3, [r4, #16]
 8005e62:	4616      	mov	r6, r2
 8005e64:	e7bc      	b.n	8005de0 <_printf_i+0x148>
 8005e66:	6833      	ldr	r3, [r6, #0]
 8005e68:	1d1a      	adds	r2, r3, #4
 8005e6a:	6032      	str	r2, [r6, #0]
 8005e6c:	681e      	ldr	r6, [r3, #0]
 8005e6e:	6862      	ldr	r2, [r4, #4]
 8005e70:	2100      	movs	r1, #0
 8005e72:	4630      	mov	r0, r6
 8005e74:	f7fa f9bc 	bl	80001f0 <memchr>
 8005e78:	b108      	cbz	r0, 8005e7e <_printf_i+0x1e6>
 8005e7a:	1b80      	subs	r0, r0, r6
 8005e7c:	6060      	str	r0, [r4, #4]
 8005e7e:	6863      	ldr	r3, [r4, #4]
 8005e80:	6123      	str	r3, [r4, #16]
 8005e82:	2300      	movs	r3, #0
 8005e84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e88:	e7aa      	b.n	8005de0 <_printf_i+0x148>
 8005e8a:	6923      	ldr	r3, [r4, #16]
 8005e8c:	4632      	mov	r2, r6
 8005e8e:	4649      	mov	r1, r9
 8005e90:	4640      	mov	r0, r8
 8005e92:	47d0      	blx	sl
 8005e94:	3001      	adds	r0, #1
 8005e96:	d0ad      	beq.n	8005df4 <_printf_i+0x15c>
 8005e98:	6823      	ldr	r3, [r4, #0]
 8005e9a:	079b      	lsls	r3, r3, #30
 8005e9c:	d413      	bmi.n	8005ec6 <_printf_i+0x22e>
 8005e9e:	68e0      	ldr	r0, [r4, #12]
 8005ea0:	9b03      	ldr	r3, [sp, #12]
 8005ea2:	4298      	cmp	r0, r3
 8005ea4:	bfb8      	it	lt
 8005ea6:	4618      	movlt	r0, r3
 8005ea8:	e7a6      	b.n	8005df8 <_printf_i+0x160>
 8005eaa:	2301      	movs	r3, #1
 8005eac:	4632      	mov	r2, r6
 8005eae:	4649      	mov	r1, r9
 8005eb0:	4640      	mov	r0, r8
 8005eb2:	47d0      	blx	sl
 8005eb4:	3001      	adds	r0, #1
 8005eb6:	d09d      	beq.n	8005df4 <_printf_i+0x15c>
 8005eb8:	3501      	adds	r5, #1
 8005eba:	68e3      	ldr	r3, [r4, #12]
 8005ebc:	9903      	ldr	r1, [sp, #12]
 8005ebe:	1a5b      	subs	r3, r3, r1
 8005ec0:	42ab      	cmp	r3, r5
 8005ec2:	dcf2      	bgt.n	8005eaa <_printf_i+0x212>
 8005ec4:	e7eb      	b.n	8005e9e <_printf_i+0x206>
 8005ec6:	2500      	movs	r5, #0
 8005ec8:	f104 0619 	add.w	r6, r4, #25
 8005ecc:	e7f5      	b.n	8005eba <_printf_i+0x222>
 8005ece:	bf00      	nop
 8005ed0:	08007549 	.word	0x08007549
 8005ed4:	0800755a 	.word	0x0800755a

08005ed8 <_scanf_chars>:
 8005ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005edc:	4615      	mov	r5, r2
 8005ede:	688a      	ldr	r2, [r1, #8]
 8005ee0:	4680      	mov	r8, r0
 8005ee2:	460c      	mov	r4, r1
 8005ee4:	b932      	cbnz	r2, 8005ef4 <_scanf_chars+0x1c>
 8005ee6:	698a      	ldr	r2, [r1, #24]
 8005ee8:	2a00      	cmp	r2, #0
 8005eea:	bf14      	ite	ne
 8005eec:	f04f 32ff 	movne.w	r2, #4294967295
 8005ef0:	2201      	moveq	r2, #1
 8005ef2:	608a      	str	r2, [r1, #8]
 8005ef4:	6822      	ldr	r2, [r4, #0]
 8005ef6:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8005f88 <_scanf_chars+0xb0>
 8005efa:	06d1      	lsls	r1, r2, #27
 8005efc:	bf5f      	itttt	pl
 8005efe:	681a      	ldrpl	r2, [r3, #0]
 8005f00:	1d11      	addpl	r1, r2, #4
 8005f02:	6019      	strpl	r1, [r3, #0]
 8005f04:	6816      	ldrpl	r6, [r2, #0]
 8005f06:	2700      	movs	r7, #0
 8005f08:	69a0      	ldr	r0, [r4, #24]
 8005f0a:	b188      	cbz	r0, 8005f30 <_scanf_chars+0x58>
 8005f0c:	2801      	cmp	r0, #1
 8005f0e:	d107      	bne.n	8005f20 <_scanf_chars+0x48>
 8005f10:	682b      	ldr	r3, [r5, #0]
 8005f12:	781a      	ldrb	r2, [r3, #0]
 8005f14:	6963      	ldr	r3, [r4, #20]
 8005f16:	5c9b      	ldrb	r3, [r3, r2]
 8005f18:	b953      	cbnz	r3, 8005f30 <_scanf_chars+0x58>
 8005f1a:	2f00      	cmp	r7, #0
 8005f1c:	d031      	beq.n	8005f82 <_scanf_chars+0xaa>
 8005f1e:	e022      	b.n	8005f66 <_scanf_chars+0x8e>
 8005f20:	2802      	cmp	r0, #2
 8005f22:	d120      	bne.n	8005f66 <_scanf_chars+0x8e>
 8005f24:	682b      	ldr	r3, [r5, #0]
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	f819 3003 	ldrb.w	r3, [r9, r3]
 8005f2c:	071b      	lsls	r3, r3, #28
 8005f2e:	d41a      	bmi.n	8005f66 <_scanf_chars+0x8e>
 8005f30:	6823      	ldr	r3, [r4, #0]
 8005f32:	06da      	lsls	r2, r3, #27
 8005f34:	bf5e      	ittt	pl
 8005f36:	682b      	ldrpl	r3, [r5, #0]
 8005f38:	781b      	ldrbpl	r3, [r3, #0]
 8005f3a:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005f3e:	682a      	ldr	r2, [r5, #0]
 8005f40:	686b      	ldr	r3, [r5, #4]
 8005f42:	3201      	adds	r2, #1
 8005f44:	602a      	str	r2, [r5, #0]
 8005f46:	68a2      	ldr	r2, [r4, #8]
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	3a01      	subs	r2, #1
 8005f4c:	606b      	str	r3, [r5, #4]
 8005f4e:	3701      	adds	r7, #1
 8005f50:	60a2      	str	r2, [r4, #8]
 8005f52:	b142      	cbz	r2, 8005f66 <_scanf_chars+0x8e>
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	dcd7      	bgt.n	8005f08 <_scanf_chars+0x30>
 8005f58:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005f5c:	4629      	mov	r1, r5
 8005f5e:	4640      	mov	r0, r8
 8005f60:	4798      	blx	r3
 8005f62:	2800      	cmp	r0, #0
 8005f64:	d0d0      	beq.n	8005f08 <_scanf_chars+0x30>
 8005f66:	6823      	ldr	r3, [r4, #0]
 8005f68:	f013 0310 	ands.w	r3, r3, #16
 8005f6c:	d105      	bne.n	8005f7a <_scanf_chars+0xa2>
 8005f6e:	68e2      	ldr	r2, [r4, #12]
 8005f70:	3201      	adds	r2, #1
 8005f72:	60e2      	str	r2, [r4, #12]
 8005f74:	69a2      	ldr	r2, [r4, #24]
 8005f76:	b102      	cbz	r2, 8005f7a <_scanf_chars+0xa2>
 8005f78:	7033      	strb	r3, [r6, #0]
 8005f7a:	6923      	ldr	r3, [r4, #16]
 8005f7c:	443b      	add	r3, r7
 8005f7e:	6123      	str	r3, [r4, #16]
 8005f80:	2000      	movs	r0, #0
 8005f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f86:	bf00      	nop
 8005f88:	08007587 	.word	0x08007587

08005f8c <_scanf_i>:
 8005f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f90:	4698      	mov	r8, r3
 8005f92:	4b74      	ldr	r3, [pc, #464]	@ (8006164 <_scanf_i+0x1d8>)
 8005f94:	460c      	mov	r4, r1
 8005f96:	4682      	mov	sl, r0
 8005f98:	4616      	mov	r6, r2
 8005f9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005f9e:	b087      	sub	sp, #28
 8005fa0:	ab03      	add	r3, sp, #12
 8005fa2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005fa6:	4b70      	ldr	r3, [pc, #448]	@ (8006168 <_scanf_i+0x1dc>)
 8005fa8:	69a1      	ldr	r1, [r4, #24]
 8005faa:	4a70      	ldr	r2, [pc, #448]	@ (800616c <_scanf_i+0x1e0>)
 8005fac:	2903      	cmp	r1, #3
 8005fae:	bf08      	it	eq
 8005fb0:	461a      	moveq	r2, r3
 8005fb2:	68a3      	ldr	r3, [r4, #8]
 8005fb4:	9201      	str	r2, [sp, #4]
 8005fb6:	1e5a      	subs	r2, r3, #1
 8005fb8:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005fbc:	bf88      	it	hi
 8005fbe:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005fc2:	4627      	mov	r7, r4
 8005fc4:	bf82      	ittt	hi
 8005fc6:	eb03 0905 	addhi.w	r9, r3, r5
 8005fca:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005fce:	60a3      	strhi	r3, [r4, #8]
 8005fd0:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005fd4:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8005fd8:	bf98      	it	ls
 8005fda:	f04f 0900 	movls.w	r9, #0
 8005fde:	6023      	str	r3, [r4, #0]
 8005fe0:	463d      	mov	r5, r7
 8005fe2:	f04f 0b00 	mov.w	fp, #0
 8005fe6:	6831      	ldr	r1, [r6, #0]
 8005fe8:	ab03      	add	r3, sp, #12
 8005fea:	7809      	ldrb	r1, [r1, #0]
 8005fec:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005ff0:	2202      	movs	r2, #2
 8005ff2:	f7fa f8fd 	bl	80001f0 <memchr>
 8005ff6:	b328      	cbz	r0, 8006044 <_scanf_i+0xb8>
 8005ff8:	f1bb 0f01 	cmp.w	fp, #1
 8005ffc:	d159      	bne.n	80060b2 <_scanf_i+0x126>
 8005ffe:	6862      	ldr	r2, [r4, #4]
 8006000:	b92a      	cbnz	r2, 800600e <_scanf_i+0x82>
 8006002:	6822      	ldr	r2, [r4, #0]
 8006004:	2108      	movs	r1, #8
 8006006:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800600a:	6061      	str	r1, [r4, #4]
 800600c:	6022      	str	r2, [r4, #0]
 800600e:	6822      	ldr	r2, [r4, #0]
 8006010:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8006014:	6022      	str	r2, [r4, #0]
 8006016:	68a2      	ldr	r2, [r4, #8]
 8006018:	1e51      	subs	r1, r2, #1
 800601a:	60a1      	str	r1, [r4, #8]
 800601c:	b192      	cbz	r2, 8006044 <_scanf_i+0xb8>
 800601e:	6832      	ldr	r2, [r6, #0]
 8006020:	1c51      	adds	r1, r2, #1
 8006022:	6031      	str	r1, [r6, #0]
 8006024:	7812      	ldrb	r2, [r2, #0]
 8006026:	f805 2b01 	strb.w	r2, [r5], #1
 800602a:	6872      	ldr	r2, [r6, #4]
 800602c:	3a01      	subs	r2, #1
 800602e:	2a00      	cmp	r2, #0
 8006030:	6072      	str	r2, [r6, #4]
 8006032:	dc07      	bgt.n	8006044 <_scanf_i+0xb8>
 8006034:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8006038:	4631      	mov	r1, r6
 800603a:	4650      	mov	r0, sl
 800603c:	4790      	blx	r2
 800603e:	2800      	cmp	r0, #0
 8006040:	f040 8085 	bne.w	800614e <_scanf_i+0x1c2>
 8006044:	f10b 0b01 	add.w	fp, fp, #1
 8006048:	f1bb 0f03 	cmp.w	fp, #3
 800604c:	d1cb      	bne.n	8005fe6 <_scanf_i+0x5a>
 800604e:	6863      	ldr	r3, [r4, #4]
 8006050:	b90b      	cbnz	r3, 8006056 <_scanf_i+0xca>
 8006052:	230a      	movs	r3, #10
 8006054:	6063      	str	r3, [r4, #4]
 8006056:	6863      	ldr	r3, [r4, #4]
 8006058:	4945      	ldr	r1, [pc, #276]	@ (8006170 <_scanf_i+0x1e4>)
 800605a:	6960      	ldr	r0, [r4, #20]
 800605c:	1ac9      	subs	r1, r1, r3
 800605e:	f000 f997 	bl	8006390 <__sccl>
 8006062:	f04f 0b00 	mov.w	fp, #0
 8006066:	68a3      	ldr	r3, [r4, #8]
 8006068:	6822      	ldr	r2, [r4, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d03d      	beq.n	80060ea <_scanf_i+0x15e>
 800606e:	6831      	ldr	r1, [r6, #0]
 8006070:	6960      	ldr	r0, [r4, #20]
 8006072:	f891 c000 	ldrb.w	ip, [r1]
 8006076:	f810 000c 	ldrb.w	r0, [r0, ip]
 800607a:	2800      	cmp	r0, #0
 800607c:	d035      	beq.n	80060ea <_scanf_i+0x15e>
 800607e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8006082:	d124      	bne.n	80060ce <_scanf_i+0x142>
 8006084:	0510      	lsls	r0, r2, #20
 8006086:	d522      	bpl.n	80060ce <_scanf_i+0x142>
 8006088:	f10b 0b01 	add.w	fp, fp, #1
 800608c:	f1b9 0f00 	cmp.w	r9, #0
 8006090:	d003      	beq.n	800609a <_scanf_i+0x10e>
 8006092:	3301      	adds	r3, #1
 8006094:	f109 39ff 	add.w	r9, r9, #4294967295
 8006098:	60a3      	str	r3, [r4, #8]
 800609a:	6873      	ldr	r3, [r6, #4]
 800609c:	3b01      	subs	r3, #1
 800609e:	2b00      	cmp	r3, #0
 80060a0:	6073      	str	r3, [r6, #4]
 80060a2:	dd1b      	ble.n	80060dc <_scanf_i+0x150>
 80060a4:	6833      	ldr	r3, [r6, #0]
 80060a6:	3301      	adds	r3, #1
 80060a8:	6033      	str	r3, [r6, #0]
 80060aa:	68a3      	ldr	r3, [r4, #8]
 80060ac:	3b01      	subs	r3, #1
 80060ae:	60a3      	str	r3, [r4, #8]
 80060b0:	e7d9      	b.n	8006066 <_scanf_i+0xda>
 80060b2:	f1bb 0f02 	cmp.w	fp, #2
 80060b6:	d1ae      	bne.n	8006016 <_scanf_i+0x8a>
 80060b8:	6822      	ldr	r2, [r4, #0]
 80060ba:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80060be:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80060c2:	d1bf      	bne.n	8006044 <_scanf_i+0xb8>
 80060c4:	2110      	movs	r1, #16
 80060c6:	6061      	str	r1, [r4, #4]
 80060c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060cc:	e7a2      	b.n	8006014 <_scanf_i+0x88>
 80060ce:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80060d2:	6022      	str	r2, [r4, #0]
 80060d4:	780b      	ldrb	r3, [r1, #0]
 80060d6:	f805 3b01 	strb.w	r3, [r5], #1
 80060da:	e7de      	b.n	800609a <_scanf_i+0x10e>
 80060dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80060e0:	4631      	mov	r1, r6
 80060e2:	4650      	mov	r0, sl
 80060e4:	4798      	blx	r3
 80060e6:	2800      	cmp	r0, #0
 80060e8:	d0df      	beq.n	80060aa <_scanf_i+0x11e>
 80060ea:	6823      	ldr	r3, [r4, #0]
 80060ec:	05d9      	lsls	r1, r3, #23
 80060ee:	d50d      	bpl.n	800610c <_scanf_i+0x180>
 80060f0:	42bd      	cmp	r5, r7
 80060f2:	d909      	bls.n	8006108 <_scanf_i+0x17c>
 80060f4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80060f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80060fc:	4632      	mov	r2, r6
 80060fe:	4650      	mov	r0, sl
 8006100:	4798      	blx	r3
 8006102:	f105 39ff 	add.w	r9, r5, #4294967295
 8006106:	464d      	mov	r5, r9
 8006108:	42bd      	cmp	r5, r7
 800610a:	d028      	beq.n	800615e <_scanf_i+0x1d2>
 800610c:	6822      	ldr	r2, [r4, #0]
 800610e:	f012 0210 	ands.w	r2, r2, #16
 8006112:	d113      	bne.n	800613c <_scanf_i+0x1b0>
 8006114:	702a      	strb	r2, [r5, #0]
 8006116:	6863      	ldr	r3, [r4, #4]
 8006118:	9e01      	ldr	r6, [sp, #4]
 800611a:	4639      	mov	r1, r7
 800611c:	4650      	mov	r0, sl
 800611e:	47b0      	blx	r6
 8006120:	f8d8 3000 	ldr.w	r3, [r8]
 8006124:	6821      	ldr	r1, [r4, #0]
 8006126:	1d1a      	adds	r2, r3, #4
 8006128:	f8c8 2000 	str.w	r2, [r8]
 800612c:	f011 0f20 	tst.w	r1, #32
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	d00f      	beq.n	8006154 <_scanf_i+0x1c8>
 8006134:	6018      	str	r0, [r3, #0]
 8006136:	68e3      	ldr	r3, [r4, #12]
 8006138:	3301      	adds	r3, #1
 800613a:	60e3      	str	r3, [r4, #12]
 800613c:	6923      	ldr	r3, [r4, #16]
 800613e:	1bed      	subs	r5, r5, r7
 8006140:	445d      	add	r5, fp
 8006142:	442b      	add	r3, r5
 8006144:	6123      	str	r3, [r4, #16]
 8006146:	2000      	movs	r0, #0
 8006148:	b007      	add	sp, #28
 800614a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800614e:	f04f 0b00 	mov.w	fp, #0
 8006152:	e7ca      	b.n	80060ea <_scanf_i+0x15e>
 8006154:	07ca      	lsls	r2, r1, #31
 8006156:	bf4c      	ite	mi
 8006158:	8018      	strhmi	r0, [r3, #0]
 800615a:	6018      	strpl	r0, [r3, #0]
 800615c:	e7eb      	b.n	8006136 <_scanf_i+0x1aa>
 800615e:	2001      	movs	r0, #1
 8006160:	e7f2      	b.n	8006148 <_scanf_i+0x1bc>
 8006162:	bf00      	nop
 8006164:	08007514 	.word	0x08007514
 8006168:	08006661 	.word	0x08006661
 800616c:	08006741 	.word	0x08006741
 8006170:	0800757b 	.word	0x0800757b

08006174 <__sflush_r>:
 8006174:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800617c:	0716      	lsls	r6, r2, #28
 800617e:	4605      	mov	r5, r0
 8006180:	460c      	mov	r4, r1
 8006182:	d454      	bmi.n	800622e <__sflush_r+0xba>
 8006184:	684b      	ldr	r3, [r1, #4]
 8006186:	2b00      	cmp	r3, #0
 8006188:	dc02      	bgt.n	8006190 <__sflush_r+0x1c>
 800618a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800618c:	2b00      	cmp	r3, #0
 800618e:	dd48      	ble.n	8006222 <__sflush_r+0xae>
 8006190:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006192:	2e00      	cmp	r6, #0
 8006194:	d045      	beq.n	8006222 <__sflush_r+0xae>
 8006196:	2300      	movs	r3, #0
 8006198:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800619c:	682f      	ldr	r7, [r5, #0]
 800619e:	6a21      	ldr	r1, [r4, #32]
 80061a0:	602b      	str	r3, [r5, #0]
 80061a2:	d030      	beq.n	8006206 <__sflush_r+0x92>
 80061a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80061a6:	89a3      	ldrh	r3, [r4, #12]
 80061a8:	0759      	lsls	r1, r3, #29
 80061aa:	d505      	bpl.n	80061b8 <__sflush_r+0x44>
 80061ac:	6863      	ldr	r3, [r4, #4]
 80061ae:	1ad2      	subs	r2, r2, r3
 80061b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80061b2:	b10b      	cbz	r3, 80061b8 <__sflush_r+0x44>
 80061b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80061b6:	1ad2      	subs	r2, r2, r3
 80061b8:	2300      	movs	r3, #0
 80061ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80061bc:	6a21      	ldr	r1, [r4, #32]
 80061be:	4628      	mov	r0, r5
 80061c0:	47b0      	blx	r6
 80061c2:	1c43      	adds	r3, r0, #1
 80061c4:	89a3      	ldrh	r3, [r4, #12]
 80061c6:	d106      	bne.n	80061d6 <__sflush_r+0x62>
 80061c8:	6829      	ldr	r1, [r5, #0]
 80061ca:	291d      	cmp	r1, #29
 80061cc:	d82b      	bhi.n	8006226 <__sflush_r+0xb2>
 80061ce:	4a2a      	ldr	r2, [pc, #168]	@ (8006278 <__sflush_r+0x104>)
 80061d0:	410a      	asrs	r2, r1
 80061d2:	07d6      	lsls	r6, r2, #31
 80061d4:	d427      	bmi.n	8006226 <__sflush_r+0xb2>
 80061d6:	2200      	movs	r2, #0
 80061d8:	6062      	str	r2, [r4, #4]
 80061da:	04d9      	lsls	r1, r3, #19
 80061dc:	6922      	ldr	r2, [r4, #16]
 80061de:	6022      	str	r2, [r4, #0]
 80061e0:	d504      	bpl.n	80061ec <__sflush_r+0x78>
 80061e2:	1c42      	adds	r2, r0, #1
 80061e4:	d101      	bne.n	80061ea <__sflush_r+0x76>
 80061e6:	682b      	ldr	r3, [r5, #0]
 80061e8:	b903      	cbnz	r3, 80061ec <__sflush_r+0x78>
 80061ea:	6560      	str	r0, [r4, #84]	@ 0x54
 80061ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80061ee:	602f      	str	r7, [r5, #0]
 80061f0:	b1b9      	cbz	r1, 8006222 <__sflush_r+0xae>
 80061f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80061f6:	4299      	cmp	r1, r3
 80061f8:	d002      	beq.n	8006200 <__sflush_r+0x8c>
 80061fa:	4628      	mov	r0, r5
 80061fc:	f7fe ff80 	bl	8005100 <_free_r>
 8006200:	2300      	movs	r3, #0
 8006202:	6363      	str	r3, [r4, #52]	@ 0x34
 8006204:	e00d      	b.n	8006222 <__sflush_r+0xae>
 8006206:	2301      	movs	r3, #1
 8006208:	4628      	mov	r0, r5
 800620a:	47b0      	blx	r6
 800620c:	4602      	mov	r2, r0
 800620e:	1c50      	adds	r0, r2, #1
 8006210:	d1c9      	bne.n	80061a6 <__sflush_r+0x32>
 8006212:	682b      	ldr	r3, [r5, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d0c6      	beq.n	80061a6 <__sflush_r+0x32>
 8006218:	2b1d      	cmp	r3, #29
 800621a:	d001      	beq.n	8006220 <__sflush_r+0xac>
 800621c:	2b16      	cmp	r3, #22
 800621e:	d11e      	bne.n	800625e <__sflush_r+0xea>
 8006220:	602f      	str	r7, [r5, #0]
 8006222:	2000      	movs	r0, #0
 8006224:	e022      	b.n	800626c <__sflush_r+0xf8>
 8006226:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800622a:	b21b      	sxth	r3, r3
 800622c:	e01b      	b.n	8006266 <__sflush_r+0xf2>
 800622e:	690f      	ldr	r7, [r1, #16]
 8006230:	2f00      	cmp	r7, #0
 8006232:	d0f6      	beq.n	8006222 <__sflush_r+0xae>
 8006234:	0793      	lsls	r3, r2, #30
 8006236:	680e      	ldr	r6, [r1, #0]
 8006238:	bf08      	it	eq
 800623a:	694b      	ldreq	r3, [r1, #20]
 800623c:	600f      	str	r7, [r1, #0]
 800623e:	bf18      	it	ne
 8006240:	2300      	movne	r3, #0
 8006242:	eba6 0807 	sub.w	r8, r6, r7
 8006246:	608b      	str	r3, [r1, #8]
 8006248:	f1b8 0f00 	cmp.w	r8, #0
 800624c:	dde9      	ble.n	8006222 <__sflush_r+0xae>
 800624e:	6a21      	ldr	r1, [r4, #32]
 8006250:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006252:	4643      	mov	r3, r8
 8006254:	463a      	mov	r2, r7
 8006256:	4628      	mov	r0, r5
 8006258:	47b0      	blx	r6
 800625a:	2800      	cmp	r0, #0
 800625c:	dc08      	bgt.n	8006270 <__sflush_r+0xfc>
 800625e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006262:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006266:	81a3      	strh	r3, [r4, #12]
 8006268:	f04f 30ff 	mov.w	r0, #4294967295
 800626c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006270:	4407      	add	r7, r0
 8006272:	eba8 0800 	sub.w	r8, r8, r0
 8006276:	e7e7      	b.n	8006248 <__sflush_r+0xd4>
 8006278:	dfbffffe 	.word	0xdfbffffe

0800627c <_fflush_r>:
 800627c:	b538      	push	{r3, r4, r5, lr}
 800627e:	690b      	ldr	r3, [r1, #16]
 8006280:	4605      	mov	r5, r0
 8006282:	460c      	mov	r4, r1
 8006284:	b913      	cbnz	r3, 800628c <_fflush_r+0x10>
 8006286:	2500      	movs	r5, #0
 8006288:	4628      	mov	r0, r5
 800628a:	bd38      	pop	{r3, r4, r5, pc}
 800628c:	b118      	cbz	r0, 8006296 <_fflush_r+0x1a>
 800628e:	6a03      	ldr	r3, [r0, #32]
 8006290:	b90b      	cbnz	r3, 8006296 <_fflush_r+0x1a>
 8006292:	f7fe fc65 	bl	8004b60 <__sinit>
 8006296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d0f3      	beq.n	8006286 <_fflush_r+0xa>
 800629e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80062a0:	07d0      	lsls	r0, r2, #31
 80062a2:	d404      	bmi.n	80062ae <_fflush_r+0x32>
 80062a4:	0599      	lsls	r1, r3, #22
 80062a6:	d402      	bmi.n	80062ae <_fflush_r+0x32>
 80062a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062aa:	f7fe ff18 	bl	80050de <__retarget_lock_acquire_recursive>
 80062ae:	4628      	mov	r0, r5
 80062b0:	4621      	mov	r1, r4
 80062b2:	f7ff ff5f 	bl	8006174 <__sflush_r>
 80062b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80062b8:	07da      	lsls	r2, r3, #31
 80062ba:	4605      	mov	r5, r0
 80062bc:	d4e4      	bmi.n	8006288 <_fflush_r+0xc>
 80062be:	89a3      	ldrh	r3, [r4, #12]
 80062c0:	059b      	lsls	r3, r3, #22
 80062c2:	d4e1      	bmi.n	8006288 <_fflush_r+0xc>
 80062c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062c6:	f7fe ff0b 	bl	80050e0 <__retarget_lock_release_recursive>
 80062ca:	e7dd      	b.n	8006288 <_fflush_r+0xc>

080062cc <__swhatbuf_r>:
 80062cc:	b570      	push	{r4, r5, r6, lr}
 80062ce:	460c      	mov	r4, r1
 80062d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062d4:	2900      	cmp	r1, #0
 80062d6:	b096      	sub	sp, #88	@ 0x58
 80062d8:	4615      	mov	r5, r2
 80062da:	461e      	mov	r6, r3
 80062dc:	da0d      	bge.n	80062fa <__swhatbuf_r+0x2e>
 80062de:	89a3      	ldrh	r3, [r4, #12]
 80062e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80062e4:	f04f 0100 	mov.w	r1, #0
 80062e8:	bf14      	ite	ne
 80062ea:	2340      	movne	r3, #64	@ 0x40
 80062ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80062f0:	2000      	movs	r0, #0
 80062f2:	6031      	str	r1, [r6, #0]
 80062f4:	602b      	str	r3, [r5, #0]
 80062f6:	b016      	add	sp, #88	@ 0x58
 80062f8:	bd70      	pop	{r4, r5, r6, pc}
 80062fa:	466a      	mov	r2, sp
 80062fc:	f000 f8d6 	bl	80064ac <_fstat_r>
 8006300:	2800      	cmp	r0, #0
 8006302:	dbec      	blt.n	80062de <__swhatbuf_r+0x12>
 8006304:	9901      	ldr	r1, [sp, #4]
 8006306:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800630a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800630e:	4259      	negs	r1, r3
 8006310:	4159      	adcs	r1, r3
 8006312:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006316:	e7eb      	b.n	80062f0 <__swhatbuf_r+0x24>

08006318 <__smakebuf_r>:
 8006318:	898b      	ldrh	r3, [r1, #12]
 800631a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800631c:	079d      	lsls	r5, r3, #30
 800631e:	4606      	mov	r6, r0
 8006320:	460c      	mov	r4, r1
 8006322:	d507      	bpl.n	8006334 <__smakebuf_r+0x1c>
 8006324:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006328:	6023      	str	r3, [r4, #0]
 800632a:	6123      	str	r3, [r4, #16]
 800632c:	2301      	movs	r3, #1
 800632e:	6163      	str	r3, [r4, #20]
 8006330:	b003      	add	sp, #12
 8006332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006334:	ab01      	add	r3, sp, #4
 8006336:	466a      	mov	r2, sp
 8006338:	f7ff ffc8 	bl	80062cc <__swhatbuf_r>
 800633c:	9f00      	ldr	r7, [sp, #0]
 800633e:	4605      	mov	r5, r0
 8006340:	4639      	mov	r1, r7
 8006342:	4630      	mov	r0, r6
 8006344:	f7fe ff48 	bl	80051d8 <_malloc_r>
 8006348:	b948      	cbnz	r0, 800635e <__smakebuf_r+0x46>
 800634a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800634e:	059a      	lsls	r2, r3, #22
 8006350:	d4ee      	bmi.n	8006330 <__smakebuf_r+0x18>
 8006352:	f023 0303 	bic.w	r3, r3, #3
 8006356:	f043 0302 	orr.w	r3, r3, #2
 800635a:	81a3      	strh	r3, [r4, #12]
 800635c:	e7e2      	b.n	8006324 <__smakebuf_r+0xc>
 800635e:	89a3      	ldrh	r3, [r4, #12]
 8006360:	6020      	str	r0, [r4, #0]
 8006362:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006366:	81a3      	strh	r3, [r4, #12]
 8006368:	9b01      	ldr	r3, [sp, #4]
 800636a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800636e:	b15b      	cbz	r3, 8006388 <__smakebuf_r+0x70>
 8006370:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006374:	4630      	mov	r0, r6
 8006376:	f000 f8ab 	bl	80064d0 <_isatty_r>
 800637a:	b128      	cbz	r0, 8006388 <__smakebuf_r+0x70>
 800637c:	89a3      	ldrh	r3, [r4, #12]
 800637e:	f023 0303 	bic.w	r3, r3, #3
 8006382:	f043 0301 	orr.w	r3, r3, #1
 8006386:	81a3      	strh	r3, [r4, #12]
 8006388:	89a3      	ldrh	r3, [r4, #12]
 800638a:	431d      	orrs	r5, r3
 800638c:	81a5      	strh	r5, [r4, #12]
 800638e:	e7cf      	b.n	8006330 <__smakebuf_r+0x18>

08006390 <__sccl>:
 8006390:	b570      	push	{r4, r5, r6, lr}
 8006392:	780b      	ldrb	r3, [r1, #0]
 8006394:	4604      	mov	r4, r0
 8006396:	2b5e      	cmp	r3, #94	@ 0x5e
 8006398:	bf0b      	itete	eq
 800639a:	784b      	ldrbeq	r3, [r1, #1]
 800639c:	1c4a      	addne	r2, r1, #1
 800639e:	1c8a      	addeq	r2, r1, #2
 80063a0:	2100      	movne	r1, #0
 80063a2:	bf08      	it	eq
 80063a4:	2101      	moveq	r1, #1
 80063a6:	3801      	subs	r0, #1
 80063a8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80063ac:	f800 1f01 	strb.w	r1, [r0, #1]!
 80063b0:	42a8      	cmp	r0, r5
 80063b2:	d1fb      	bne.n	80063ac <__sccl+0x1c>
 80063b4:	b90b      	cbnz	r3, 80063ba <__sccl+0x2a>
 80063b6:	1e50      	subs	r0, r2, #1
 80063b8:	bd70      	pop	{r4, r5, r6, pc}
 80063ba:	f081 0101 	eor.w	r1, r1, #1
 80063be:	54e1      	strb	r1, [r4, r3]
 80063c0:	4610      	mov	r0, r2
 80063c2:	4602      	mov	r2, r0
 80063c4:	f812 5b01 	ldrb.w	r5, [r2], #1
 80063c8:	2d2d      	cmp	r5, #45	@ 0x2d
 80063ca:	d005      	beq.n	80063d8 <__sccl+0x48>
 80063cc:	2d5d      	cmp	r5, #93	@ 0x5d
 80063ce:	d016      	beq.n	80063fe <__sccl+0x6e>
 80063d0:	2d00      	cmp	r5, #0
 80063d2:	d0f1      	beq.n	80063b8 <__sccl+0x28>
 80063d4:	462b      	mov	r3, r5
 80063d6:	e7f2      	b.n	80063be <__sccl+0x2e>
 80063d8:	7846      	ldrb	r6, [r0, #1]
 80063da:	2e5d      	cmp	r6, #93	@ 0x5d
 80063dc:	d0fa      	beq.n	80063d4 <__sccl+0x44>
 80063de:	42b3      	cmp	r3, r6
 80063e0:	dcf8      	bgt.n	80063d4 <__sccl+0x44>
 80063e2:	3002      	adds	r0, #2
 80063e4:	461a      	mov	r2, r3
 80063e6:	3201      	adds	r2, #1
 80063e8:	4296      	cmp	r6, r2
 80063ea:	54a1      	strb	r1, [r4, r2]
 80063ec:	dcfb      	bgt.n	80063e6 <__sccl+0x56>
 80063ee:	1af2      	subs	r2, r6, r3
 80063f0:	3a01      	subs	r2, #1
 80063f2:	1c5d      	adds	r5, r3, #1
 80063f4:	42b3      	cmp	r3, r6
 80063f6:	bfa8      	it	ge
 80063f8:	2200      	movge	r2, #0
 80063fa:	18ab      	adds	r3, r5, r2
 80063fc:	e7e1      	b.n	80063c2 <__sccl+0x32>
 80063fe:	4610      	mov	r0, r2
 8006400:	e7da      	b.n	80063b8 <__sccl+0x28>

08006402 <__submore>:
 8006402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006406:	460c      	mov	r4, r1
 8006408:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800640a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800640e:	4299      	cmp	r1, r3
 8006410:	d11d      	bne.n	800644e <__submore+0x4c>
 8006412:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006416:	f7fe fedf 	bl	80051d8 <_malloc_r>
 800641a:	b918      	cbnz	r0, 8006424 <__submore+0x22>
 800641c:	f04f 30ff 	mov.w	r0, #4294967295
 8006420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006424:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006428:	63a3      	str	r3, [r4, #56]	@ 0x38
 800642a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800642e:	6360      	str	r0, [r4, #52]	@ 0x34
 8006430:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8006434:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006438:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800643c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8006440:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8006444:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8006448:	6020      	str	r0, [r4, #0]
 800644a:	2000      	movs	r0, #0
 800644c:	e7e8      	b.n	8006420 <__submore+0x1e>
 800644e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8006450:	0077      	lsls	r7, r6, #1
 8006452:	463a      	mov	r2, r7
 8006454:	f000 f85c 	bl	8006510 <_realloc_r>
 8006458:	4605      	mov	r5, r0
 800645a:	2800      	cmp	r0, #0
 800645c:	d0de      	beq.n	800641c <__submore+0x1a>
 800645e:	eb00 0806 	add.w	r8, r0, r6
 8006462:	4601      	mov	r1, r0
 8006464:	4632      	mov	r2, r6
 8006466:	4640      	mov	r0, r8
 8006468:	f7fe fe3b 	bl	80050e2 <memcpy>
 800646c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8006470:	f8c4 8000 	str.w	r8, [r4]
 8006474:	e7e9      	b.n	800644a <__submore+0x48>

08006476 <memmove>:
 8006476:	4288      	cmp	r0, r1
 8006478:	b510      	push	{r4, lr}
 800647a:	eb01 0402 	add.w	r4, r1, r2
 800647e:	d902      	bls.n	8006486 <memmove+0x10>
 8006480:	4284      	cmp	r4, r0
 8006482:	4623      	mov	r3, r4
 8006484:	d807      	bhi.n	8006496 <memmove+0x20>
 8006486:	1e43      	subs	r3, r0, #1
 8006488:	42a1      	cmp	r1, r4
 800648a:	d008      	beq.n	800649e <memmove+0x28>
 800648c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006490:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006494:	e7f8      	b.n	8006488 <memmove+0x12>
 8006496:	4402      	add	r2, r0
 8006498:	4601      	mov	r1, r0
 800649a:	428a      	cmp	r2, r1
 800649c:	d100      	bne.n	80064a0 <memmove+0x2a>
 800649e:	bd10      	pop	{r4, pc}
 80064a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80064a4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80064a8:	e7f7      	b.n	800649a <memmove+0x24>
	...

080064ac <_fstat_r>:
 80064ac:	b538      	push	{r3, r4, r5, lr}
 80064ae:	4d07      	ldr	r5, [pc, #28]	@ (80064cc <_fstat_r+0x20>)
 80064b0:	2300      	movs	r3, #0
 80064b2:	4604      	mov	r4, r0
 80064b4:	4608      	mov	r0, r1
 80064b6:	4611      	mov	r1, r2
 80064b8:	602b      	str	r3, [r5, #0]
 80064ba:	f7fb f97e 	bl	80017ba <_fstat>
 80064be:	1c43      	adds	r3, r0, #1
 80064c0:	d102      	bne.n	80064c8 <_fstat_r+0x1c>
 80064c2:	682b      	ldr	r3, [r5, #0]
 80064c4:	b103      	cbz	r3, 80064c8 <_fstat_r+0x1c>
 80064c6:	6023      	str	r3, [r4, #0]
 80064c8:	bd38      	pop	{r3, r4, r5, pc}
 80064ca:	bf00      	nop
 80064cc:	20000834 	.word	0x20000834

080064d0 <_isatty_r>:
 80064d0:	b538      	push	{r3, r4, r5, lr}
 80064d2:	4d06      	ldr	r5, [pc, #24]	@ (80064ec <_isatty_r+0x1c>)
 80064d4:	2300      	movs	r3, #0
 80064d6:	4604      	mov	r4, r0
 80064d8:	4608      	mov	r0, r1
 80064da:	602b      	str	r3, [r5, #0]
 80064dc:	f7fb f97d 	bl	80017da <_isatty>
 80064e0:	1c43      	adds	r3, r0, #1
 80064e2:	d102      	bne.n	80064ea <_isatty_r+0x1a>
 80064e4:	682b      	ldr	r3, [r5, #0]
 80064e6:	b103      	cbz	r3, 80064ea <_isatty_r+0x1a>
 80064e8:	6023      	str	r3, [r4, #0]
 80064ea:	bd38      	pop	{r3, r4, r5, pc}
 80064ec:	20000834 	.word	0x20000834

080064f0 <_sbrk_r>:
 80064f0:	b538      	push	{r3, r4, r5, lr}
 80064f2:	4d06      	ldr	r5, [pc, #24]	@ (800650c <_sbrk_r+0x1c>)
 80064f4:	2300      	movs	r3, #0
 80064f6:	4604      	mov	r4, r0
 80064f8:	4608      	mov	r0, r1
 80064fa:	602b      	str	r3, [r5, #0]
 80064fc:	f7fb f986 	bl	800180c <_sbrk>
 8006500:	1c43      	adds	r3, r0, #1
 8006502:	d102      	bne.n	800650a <_sbrk_r+0x1a>
 8006504:	682b      	ldr	r3, [r5, #0]
 8006506:	b103      	cbz	r3, 800650a <_sbrk_r+0x1a>
 8006508:	6023      	str	r3, [r4, #0]
 800650a:	bd38      	pop	{r3, r4, r5, pc}
 800650c:	20000834 	.word	0x20000834

08006510 <_realloc_r>:
 8006510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006514:	4680      	mov	r8, r0
 8006516:	4615      	mov	r5, r2
 8006518:	460c      	mov	r4, r1
 800651a:	b921      	cbnz	r1, 8006526 <_realloc_r+0x16>
 800651c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006520:	4611      	mov	r1, r2
 8006522:	f7fe be59 	b.w	80051d8 <_malloc_r>
 8006526:	b92a      	cbnz	r2, 8006534 <_realloc_r+0x24>
 8006528:	f7fe fdea 	bl	8005100 <_free_r>
 800652c:	2400      	movs	r4, #0
 800652e:	4620      	mov	r0, r4
 8006530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006534:	f000 f906 	bl	8006744 <_malloc_usable_size_r>
 8006538:	4285      	cmp	r5, r0
 800653a:	4606      	mov	r6, r0
 800653c:	d802      	bhi.n	8006544 <_realloc_r+0x34>
 800653e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006542:	d8f4      	bhi.n	800652e <_realloc_r+0x1e>
 8006544:	4629      	mov	r1, r5
 8006546:	4640      	mov	r0, r8
 8006548:	f7fe fe46 	bl	80051d8 <_malloc_r>
 800654c:	4607      	mov	r7, r0
 800654e:	2800      	cmp	r0, #0
 8006550:	d0ec      	beq.n	800652c <_realloc_r+0x1c>
 8006552:	42b5      	cmp	r5, r6
 8006554:	462a      	mov	r2, r5
 8006556:	4621      	mov	r1, r4
 8006558:	bf28      	it	cs
 800655a:	4632      	movcs	r2, r6
 800655c:	f7fe fdc1 	bl	80050e2 <memcpy>
 8006560:	4621      	mov	r1, r4
 8006562:	4640      	mov	r0, r8
 8006564:	f7fe fdcc 	bl	8005100 <_free_r>
 8006568:	463c      	mov	r4, r7
 800656a:	e7e0      	b.n	800652e <_realloc_r+0x1e>

0800656c <_strtol_l.constprop.0>:
 800656c:	2b24      	cmp	r3, #36	@ 0x24
 800656e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006572:	4686      	mov	lr, r0
 8006574:	4690      	mov	r8, r2
 8006576:	d801      	bhi.n	800657c <_strtol_l.constprop.0+0x10>
 8006578:	2b01      	cmp	r3, #1
 800657a:	d106      	bne.n	800658a <_strtol_l.constprop.0+0x1e>
 800657c:	f7fe fd84 	bl	8005088 <__errno>
 8006580:	2316      	movs	r3, #22
 8006582:	6003      	str	r3, [r0, #0]
 8006584:	2000      	movs	r0, #0
 8006586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800658a:	4834      	ldr	r0, [pc, #208]	@ (800665c <_strtol_l.constprop.0+0xf0>)
 800658c:	460d      	mov	r5, r1
 800658e:	462a      	mov	r2, r5
 8006590:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006594:	5d06      	ldrb	r6, [r0, r4]
 8006596:	f016 0608 	ands.w	r6, r6, #8
 800659a:	d1f8      	bne.n	800658e <_strtol_l.constprop.0+0x22>
 800659c:	2c2d      	cmp	r4, #45	@ 0x2d
 800659e:	d12d      	bne.n	80065fc <_strtol_l.constprop.0+0x90>
 80065a0:	782c      	ldrb	r4, [r5, #0]
 80065a2:	2601      	movs	r6, #1
 80065a4:	1c95      	adds	r5, r2, #2
 80065a6:	f033 0210 	bics.w	r2, r3, #16
 80065aa:	d109      	bne.n	80065c0 <_strtol_l.constprop.0+0x54>
 80065ac:	2c30      	cmp	r4, #48	@ 0x30
 80065ae:	d12a      	bne.n	8006606 <_strtol_l.constprop.0+0x9a>
 80065b0:	782a      	ldrb	r2, [r5, #0]
 80065b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80065b6:	2a58      	cmp	r2, #88	@ 0x58
 80065b8:	d125      	bne.n	8006606 <_strtol_l.constprop.0+0x9a>
 80065ba:	786c      	ldrb	r4, [r5, #1]
 80065bc:	2310      	movs	r3, #16
 80065be:	3502      	adds	r5, #2
 80065c0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80065c4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80065c8:	2200      	movs	r2, #0
 80065ca:	fbbc f9f3 	udiv	r9, ip, r3
 80065ce:	4610      	mov	r0, r2
 80065d0:	fb03 ca19 	mls	sl, r3, r9, ip
 80065d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80065d8:	2f09      	cmp	r7, #9
 80065da:	d81b      	bhi.n	8006614 <_strtol_l.constprop.0+0xa8>
 80065dc:	463c      	mov	r4, r7
 80065de:	42a3      	cmp	r3, r4
 80065e0:	dd27      	ble.n	8006632 <_strtol_l.constprop.0+0xc6>
 80065e2:	1c57      	adds	r7, r2, #1
 80065e4:	d007      	beq.n	80065f6 <_strtol_l.constprop.0+0x8a>
 80065e6:	4581      	cmp	r9, r0
 80065e8:	d320      	bcc.n	800662c <_strtol_l.constprop.0+0xc0>
 80065ea:	d101      	bne.n	80065f0 <_strtol_l.constprop.0+0x84>
 80065ec:	45a2      	cmp	sl, r4
 80065ee:	db1d      	blt.n	800662c <_strtol_l.constprop.0+0xc0>
 80065f0:	fb00 4003 	mla	r0, r0, r3, r4
 80065f4:	2201      	movs	r2, #1
 80065f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80065fa:	e7eb      	b.n	80065d4 <_strtol_l.constprop.0+0x68>
 80065fc:	2c2b      	cmp	r4, #43	@ 0x2b
 80065fe:	bf04      	itt	eq
 8006600:	782c      	ldrbeq	r4, [r5, #0]
 8006602:	1c95      	addeq	r5, r2, #2
 8006604:	e7cf      	b.n	80065a6 <_strtol_l.constprop.0+0x3a>
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1da      	bne.n	80065c0 <_strtol_l.constprop.0+0x54>
 800660a:	2c30      	cmp	r4, #48	@ 0x30
 800660c:	bf0c      	ite	eq
 800660e:	2308      	moveq	r3, #8
 8006610:	230a      	movne	r3, #10
 8006612:	e7d5      	b.n	80065c0 <_strtol_l.constprop.0+0x54>
 8006614:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006618:	2f19      	cmp	r7, #25
 800661a:	d801      	bhi.n	8006620 <_strtol_l.constprop.0+0xb4>
 800661c:	3c37      	subs	r4, #55	@ 0x37
 800661e:	e7de      	b.n	80065de <_strtol_l.constprop.0+0x72>
 8006620:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006624:	2f19      	cmp	r7, #25
 8006626:	d804      	bhi.n	8006632 <_strtol_l.constprop.0+0xc6>
 8006628:	3c57      	subs	r4, #87	@ 0x57
 800662a:	e7d8      	b.n	80065de <_strtol_l.constprop.0+0x72>
 800662c:	f04f 32ff 	mov.w	r2, #4294967295
 8006630:	e7e1      	b.n	80065f6 <_strtol_l.constprop.0+0x8a>
 8006632:	1c53      	adds	r3, r2, #1
 8006634:	d108      	bne.n	8006648 <_strtol_l.constprop.0+0xdc>
 8006636:	2322      	movs	r3, #34	@ 0x22
 8006638:	f8ce 3000 	str.w	r3, [lr]
 800663c:	4660      	mov	r0, ip
 800663e:	f1b8 0f00 	cmp.w	r8, #0
 8006642:	d0a0      	beq.n	8006586 <_strtol_l.constprop.0+0x1a>
 8006644:	1e69      	subs	r1, r5, #1
 8006646:	e006      	b.n	8006656 <_strtol_l.constprop.0+0xea>
 8006648:	b106      	cbz	r6, 800664c <_strtol_l.constprop.0+0xe0>
 800664a:	4240      	negs	r0, r0
 800664c:	f1b8 0f00 	cmp.w	r8, #0
 8006650:	d099      	beq.n	8006586 <_strtol_l.constprop.0+0x1a>
 8006652:	2a00      	cmp	r2, #0
 8006654:	d1f6      	bne.n	8006644 <_strtol_l.constprop.0+0xd8>
 8006656:	f8c8 1000 	str.w	r1, [r8]
 800665a:	e794      	b.n	8006586 <_strtol_l.constprop.0+0x1a>
 800665c:	08007587 	.word	0x08007587

08006660 <_strtol_r>:
 8006660:	f7ff bf84 	b.w	800656c <_strtol_l.constprop.0>

08006664 <_strtoul_l.constprop.0>:
 8006664:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006668:	4e34      	ldr	r6, [pc, #208]	@ (800673c <_strtoul_l.constprop.0+0xd8>)
 800666a:	4686      	mov	lr, r0
 800666c:	460d      	mov	r5, r1
 800666e:	4628      	mov	r0, r5
 8006670:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006674:	5d37      	ldrb	r7, [r6, r4]
 8006676:	f017 0708 	ands.w	r7, r7, #8
 800667a:	d1f8      	bne.n	800666e <_strtoul_l.constprop.0+0xa>
 800667c:	2c2d      	cmp	r4, #45	@ 0x2d
 800667e:	d12f      	bne.n	80066e0 <_strtoul_l.constprop.0+0x7c>
 8006680:	782c      	ldrb	r4, [r5, #0]
 8006682:	2701      	movs	r7, #1
 8006684:	1c85      	adds	r5, r0, #2
 8006686:	f033 0010 	bics.w	r0, r3, #16
 800668a:	d109      	bne.n	80066a0 <_strtoul_l.constprop.0+0x3c>
 800668c:	2c30      	cmp	r4, #48	@ 0x30
 800668e:	d12c      	bne.n	80066ea <_strtoul_l.constprop.0+0x86>
 8006690:	7828      	ldrb	r0, [r5, #0]
 8006692:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8006696:	2858      	cmp	r0, #88	@ 0x58
 8006698:	d127      	bne.n	80066ea <_strtoul_l.constprop.0+0x86>
 800669a:	786c      	ldrb	r4, [r5, #1]
 800669c:	2310      	movs	r3, #16
 800669e:	3502      	adds	r5, #2
 80066a0:	f04f 38ff 	mov.w	r8, #4294967295
 80066a4:	2600      	movs	r6, #0
 80066a6:	fbb8 f8f3 	udiv	r8, r8, r3
 80066aa:	fb03 f908 	mul.w	r9, r3, r8
 80066ae:	ea6f 0909 	mvn.w	r9, r9
 80066b2:	4630      	mov	r0, r6
 80066b4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80066b8:	f1bc 0f09 	cmp.w	ip, #9
 80066bc:	d81c      	bhi.n	80066f8 <_strtoul_l.constprop.0+0x94>
 80066be:	4664      	mov	r4, ip
 80066c0:	42a3      	cmp	r3, r4
 80066c2:	dd2a      	ble.n	800671a <_strtoul_l.constprop.0+0xb6>
 80066c4:	f1b6 3fff 	cmp.w	r6, #4294967295
 80066c8:	d007      	beq.n	80066da <_strtoul_l.constprop.0+0x76>
 80066ca:	4580      	cmp	r8, r0
 80066cc:	d322      	bcc.n	8006714 <_strtoul_l.constprop.0+0xb0>
 80066ce:	d101      	bne.n	80066d4 <_strtoul_l.constprop.0+0x70>
 80066d0:	45a1      	cmp	r9, r4
 80066d2:	db1f      	blt.n	8006714 <_strtoul_l.constprop.0+0xb0>
 80066d4:	fb00 4003 	mla	r0, r0, r3, r4
 80066d8:	2601      	movs	r6, #1
 80066da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80066de:	e7e9      	b.n	80066b4 <_strtoul_l.constprop.0+0x50>
 80066e0:	2c2b      	cmp	r4, #43	@ 0x2b
 80066e2:	bf04      	itt	eq
 80066e4:	782c      	ldrbeq	r4, [r5, #0]
 80066e6:	1c85      	addeq	r5, r0, #2
 80066e8:	e7cd      	b.n	8006686 <_strtoul_l.constprop.0+0x22>
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1d8      	bne.n	80066a0 <_strtoul_l.constprop.0+0x3c>
 80066ee:	2c30      	cmp	r4, #48	@ 0x30
 80066f0:	bf0c      	ite	eq
 80066f2:	2308      	moveq	r3, #8
 80066f4:	230a      	movne	r3, #10
 80066f6:	e7d3      	b.n	80066a0 <_strtoul_l.constprop.0+0x3c>
 80066f8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80066fc:	f1bc 0f19 	cmp.w	ip, #25
 8006700:	d801      	bhi.n	8006706 <_strtoul_l.constprop.0+0xa2>
 8006702:	3c37      	subs	r4, #55	@ 0x37
 8006704:	e7dc      	b.n	80066c0 <_strtoul_l.constprop.0+0x5c>
 8006706:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800670a:	f1bc 0f19 	cmp.w	ip, #25
 800670e:	d804      	bhi.n	800671a <_strtoul_l.constprop.0+0xb6>
 8006710:	3c57      	subs	r4, #87	@ 0x57
 8006712:	e7d5      	b.n	80066c0 <_strtoul_l.constprop.0+0x5c>
 8006714:	f04f 36ff 	mov.w	r6, #4294967295
 8006718:	e7df      	b.n	80066da <_strtoul_l.constprop.0+0x76>
 800671a:	1c73      	adds	r3, r6, #1
 800671c:	d106      	bne.n	800672c <_strtoul_l.constprop.0+0xc8>
 800671e:	2322      	movs	r3, #34	@ 0x22
 8006720:	f8ce 3000 	str.w	r3, [lr]
 8006724:	4630      	mov	r0, r6
 8006726:	b932      	cbnz	r2, 8006736 <_strtoul_l.constprop.0+0xd2>
 8006728:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800672c:	b107      	cbz	r7, 8006730 <_strtoul_l.constprop.0+0xcc>
 800672e:	4240      	negs	r0, r0
 8006730:	2a00      	cmp	r2, #0
 8006732:	d0f9      	beq.n	8006728 <_strtoul_l.constprop.0+0xc4>
 8006734:	b106      	cbz	r6, 8006738 <_strtoul_l.constprop.0+0xd4>
 8006736:	1e69      	subs	r1, r5, #1
 8006738:	6011      	str	r1, [r2, #0]
 800673a:	e7f5      	b.n	8006728 <_strtoul_l.constprop.0+0xc4>
 800673c:	08007587 	.word	0x08007587

08006740 <_strtoul_r>:
 8006740:	f7ff bf90 	b.w	8006664 <_strtoul_l.constprop.0>

08006744 <_malloc_usable_size_r>:
 8006744:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006748:	1f18      	subs	r0, r3, #4
 800674a:	2b00      	cmp	r3, #0
 800674c:	bfbc      	itt	lt
 800674e:	580b      	ldrlt	r3, [r1, r0]
 8006750:	18c0      	addlt	r0, r0, r3
 8006752:	4770      	bx	lr

08006754 <_init>:
 8006754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006756:	bf00      	nop
 8006758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800675a:	bc08      	pop	{r3}
 800675c:	469e      	mov	lr, r3
 800675e:	4770      	bx	lr

08006760 <_fini>:
 8006760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006762:	bf00      	nop
 8006764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006766:	bc08      	pop	{r3}
 8006768:	469e      	mov	lr, r3
 800676a:	4770      	bx	lr
